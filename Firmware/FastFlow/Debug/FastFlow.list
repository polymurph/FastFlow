
FastFlow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003290  08003290  00004290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032ec  080032ec  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080032ec  080032ec  000042ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032f4  080032f4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f4  080032f4  000042f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032f8  080032f8  000042f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080032fc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08003308  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003308  000051b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec71  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002555  00000000  00000000  00013cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00016208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b42  00000000  00000000  00017090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001695a  00000000  00000000  00017bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012098  00000000  00000000  0002e52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5b7  00000000  00000000  000405c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ccb7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b68  00000000  00000000  000ccbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d0728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003278 	.word	0x08003278

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003278 	.word	0x08003278

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	4b35      	ldr	r3, [pc, #212]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a34      	ldr	r2, [pc, #208]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b32      	ldr	r3, [pc, #200]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	4b2e      	ldr	r3, [pc, #184]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a2d      	ldr	r2, [pc, #180]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b2b      	ldr	r3, [pc, #172]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b27      	ldr	r3, [pc, #156]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a26      	ldr	r2, [pc, #152]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b24      	ldr	r3, [pc, #144]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b20      	ldr	r3, [pc, #128]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a1f      	ldr	r2, [pc, #124]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b1d      	ldr	r3, [pc, #116]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI3_CS_MAX31865_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f248 0120 	movw	r1, #32800	@ 0x8020
 8000554:	4819      	ldr	r0, [pc, #100]	@ (80005bc <MX_GPIO_Init+0xf4>)
 8000556:	f000 ff6b 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000560:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	4813      	ldr	r0, [pc, #76]	@ (80005c0 <MX_GPIO_Init+0xf8>)
 8000572:	f000 fdc1 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI3_CS_MAX31865_Pin;
 8000576:	f248 0320 	movw	r3, #32800	@ 0x8020
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	480b      	ldr	r0, [pc, #44]	@ (80005bc <MX_GPIO_Init+0xf4>)
 8000590:	f000 fdb2 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin|DOOR_CLOSED_Pin;
 8000594:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <MX_GPIO_Init+0xf8>)
 80005aa:	f000 fda5 	bl	80010f8 <HAL_GPIO_Init>

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	@ 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40020000 	.word	0x40020000
 80005c0:	40020800 	.word	0x40020800

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fc1a 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f810 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f7ff ff7a 	bl	80004c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 fb78 	bl	8000cc8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80005d8:	f000 f87a 	bl	80006d0 <MX_SPI3_Init>
  MX_TIM1_Init();
 80005dc:	f000 f960 	bl	80008a0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005e0:	f000 f9e2 	bl	80009a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e4:	f000 fa34 	bl	8000a50 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  fastFlow_run();
 80005e8:	f002 fd46 	bl	8003078 <fastFlow_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x28>

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	@ 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fe0e 	bl	8003220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	@ (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	@ (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066e:	2304      	movs	r3, #4
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fef4 	bl	8001464 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000682:	f000 f81f 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f956 	bl	8001954 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 f809 	bl	80006c4 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	@ 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_SPI3_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <MX_SPI3_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_SPI3_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_SPI3_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_SPI3_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_SPI3_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_SPI3_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_SPI3_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_SPI3_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <MX_SPI3_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_SPI3_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <MX_SPI3_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_SPI3_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_SPI3_Init+0x64>)
 8000722:	f001 fb37 	bl	8001d94 <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800072c:	f7ff ffca 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000028 	.word	0x20000028
 8000738:	40003c00 	.word	0x40003c00

0800073c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a19      	ldr	r2, [pc, #100]	@ (80007c0 <HAL_SPI_MspInit+0x84>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d12c      	bne.n	80007b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <HAL_SPI_MspInit+0x88>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000766:	4a17      	ldr	r2, [pc, #92]	@ (80007c4 <HAL_SPI_MspInit+0x88>)
 8000768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800076c:	6413      	str	r3, [r2, #64]	@ 0x40
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <HAL_SPI_MspInit+0x88>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <HAL_SPI_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <HAL_SPI_MspInit+0x88>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <HAL_SPI_MspInit+0x88>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000796:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007a8:	2306      	movs	r3, #6
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <HAL_SPI_MspInit+0x8c>)
 80007b4:	f000 fca0 	bl	80010f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40003c00 	.word	0x40003c00
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020800 	.word	0x40020800

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	4a0f      	ldr	r2, [pc, #60]	@ (8000818 <HAL_MspInit+0x4c>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <HAL_MspInit+0x4c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800080a:	2007      	movs	r0, #7
 800080c:	f000 fc40 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <NMI_Handler+0x4>

08000824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <MemManage_Handler+0x4>

08000834 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <UsageFault_Handler+0x4>

08000844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000872:	f000 fb17 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	@ (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b092      	sub	sp, #72	@ 0x48
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
 80008c0:	615a      	str	r2, [r3, #20]
 80008c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2220      	movs	r2, #32
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fca8 	bl	8003220 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d0:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <MX_TIM1_Init+0x100>)
 80008d2:	4a34      	ldr	r2, [pc, #208]	@ (80009a4 <MX_TIM1_Init+0x104>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008d6:	4b32      	ldr	r3, [pc, #200]	@ (80009a0 <MX_TIM1_Init+0x100>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <MX_TIM1_Init+0x100>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008e2:	4b2f      	ldr	r3, [pc, #188]	@ (80009a0 <MX_TIM1_Init+0x100>)
 80008e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <MX_TIM1_Init+0x100>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f0:	4b2b      	ldr	r3, [pc, #172]	@ (80009a0 <MX_TIM1_Init+0x100>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <MX_TIM1_Init+0x100>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008fc:	4828      	ldr	r0, [pc, #160]	@ (80009a0 <MX_TIM1_Init+0x100>)
 80008fe:	f001 fad2 	bl	8001ea6 <HAL_TIM_OC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000908:	f7ff fedc 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000914:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000918:	4619      	mov	r1, r3
 800091a:	4821      	ldr	r0, [pc, #132]	@ (80009a0 <MX_TIM1_Init+0x100>)
 800091c:	f001 fee0 	bl	80026e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000926:	f7ff fecd 	bl	80006c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	4814      	ldr	r0, [pc, #80]	@ (80009a0 <MX_TIM1_Init+0x100>)
 8000950:	f001 fc2c 	bl	80021ac <HAL_TIM_OC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800095a:	f7ff feb3 	bl	80006c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000972:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000976:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4619      	mov	r1, r3
 8000980:	4807      	ldr	r0, [pc, #28]	@ (80009a0 <MX_TIM1_Init+0x100>)
 8000982:	f001 ff1b 	bl	80027bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800098c:	f7ff fe9a 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000990:	4803      	ldr	r0, [pc, #12]	@ (80009a0 <MX_TIM1_Init+0x100>)
 8000992:	f000 f937 	bl	8000c04 <HAL_TIM_MspPostInit>

}
 8000996:	bf00      	nop
 8000998:	3748      	adds	r7, #72	@ 0x48
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000080 	.word	0x20000080
 80009a4:	40010000 	.word	0x40010000

080009a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	@ 0x30
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2224      	movs	r2, #36	@ 0x24
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fc32 	bl	8003220 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c4:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009c6:	4a21      	ldr	r2, [pc, #132]	@ (8000a4c <MX_TIM3_Init+0xa4>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009ea:	2303      	movs	r3, #3
 80009ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009f2:	2301      	movs	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a02:	2301      	movs	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 8000a16:	f001 fa95 	bl	8001f44 <HAL_TIM_Encoder_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a20:	f7ff fe50 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 8000a32:	f001 fe55 	bl	80026e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a3c:	f7ff fe42 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3730      	adds	r7, #48	@ 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000c8 	.word	0x200000c8
 8000a4c:	40000400 	.word	0x40000400

08000a50 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	@ 0x28
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a72:	4b22      	ldr	r3, [pc, #136]	@ (8000afc <MX_TIM4_Init+0xac>)
 8000a74:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <MX_TIM4_Init+0xb0>)
 8000a76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a78:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_TIM4_Init+0xac>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <MX_TIM4_Init+0xac>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <MX_TIM4_Init+0xac>)
 8000a86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_TIM4_Init+0xac>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <MX_TIM4_Init+0xac>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000a98:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_TIM4_Init+0xac>)
 8000a9a:	f001 fa04 	bl	8001ea6 <HAL_TIM_OC_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f7ff fe0e 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4811      	ldr	r0, [pc, #68]	@ (8000afc <MX_TIM4_Init+0xac>)
 8000ab8:	f001 fe12 	bl	80026e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000ac2:	f7ff fdff 	bl	80006c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	@ (8000afc <MX_TIM4_Init+0xac>)
 8000ade:	f001 fb65 	bl	80021ac <HAL_TIM_OC_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000ae8:	f7ff fdec 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aec:	4803      	ldr	r0, [pc, #12]	@ (8000afc <MX_TIM4_Init+0xac>)
 8000aee:	f000 f889 	bl	8000c04 <HAL_TIM_MspPostInit>

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	@ 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000110 	.word	0x20000110
 8000b00:	40000800 	.word	0x40000800

08000b04 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a15      	ldr	r2, [pc, #84]	@ (8000b68 <HAL_TIM_OC_MspInit+0x64>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10e      	bne.n	8000b34 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <HAL_TIM_OC_MspInit+0x68>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	4a13      	ldr	r2, [pc, #76]	@ (8000b6c <HAL_TIM_OC_MspInit+0x68>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <HAL_TIM_OC_MspInit+0x68>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b32:	e012      	b.n	8000b5a <HAL_TIM_OC_MspInit+0x56>
  else if(tim_ocHandle->Instance==TIM4)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0d      	ldr	r2, [pc, #52]	@ (8000b70 <HAL_TIM_OC_MspInit+0x6c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d10d      	bne.n	8000b5a <HAL_TIM_OC_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_TIM_OC_MspInit+0x68>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a09      	ldr	r2, [pc, #36]	@ (8000b6c <HAL_TIM_OC_MspInit+0x68>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <HAL_TIM_OC_MspInit+0x68>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40000800 	.word	0x40000800

08000b74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	@ (8000bf8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	@ (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8000bce:	23c0      	movs	r3, #192	@ 0xc0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bde:	2302      	movs	r3, #2
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000bea:	f000 fa85 	bl	80010f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40000400 	.word	0x40000400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a24      	ldr	r2, [pc, #144]	@ (8000cb4 <HAL_TIM_MspPostInit+0xb0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d11f      	bne.n	8000c66 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b23      	ldr	r3, [pc, #140]	@ (8000cb8 <HAL_TIM_MspPostInit+0xb4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a22      	ldr	r2, [pc, #136]	@ (8000cb8 <HAL_TIM_MspPostInit+0xb4>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b20      	ldr	r3, [pc, #128]	@ (8000cb8 <HAL_TIM_MspPostInit+0xb4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 8000c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <HAL_TIM_MspPostInit+0xb8>)
 8000c60:	f000 fa4a 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c64:	e022      	b.n	8000cac <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a15      	ldr	r2, [pc, #84]	@ (8000cc0 <HAL_TIM_MspPostInit+0xbc>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d11d      	bne.n	8000cac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <HAL_TIM_MspPostInit+0xb4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c78:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <HAL_TIM_MspPostInit+0xb4>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c80:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <HAL_TIM_MspPostInit+0xb4>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8000c8c:	2340      	movs	r3, #64	@ 0x40
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <HAL_TIM_MspPostInit+0xc0>)
 8000ca8:	f000 fa26 	bl	80010f8 <HAL_GPIO_Init>
}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	@ 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40000800 	.word	0x40000800
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <MX_USART2_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f001 fdae 	bl	8002860 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f7ff fcdb 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000158 	.word	0x20000158
 8000d18:	40004400 	.word	0x40004400

08000d1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a19      	ldr	r2, [pc, #100]	@ (8000da0 <HAL_UART_MspInit+0x84>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12b      	bne.n	8000d96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	4a17      	ldr	r2, [pc, #92]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d76:	230c      	movs	r3, #12
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <HAL_UART_MspInit+0x8c>)
 8000d92:	f000 f9b1 	bl	80010f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	@ 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db0:	f7ff fd64 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f002 fa29 	bl	8003230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fbf1 	bl	80005c4 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000df0:	080032fc 	.word	0x080032fc
  ldr r2, =_sbss
 8000df4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df8:	200001b0 	.word	0x200001b0

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f931 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fcca 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f93b 	bl	80010de <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f911 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	200001a0 	.word	0x200001a0

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200001a0 	.word	0x200001a0

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	@ (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	@ 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	@ 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff47 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff5c 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffb0 	bl	800104c <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e159      	b.n	80013c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8148 	bne.w	80013c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a2 	beq.w	80013c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b57      	ldr	r3, [pc, #348]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a56      	ldr	r2, [pc, #344]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b54      	ldr	r3, [pc, #336]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a52      	ldr	r2, [pc, #328]	@ (80013e4 <HAL_GPIO_Init+0x2ec>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a49      	ldr	r2, [pc, #292]	@ (80013e8 <HAL_GPIO_Init+0x2f0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x202>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a48      	ldr	r2, [pc, #288]	@ (80013ec <HAL_GPIO_Init+0x2f4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1fe>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a47      	ldr	r2, [pc, #284]	@ (80013f0 <HAL_GPIO_Init+0x2f8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1fa>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a46      	ldr	r2, [pc, #280]	@ (80013f4 <HAL_GPIO_Init+0x2fc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1f6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a45      	ldr	r2, [pc, #276]	@ (80013f8 <HAL_GPIO_Init+0x300>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1f2>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	@ (80013e4 <HAL_GPIO_Init+0x2ec>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a2f      	ldr	r2, [pc, #188]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1a      	ldr	r2, [pc, #104]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <HAL_GPIO_Init+0x304>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f aea2 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e001      	b.n	8001422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800144c:	e003      	b.n	8001456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	619a      	str	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e267      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d075      	beq.n	800156e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001482:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	d00c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148e:	4b85      	ldr	r3, [pc, #532]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001496:	2b08      	cmp	r3, #8
 8001498:	d112      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b82      	ldr	r3, [pc, #520]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014a6:	d10b      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	4b7e      	ldr	r3, [pc, #504]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d05b      	beq.n	800156c <HAL_RCC_OscConfig+0x108>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d157      	bne.n	800156c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e242      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c8:	d106      	bne.n	80014d8 <HAL_RCC_OscConfig+0x74>
 80014ca:	4b76      	ldr	r3, [pc, #472]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a75      	ldr	r2, [pc, #468]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xb0>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x98>
 80014e2:	4b70      	ldr	r3, [pc, #448]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6f      	ldr	r2, [pc, #444]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b6d      	ldr	r3, [pc, #436]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6c      	ldr	r2, [pc, #432]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xb0>
 80014fc:	4b69      	ldr	r3, [pc, #420]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a68      	ldr	r2, [pc, #416]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b66      	ldr	r3, [pc, #408]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a65      	ldr	r2, [pc, #404]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fcd6 	bl	8000ecc <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fcd2 	bl	8000ecc <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e207      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b5b      	ldr	r3, [pc, #364]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xc0>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fcc2 	bl	8000ecc <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fcbe 	bl	8000ecc <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1f3      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b51      	ldr	r3, [pc, #324]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0xe8>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800157a:	4b4a      	ldr	r3, [pc, #296]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001586:	4b47      	ldr	r3, [pc, #284]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800158e:	2b08      	cmp	r3, #8
 8001590:	d11c      	bne.n	80015cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b44      	ldr	r3, [pc, #272]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d116      	bne.n	80015cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	4b41      	ldr	r3, [pc, #260]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x152>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e1c7      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4937      	ldr	r1, [pc, #220]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	e03a      	b.n	8001642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d4:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <HAL_RCC_OscConfig+0x244>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fc77 	bl	8000ecc <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fc73 	bl	8000ecc <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1a8      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4925      	ldr	r1, [pc, #148]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
 8001614:	e015      	b.n	8001642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <HAL_RCC_OscConfig+0x244>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fc56 	bl	8000ecc <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001624:	f7ff fc52 	bl	8000ecc <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e187      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d036      	beq.n	80016bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d016      	beq.n	8001684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_RCC_OscConfig+0x248>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff fc36 	bl	8000ecc <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff fc32 	bl	8000ecc <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e167      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x200>
 8001682:	e01b      	b.n	80016bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_RCC_OscConfig+0x248>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff fc1f 	bl	8000ecc <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	e00e      	b.n	80016b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff fc1b 	bl	8000ecc <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d907      	bls.n	80016b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e150      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	42470000 	.word	0x42470000
 80016ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	4b88      	ldr	r3, [pc, #544]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1ea      	bne.n	8001692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 8097 	beq.w	80017f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ce:	4b81      	ldr	r3, [pc, #516]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10f      	bne.n	80016fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b7d      	ldr	r3, [pc, #500]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	4a7c      	ldr	r2, [pc, #496]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ea:	4b7a      	ldr	r3, [pc, #488]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b77      	ldr	r3, [pc, #476]	@ (80018d8 <HAL_RCC_OscConfig+0x474>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001706:	4b74      	ldr	r3, [pc, #464]	@ (80018d8 <HAL_RCC_OscConfig+0x474>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a73      	ldr	r2, [pc, #460]	@ (80018d8 <HAL_RCC_OscConfig+0x474>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff fbdb 	bl	8000ecc <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171a:	f7ff fbd7 	bl	8000ecc <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e10c      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b6a      	ldr	r3, [pc, #424]	@ (80018d8 <HAL_RCC_OscConfig+0x474>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x2ea>
 8001740:	4b64      	ldr	r3, [pc, #400]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001744:	4a63      	ldr	r2, [pc, #396]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	@ 0x70
 800174c:	e01c      	b.n	8001788 <HAL_RCC_OscConfig+0x324>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x30c>
 8001756:	4b5f      	ldr	r3, [pc, #380]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800175a:	4a5e      	ldr	r2, [pc, #376]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6713      	str	r3, [r2, #112]	@ 0x70
 8001762:	4b5c      	ldr	r3, [pc, #368]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001766:	4a5b      	ldr	r2, [pc, #364]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6713      	str	r3, [r2, #112]	@ 0x70
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0x324>
 8001770:	4b58      	ldr	r3, [pc, #352]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001774:	4a57      	ldr	r2, [pc, #348]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6713      	str	r3, [r2, #112]	@ 0x70
 800177c:	4b55      	ldr	r3, [pc, #340]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001780:	4a54      	ldr	r2, [pc, #336]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 0304 	bic.w	r3, r3, #4
 8001786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d015      	beq.n	80017bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fb9c 	bl	8000ecc <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001796:	e00a      	b.n	80017ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001798:	f7ff fb98 	bl	8000ecc <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e0cb      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ae:	4b49      	ldr	r3, [pc, #292]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0ee      	beq.n	8001798 <HAL_RCC_OscConfig+0x334>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff fb86 	bl	8000ecc <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c4:	f7ff fb82 	bl	8000ecc <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0b5      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017da:	4b3e      	ldr	r3, [pc, #248]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ee      	bne.n	80017c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	4b39      	ldr	r3, [pc, #228]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	4a38      	ldr	r2, [pc, #224]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a1 	beq.w	8001944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001802:	4b34      	ldr	r3, [pc, #208]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b08      	cmp	r3, #8
 800180c:	d05c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d141      	bne.n	800189a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <HAL_RCC_OscConfig+0x478>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fb56 	bl	8000ecc <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff fb52 	bl	8000ecc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e087      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	019b      	lsls	r3, r3, #6
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	3b01      	subs	r3, #1
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	491b      	ldr	r1, [pc, #108]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_RCC_OscConfig+0x478>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb2b 	bl	8000ecc <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb27 	bl	8000ecc <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e05c      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x416>
 8001898:	e054      	b.n	8001944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_RCC_OscConfig+0x478>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fb14 	bl	8000ecc <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff fb10 	bl	8000ecc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e045      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_RCC_OscConfig+0x470>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x444>
 80018c6:	e03d      	b.n	8001944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e038      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40007000 	.word	0x40007000
 80018dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_RCC_OscConfig+0x4ec>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d028      	beq.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d121      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d11a      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001910:	4013      	ands	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001918:	4293      	cmp	r3, r2
 800191a:	d111      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	3b01      	subs	r3, #1
 800192a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d107      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0cc      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b68      	ldr	r3, [pc, #416]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d90c      	bls.n	8001990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b65      	ldr	r3, [pc, #404]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b63      	ldr	r3, [pc, #396]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0b8      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a8:	4b59      	ldr	r3, [pc, #356]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a58      	ldr	r2, [pc, #352]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c0:	4b53      	ldr	r3, [pc, #332]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a52      	ldr	r2, [pc, #328]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b50      	ldr	r3, [pc, #320]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	494d      	ldr	r1, [pc, #308]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d044      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b47      	ldr	r3, [pc, #284]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d119      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e07f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a12:	4b3f      	ldr	r3, [pc, #252]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	4b3b      	ldr	r3, [pc, #236]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e067      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b37      	ldr	r3, [pc, #220]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4934      	ldr	r1, [pc, #208]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a44:	f7ff fa42 	bl	8000ecc <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff fa3e 	bl	8000ecc <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e04f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b2b      	ldr	r3, [pc, #172]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	4b25      	ldr	r3, [pc, #148]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d20c      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b22      	ldr	r3, [pc, #136]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e032      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa8:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4916      	ldr	r1, [pc, #88]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d009      	beq.n	8001ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	490e      	ldr	r1, [pc, #56]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ada:	f000 f821 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	490a      	ldr	r1, [pc, #40]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	5ccb      	ldrb	r3, [r1, r3]
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_RCC_ClockConfig+0x1c8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff f9a2 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00
 8001b10:	40023800 	.word	0x40023800
 8001b14:	080032d4 	.word	0x080032d4
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b24:	b094      	sub	sp, #80	@ 0x50
 8001b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b38:	4b79      	ldr	r3, [pc, #484]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d00d      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x40>
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	f200 80e1 	bhi.w	8001d0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b52:	e0db      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b73      	ldr	r3, [pc, #460]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b58:	e0db      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5a:	4b73      	ldr	r3, [pc, #460]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b5e:	e0d8      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b60:	4b6f      	ldr	r3, [pc, #444]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d063      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b6a      	ldr	r3, [pc, #424]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b92:	4622      	mov	r2, r4
 8001b94:	462b      	mov	r3, r5
 8001b96:	f04f 0000 	mov.w	r0, #0
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	0159      	lsls	r1, r3, #5
 8001ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba4:	0150      	lsls	r0, r2, #5
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4621      	mov	r1, r4
 8001bac:	1a51      	subs	r1, r2, r1
 8001bae:	6139      	str	r1, [r7, #16]
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bc4:	4659      	mov	r1, fp
 8001bc6:	018b      	lsls	r3, r1, #6
 8001bc8:	4651      	mov	r1, sl
 8001bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bce:	4651      	mov	r1, sl
 8001bd0:	018a      	lsls	r2, r1, #6
 8001bd2:	4651      	mov	r1, sl
 8001bd4:	ebb2 0801 	subs.w	r8, r2, r1
 8001bd8:	4659      	mov	r1, fp
 8001bda:	eb63 0901 	sbc.w	r9, r3, r1
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bf2:	4690      	mov	r8, r2
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	eb18 0303 	adds.w	r3, r8, r3
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	462b      	mov	r3, r5
 8001c00:	eb49 0303 	adc.w	r3, r9, r3
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c12:	4629      	mov	r1, r5
 8001c14:	024b      	lsls	r3, r1, #9
 8001c16:	4621      	mov	r1, r4
 8001c18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	024a      	lsls	r2, r1, #9
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c26:	2200      	movs	r2, #0
 8001c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c30:	f7fe fad2 	bl	80001d8 <__aeabi_uldivmod>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c3c:	e058      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3e:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	099b      	lsrs	r3, r3, #6
 8001c44:	2200      	movs	r2, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	4611      	mov	r1, r2
 8001c4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c4e:	623b      	str	r3, [r7, #32]
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c58:	4642      	mov	r2, r8
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	f04f 0000 	mov.w	r0, #0
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	0159      	lsls	r1, r3, #5
 8001c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c6a:	0150      	lsls	r0, r2, #5
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4641      	mov	r1, r8
 8001c72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c76:	4649      	mov	r1, r9
 8001c78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c90:	ebb2 040a 	subs.w	r4, r2, sl
 8001c94:	eb63 050b 	sbc.w	r5, r3, fp
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	00eb      	lsls	r3, r5, #3
 8001ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ca6:	00e2      	lsls	r2, r4, #3
 8001ca8:	4614      	mov	r4, r2
 8001caa:	461d      	mov	r5, r3
 8001cac:	4643      	mov	r3, r8
 8001cae:	18e3      	adds	r3, r4, r3
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	eb45 0303 	adc.w	r3, r5, r3
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	028b      	lsls	r3, r1, #10
 8001cca:	4621      	mov	r1, r4
 8001ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	028a      	lsls	r2, r1, #10
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	61fa      	str	r2, [r7, #28]
 8001ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce4:	f7fe fa78 	bl	80001d8 <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4613      	mov	r3, r2
 8001cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0c1b      	lsrs	r3, r3, #16
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d0a:	e002      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3750      	adds	r7, #80	@ 0x50
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	00f42400 	.word	0x00f42400
 8001d28:	007a1200 	.word	0x007a1200

08001d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d30:	4b03      	ldr	r3, [pc, #12]	@ (8001d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d48:	f7ff fff0 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0a9b      	lsrs	r3, r3, #10
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	@ (8001d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	080032e4 	.word	0x080032e4

08001d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d70:	f7ff ffdc 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0b5b      	lsrs	r3, r3, #13
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	@ (8001d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	080032e4 	.word	0x080032e4

08001d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e07b      	b.n	8001e9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d108      	bne.n	8001dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001db6:	d009      	beq.n	8001dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
 8001dbe:	e005      	b.n	8001dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fca8 	bl	800073c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e50:	ea42 0103 	orr.w	r1, r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	f003 0104 	and.w	r1, r3, #4
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	f003 0210 	and.w	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e041      	b.n	8001f3c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d106      	bne.n	8001ed2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7fe fe19 	bl	8000b04 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	f000 f9bd 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e097      	b.n	8002088 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d106      	bne.n	8001f72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7fe fe01 	bl	8000b74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f88:	f023 0307 	bic.w	r3, r3, #7
 8001f8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3304      	adds	r3, #4
 8001f96:	4619      	mov	r1, r3
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f000 f963 	bl	8002264 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001fe4:	f023 030c 	bic.w	r3, r3, #12
 8001fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001ff0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	4313      	orrs	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	011a      	lsls	r2, r3, #4
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	031b      	lsls	r3, r3, #12
 8002014:	4313      	orrs	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002022:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800202a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	4313      	orrs	r3, r2
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80020b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d110      	bne.n	80020e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d102      	bne.n	80020cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80020c6:	7b7b      	ldrb	r3, [r7, #13]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d001      	beq.n	80020d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e069      	b.n	80021a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020e0:	e031      	b.n	8002146 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d110      	bne.n	800210a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80020e8:	7bbb      	ldrb	r3, [r7, #14]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d102      	bne.n	80020f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80020ee:	7b3b      	ldrb	r3, [r7, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d001      	beq.n	80020f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e055      	b.n	80021a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002108:	e01d      	b.n	8002146 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d108      	bne.n	8002122 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d105      	bne.n	8002122 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002116:	7b7b      	ldrb	r3, [r7, #13]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d102      	bne.n	8002122 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800211c:	7b3b      	ldrb	r3, [r7, #12]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e03e      	b.n	80021a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2202      	movs	r2, #2
 8002142:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_TIM_Encoder_Start+0xc4>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b04      	cmp	r3, #4
 8002150:	d008      	beq.n	8002164 <HAL_TIM_Encoder_Start+0xd4>
 8002152:	e00f      	b.n	8002174 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2201      	movs	r2, #1
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fa99 	bl	8002694 <TIM_CCxChannelCmd>
      break;
 8002162:	e016      	b.n	8002192 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2201      	movs	r2, #1
 800216a:	2104      	movs	r1, #4
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fa91 	bl	8002694 <TIM_CCxChannelCmd>
      break;
 8002172:	e00e      	b.n	8002192 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2201      	movs	r2, #1
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fa89 	bl	8002694 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2201      	movs	r2, #1
 8002188:	2104      	movs	r1, #4
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fa82 	bl	8002694 <TIM_CCxChannelCmd>
      break;
 8002190:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e048      	b.n	800225c <HAL_TIM_OC_ConfigChannel+0xb0>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	d839      	bhi.n	800224c <HAL_TIM_OC_ConfigChannel+0xa0>
 80021d8:	a201      	add	r2, pc, #4	@ (adr r2, 80021e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80021da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021de:	bf00      	nop
 80021e0:	08002215 	.word	0x08002215
 80021e4:	0800224d 	.word	0x0800224d
 80021e8:	0800224d 	.word	0x0800224d
 80021ec:	0800224d 	.word	0x0800224d
 80021f0:	08002223 	.word	0x08002223
 80021f4:	0800224d 	.word	0x0800224d
 80021f8:	0800224d 	.word	0x0800224d
 80021fc:	0800224d 	.word	0x0800224d
 8002200:	08002231 	.word	0x08002231
 8002204:	0800224d 	.word	0x0800224d
 8002208:	0800224d 	.word	0x0800224d
 800220c:	0800224d 	.word	0x0800224d
 8002210:	0800223f 	.word	0x0800223f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f8ae 	bl	800237c <TIM_OC1_SetConfig>
      break;
 8002220:	e017      	b.n	8002252 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f90d 	bl	8002448 <TIM_OC2_SetConfig>
      break;
 800222e:	e010      	b.n	8002252 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f972 	bl	8002520 <TIM_OC3_SetConfig>
      break;
 800223c:	e009      	b.n	8002252 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f9d5 	bl	80025f4 <TIM_OC4_SetConfig>
      break;
 800224a:	e002      	b.n	8002252 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	75fb      	strb	r3, [r7, #23]
      break;
 8002250:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800225a:	7dfb      	ldrb	r3, [r7, #23]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3a      	ldr	r2, [pc, #232]	@ (8002360 <TIM_Base_SetConfig+0xfc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00f      	beq.n	800229c <TIM_Base_SetConfig+0x38>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002282:	d00b      	beq.n	800229c <TIM_Base_SetConfig+0x38>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a37      	ldr	r2, [pc, #220]	@ (8002364 <TIM_Base_SetConfig+0x100>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d007      	beq.n	800229c <TIM_Base_SetConfig+0x38>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a36      	ldr	r2, [pc, #216]	@ (8002368 <TIM_Base_SetConfig+0x104>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0x38>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a35      	ldr	r2, [pc, #212]	@ (800236c <TIM_Base_SetConfig+0x108>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d108      	bne.n	80022ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002360 <TIM_Base_SetConfig+0xfc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01b      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022bc:	d017      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a28      	ldr	r2, [pc, #160]	@ (8002364 <TIM_Base_SetConfig+0x100>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a27      	ldr	r2, [pc, #156]	@ (8002368 <TIM_Base_SetConfig+0x104>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00f      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a26      	ldr	r2, [pc, #152]	@ (800236c <TIM_Base_SetConfig+0x108>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00b      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a25      	ldr	r2, [pc, #148]	@ (8002370 <TIM_Base_SetConfig+0x10c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a24      	ldr	r2, [pc, #144]	@ (8002374 <TIM_Base_SetConfig+0x110>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d003      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a23      	ldr	r2, [pc, #140]	@ (8002378 <TIM_Base_SetConfig+0x114>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d108      	bne.n	8002300 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a0e      	ldr	r2, [pc, #56]	@ (8002360 <TIM_Base_SetConfig+0xfc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d103      	bne.n	8002334 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f023 0201 	bic.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]
  }
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000
 8002364:	40000400 	.word	0x40000400
 8002368:	40000800 	.word	0x40000800
 800236c:	40000c00 	.word	0x40000c00
 8002370:	40014000 	.word	0x40014000
 8002374:	40014400 	.word	0x40014400
 8002378:	40014800 	.word	0x40014800

0800237c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f023 0201 	bic.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f023 0302 	bic.w	r3, r3, #2
 80023c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <TIM_OC1_SetConfig+0xc8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10c      	bne.n	80023f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f023 0308 	bic.w	r3, r3, #8
 80023de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a13      	ldr	r2, [pc, #76]	@ (8002444 <TIM_OC1_SetConfig+0xc8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d111      	bne.n	800241e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	621a      	str	r2, [r3, #32]
}
 8002438:	bf00      	nop
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40010000 	.word	0x40010000

08002448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f023 0210 	bic.w	r2, r3, #16
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800247e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f023 0320 	bic.w	r3, r3, #32
 8002492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a1e      	ldr	r2, [pc, #120]	@ (800251c <TIM_OC2_SetConfig+0xd4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d10d      	bne.n	80024c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a15      	ldr	r2, [pc, #84]	@ (800251c <TIM_OC2_SetConfig+0xd4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d113      	bne.n	80024f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	621a      	str	r2, [r3, #32]
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40010000 	.word	0x40010000

08002520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1d      	ldr	r2, [pc, #116]	@ (80025f0 <TIM_OC3_SetConfig+0xd0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d10d      	bne.n	800259a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a14      	ldr	r2, [pc, #80]	@ (80025f0 <TIM_OC3_SetConfig+0xd0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d113      	bne.n	80025ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	621a      	str	r2, [r3, #32]
}
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40010000 	.word	0x40010000

080025f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800262a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800263e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	031b      	lsls	r3, r3, #12
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a10      	ldr	r2, [pc, #64]	@ (8002690 <TIM_OC4_SetConfig+0x9c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d109      	bne.n	8002668 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800265a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	019b      	lsls	r3, r3, #6
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	621a      	str	r2, [r3, #32]
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40010000 	.word	0x40010000

08002694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2201      	movs	r2, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a1a      	ldr	r2, [r3, #32]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	431a      	orrs	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	621a      	str	r2, [r3, #32]
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e050      	b.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800271e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1c      	ldr	r2, [pc, #112]	@ (80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d018      	beq.n	800276e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002744:	d013      	beq.n	800276e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a18      	ldr	r2, [pc, #96]	@ (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00e      	beq.n	800276e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a16      	ldr	r2, [pc, #88]	@ (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d009      	beq.n	800276e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a15      	ldr	r2, [pc, #84]	@ (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d004      	beq.n	800276e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a13      	ldr	r2, [pc, #76]	@ (80027b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10c      	bne.n	8002788 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	4313      	orrs	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40010000 	.word	0x40010000
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800
 80027b4:	40000c00 	.word	0x40000c00
 80027b8:	40014000 	.word	0x40014000

080027bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e03d      	b.n	8002854 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e042      	b.n	80028f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fa48 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	@ 0x24
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f973 	bl	8002b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b20      	cmp	r3, #32
 800291e:	d175      	bne.n	8002a0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_UART_Transmit+0x2c>
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e06e      	b.n	8002a0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2221      	movs	r2, #33	@ 0x21
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800293e:	f7fe fac5 	bl	8000ecc <HAL_GetTick>
 8002942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	88fa      	ldrh	r2, [r7, #6]
 8002948:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	88fa      	ldrh	r2, [r7, #6]
 800294e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002958:	d108      	bne.n	800296c <HAL_UART_Transmit+0x6c>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	e003      	b.n	8002974 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002974:	e02e      	b.n	80029d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	2180      	movs	r1, #128	@ 0x80
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f848 	bl	8002a16 <UART_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e03a      	b.n	8002a0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10b      	bne.n	80029b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	3302      	adds	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	e007      	b.n	80029c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	3301      	adds	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1cb      	bne.n	8002976 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2140      	movs	r1, #64	@ 0x40
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f814 	bl	8002a16 <UART_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e006      	b.n	8002a0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	4613      	mov	r3, r2
 8002a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a26:	e03b      	b.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d037      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a30:	f7fe fa4c 	bl	8000ecc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	6a3a      	ldr	r2, [r7, #32]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d302      	bcc.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e03a      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d023      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b80      	cmp	r3, #128	@ 0x80
 8002a5c:	d020      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b40      	cmp	r3, #64	@ 0x40
 8002a62:	d01d      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d116      	bne.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f81d 	bl	8002ac8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2208      	movs	r2, #8
 8002a92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e00f      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d0b4      	beq.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b095      	sub	sp, #84	@ 0x54
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ada:	e853 3f00 	ldrex	r3, [r3]
 8002ade:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	330c      	adds	r3, #12
 8002aee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002af0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002af6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e5      	bne.n	8002ad0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3314      	adds	r3, #20
 8002b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3314      	adds	r3, #20
 8002b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e5      	bne.n	8002b04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d119      	bne.n	8002b74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	330c      	adds	r3, #12
 8002b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f023 0310 	bic.w	r3, r3, #16
 8002b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b60:	61ba      	str	r2, [r7, #24]
 8002b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	6979      	ldr	r1, [r7, #20]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e5      	bne.n	8002b40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b82:	bf00      	nop
 8002b84:	3754      	adds	r7, #84	@ 0x54
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b94:	b0c0      	sub	sp, #256	@ 0x100
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	ea40 0301 	orr.w	r3, r0, r1
 8002bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002be8:	f021 010c 	bic.w	r1, r1, #12
 8002bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0a:	6999      	ldr	r1, [r3, #24]
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	ea40 0301 	orr.w	r3, r0, r1
 8002c16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b8f      	ldr	r3, [pc, #572]	@ (8002e5c <UART_SetConfig+0x2cc>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d005      	beq.n	8002c30 <UART_SetConfig+0xa0>
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b8d      	ldr	r3, [pc, #564]	@ (8002e60 <UART_SetConfig+0x2d0>)
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d104      	bne.n	8002c3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7ff f89c 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 8002c34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c38:	e003      	b.n	8002c42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c3a:	f7ff f883 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 8002c3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c4c:	f040 810c 	bne.w	8002e68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c62:	4622      	mov	r2, r4
 8002c64:	462b      	mov	r3, r5
 8002c66:	1891      	adds	r1, r2, r2
 8002c68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c6a:	415b      	adcs	r3, r3
 8002c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c72:	4621      	mov	r1, r4
 8002c74:	eb12 0801 	adds.w	r8, r2, r1
 8002c78:	4629      	mov	r1, r5
 8002c7a:	eb43 0901 	adc.w	r9, r3, r1
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c92:	4690      	mov	r8, r2
 8002c94:	4699      	mov	r9, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	eb18 0303 	adds.w	r3, r8, r3
 8002c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ca0:	462b      	mov	r3, r5
 8002ca2:	eb49 0303 	adc.w	r3, r9, r3
 8002ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	18db      	adds	r3, r3, r3
 8002cc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	eb42 0303 	adc.w	r3, r2, r3
 8002cca:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ccc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002cd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002cd4:	f7fd fa80 	bl	80001d8 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4b61      	ldr	r3, [pc, #388]	@ (8002e64 <UART_SetConfig+0x2d4>)
 8002cde:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	011c      	lsls	r4, r3, #4
 8002ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002cf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	1891      	adds	r1, r2, r2
 8002cfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d00:	415b      	adcs	r3, r3
 8002d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d08:	4641      	mov	r1, r8
 8002d0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002d0e:	4649      	mov	r1, r9
 8002d10:	eb43 0b01 	adc.w	fp, r3, r1
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d28:	4692      	mov	sl, r2
 8002d2a:	469b      	mov	fp, r3
 8002d2c:	4643      	mov	r3, r8
 8002d2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002d32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d36:	464b      	mov	r3, r9
 8002d38:	eb4b 0303 	adc.w	r3, fp, r3
 8002d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d54:	460b      	mov	r3, r1
 8002d56:	18db      	adds	r3, r3, r3
 8002d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d6a:	f7fd fa35 	bl	80001d8 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	4b3b      	ldr	r3, [pc, #236]	@ (8002e64 <UART_SetConfig+0x2d4>)
 8002d76:	fba3 2301 	umull	r2, r3, r3, r1
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2264      	movs	r2, #100	@ 0x64
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	1acb      	subs	r3, r1, r3
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d8a:	4b36      	ldr	r3, [pc, #216]	@ (8002e64 <UART_SetConfig+0x2d4>)
 8002d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d98:	441c      	add	r4, r3
 8002d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002da4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002da8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002dac:	4642      	mov	r2, r8
 8002dae:	464b      	mov	r3, r9
 8002db0:	1891      	adds	r1, r2, r2
 8002db2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002db4:	415b      	adcs	r3, r3
 8002db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	1851      	adds	r1, r2, r1
 8002dc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	414b      	adcs	r3, r1
 8002dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	00cb      	lsls	r3, r1, #3
 8002dd8:	4651      	mov	r1, sl
 8002dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dde:	4651      	mov	r1, sl
 8002de0:	00ca      	lsls	r2, r1, #3
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	4642      	mov	r2, r8
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002df0:	464b      	mov	r3, r9
 8002df2:	460a      	mov	r2, r1
 8002df4:	eb42 0303 	adc.w	r3, r2, r3
 8002df8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e10:	460b      	mov	r3, r1
 8002e12:	18db      	adds	r3, r3, r3
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e16:	4613      	mov	r3, r2
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e26:	f7fd f9d7 	bl	80001d8 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e64 <UART_SetConfig+0x2d4>)
 8002e30:	fba3 1302 	umull	r1, r3, r3, r2
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	2164      	movs	r1, #100	@ 0x64
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	3332      	adds	r3, #50	@ 0x32
 8002e42:	4a08      	ldr	r2, [pc, #32]	@ (8002e64 <UART_SetConfig+0x2d4>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	f003 0207 	and.w	r2, r3, #7
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4422      	add	r2, r4
 8002e56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e58:	e106      	b.n	8003068 <UART_SetConfig+0x4d8>
 8002e5a:	bf00      	nop
 8002e5c:	40011000 	.word	0x40011000
 8002e60:	40011400 	.word	0x40011400
 8002e64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e7a:	4642      	mov	r2, r8
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	1891      	adds	r1, r2, r2
 8002e80:	6239      	str	r1, [r7, #32]
 8002e82:	415b      	adcs	r3, r3
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	1854      	adds	r4, r2, r1
 8002e8e:	4649      	mov	r1, r9
 8002e90:	eb43 0501 	adc.w	r5, r3, r1
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	00eb      	lsls	r3, r5, #3
 8002e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea2:	00e2      	lsls	r2, r4, #3
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	4643      	mov	r3, r8
 8002eaa:	18e3      	adds	r3, r4, r3
 8002eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	eb45 0303 	adc.w	r3, r5, r3
 8002eb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ec6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	008b      	lsls	r3, r1, #2
 8002eda:	4621      	mov	r1, r4
 8002edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	008a      	lsls	r2, r1, #2
 8002ee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ee8:	f7fd f976 	bl	80001d8 <__aeabi_uldivmod>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4b60      	ldr	r3, [pc, #384]	@ (8003074 <UART_SetConfig+0x4e4>)
 8002ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	011c      	lsls	r4, r3, #4
 8002efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	464b      	mov	r3, r9
 8002f10:	1891      	adds	r1, r2, r2
 8002f12:	61b9      	str	r1, [r7, #24]
 8002f14:	415b      	adcs	r3, r3
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	1851      	adds	r1, r2, r1
 8002f20:	6139      	str	r1, [r7, #16]
 8002f22:	4649      	mov	r1, r9
 8002f24:	414b      	adcs	r3, r1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f34:	4659      	mov	r1, fp
 8002f36:	00cb      	lsls	r3, r1, #3
 8002f38:	4651      	mov	r1, sl
 8002f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3e:	4651      	mov	r1, sl
 8002f40:	00ca      	lsls	r2, r1, #3
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	4642      	mov	r2, r8
 8002f4a:	189b      	adds	r3, r3, r2
 8002f4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f50:	464b      	mov	r3, r9
 8002f52:	460a      	mov	r2, r1
 8002f54:	eb42 0303 	adc.w	r3, r2, r3
 8002f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f74:	4649      	mov	r1, r9
 8002f76:	008b      	lsls	r3, r1, #2
 8002f78:	4641      	mov	r1, r8
 8002f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f7e:	4641      	mov	r1, r8
 8002f80:	008a      	lsls	r2, r1, #2
 8002f82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f86:	f7fd f927 	bl	80001d8 <__aeabi_uldivmod>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4b38      	ldr	r3, [pc, #224]	@ (8003074 <UART_SetConfig+0x4e4>)
 8002f92:	fba3 2301 	umull	r2, r3, r3, r1
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2264      	movs	r2, #100	@ 0x64
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	1acb      	subs	r3, r1, r3
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	3332      	adds	r3, #50	@ 0x32
 8002fa4:	4a33      	ldr	r2, [pc, #204]	@ (8003074 <UART_SetConfig+0x4e4>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb0:	441c      	add	r4, r3
 8002fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fba:	677a      	str	r2, [r7, #116]	@ 0x74
 8002fbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002fc0:	4642      	mov	r2, r8
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	1891      	adds	r1, r2, r2
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	415b      	adcs	r3, r3
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	1851      	adds	r1, r2, r1
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	414b      	adcs	r3, r1
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fe8:	4659      	mov	r1, fp
 8002fea:	00cb      	lsls	r3, r1, #3
 8002fec:	4651      	mov	r1, sl
 8002fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff2:	4651      	mov	r1, sl
 8002ff4:	00ca      	lsls	r2, r1, #3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	189b      	adds	r3, r3, r2
 8003000:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003002:	464b      	mov	r3, r9
 8003004:	460a      	mov	r2, r1
 8003006:	eb42 0303 	adc.w	r3, r2, r3
 800300a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	663b      	str	r3, [r7, #96]	@ 0x60
 8003016:	667a      	str	r2, [r7, #100]	@ 0x64
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003024:	4649      	mov	r1, r9
 8003026:	008b      	lsls	r3, r1, #2
 8003028:	4641      	mov	r1, r8
 800302a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800302e:	4641      	mov	r1, r8
 8003030:	008a      	lsls	r2, r1, #2
 8003032:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003036:	f7fd f8cf 	bl	80001d8 <__aeabi_uldivmod>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <UART_SetConfig+0x4e4>)
 8003040:	fba3 1302 	umull	r1, r3, r3, r2
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	2164      	movs	r1, #100	@ 0x64
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	3332      	adds	r3, #50	@ 0x32
 8003052:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <UART_SetConfig+0x4e4>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	f003 020f 	and.w	r2, r3, #15
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4422      	add	r2, r4
 8003066:	609a      	str	r2, [r3, #8]
}
 8003068:	bf00      	nop
 800306a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800306e:	46bd      	mov	sp, r7
 8003070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003074:	51eb851f 	.word	0x51eb851f

08003078 <fastFlow_run>:
#include "usart.h"

#include "encoder.h"

void fastFlow_run()
{
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b092      	sub	sp, #72	@ 0x48
 800307c:	af00      	add	r7, sp, #0
	uint8_t helloWorld_msg[] = "Hello, World!\n\r";
 800307e:	4b28      	ldr	r3, [pc, #160]	@ (8003120 <fastFlow_run+0xa8>)
 8003080:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8003084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003086:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t turnedRight_msg[] = "Turned Right!\n\r";
 800308a:	4b26      	ldr	r3, [pc, #152]	@ (8003124 <fastFlow_run+0xac>)
 800308c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t turnedLeft_msg[] = "Turned Left!\n\r";
 8003096:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <fastFlow_run+0xb0>)
 8003098:	f107 0418 	add.w	r4, r7, #24
 800309c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800309e:	c407      	stmia	r4!, {r0, r1, r2}
 80030a0:	8023      	strh	r3, [r4, #0]
 80030a2:	3402      	adds	r4, #2
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	7023      	strb	r3, [r4, #0]
	uint8_t buttonPressed_msg[] = "Button pressed!\n\r";
 80030a8:	4b20      	ldr	r3, [pc, #128]	@ (800312c <fastFlow_run+0xb4>)
 80030aa:	1d3c      	adds	r4, r7, #4
 80030ac:	461d      	mov	r5, r3
 80030ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030b2:	682b      	ldr	r3, [r5, #0]
 80030b4:	8023      	strh	r3, [r4, #0]

	init_hardware();
 80030b6:	f000 f8ab 	bl	8003210 <init_hardware>

	HAL_UART_Transmit(&huart2, helloWorld_msg, sizeof(helloWorld_msg) - 1, 1000);
 80030ba:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80030be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030c2:	220f      	movs	r2, #15
 80030c4:	481a      	ldr	r0, [pc, #104]	@ (8003130 <fastFlow_run+0xb8>)
 80030c6:	f7ff fc1b 	bl	8002900 <HAL_UART_Transmit>


	while(1){

		switch(encoder_read()){
 80030ca:	f000 f87d 	bl	80031c8 <encoder_read>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d002      	beq.n	80030da <fastFlow_run+0x62>
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d009      	beq.n	80030ec <fastFlow_run+0x74>
			case MOVED_COUNTERCLOCKWISE:
				HAL_UART_Transmit(&huart2, turnedLeft_msg, sizeof(turnedLeft_msg) - 1, 1000);
				break;

			default:
				break;
 80030d8:	e011      	b.n	80030fe <fastFlow_run+0x86>
				HAL_UART_Transmit(&huart2, turnedRight_msg, sizeof(turnedRight_msg) - 1, 1000);
 80030da:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80030de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030e2:	220f      	movs	r2, #15
 80030e4:	4812      	ldr	r0, [pc, #72]	@ (8003130 <fastFlow_run+0xb8>)
 80030e6:	f7ff fc0b 	bl	8002900 <HAL_UART_Transmit>
				break;
 80030ea:	e008      	b.n	80030fe <fastFlow_run+0x86>
				HAL_UART_Transmit(&huart2, turnedLeft_msg, sizeof(turnedLeft_msg) - 1, 1000);
 80030ec:	f107 0118 	add.w	r1, r7, #24
 80030f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030f4:	220e      	movs	r2, #14
 80030f6:	480e      	ldr	r0, [pc, #56]	@ (8003130 <fastFlow_run+0xb8>)
 80030f8:	f7ff fc02 	bl	8002900 <HAL_UART_Transmit>
				break;
 80030fc:	bf00      	nop
		}

		if(encoder_readPushButton()){
 80030fe:	f000 f82b 	bl	8003158 <encoder_readPushButton>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d006      	beq.n	8003116 <fastFlow_run+0x9e>
			HAL_UART_Transmit(&huart2, buttonPressed_msg, sizeof(buttonPressed_msg) - 1, 1000);
 8003108:	1d39      	adds	r1, r7, #4
 800310a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800310e:	2211      	movs	r2, #17
 8003110:	4807      	ldr	r0, [pc, #28]	@ (8003130 <fastFlow_run+0xb8>)
 8003112:	f7ff fbf5 	bl	8002900 <HAL_UART_Transmit>
		}

		HAL_Delay(100);
 8003116:	2064      	movs	r0, #100	@ 0x64
 8003118:	f7fd fee4 	bl	8000ee4 <HAL_Delay>
		switch(encoder_read()){
 800311c:	e7d5      	b.n	80030ca <fastFlow_run+0x52>
 800311e:	bf00      	nop
 8003120:	08003290 	.word	0x08003290
 8003124:	080032a0 	.word	0x080032a0
 8003128:	080032b0 	.word	0x080032b0
 800312c:	080032c0 	.word	0x080032c0
 8003130:	20000158 	.word	0x20000158

08003134 <buzzer_init>:

#include "main.h"


void buzzer_init()
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0

}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <encoder_init>:
#include <stdint.h>

const uint32_t _c_debounce_tick_delay = 10;

void encoder_init()
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003148:	213c      	movs	r1, #60	@ 0x3c
 800314a:	4802      	ldr	r0, [pc, #8]	@ (8003154 <encoder_init+0x10>)
 800314c:	f7fe ffa0 	bl	8002090 <HAL_TIM_Encoder_Start>
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	200000c8 	.word	0x200000c8

08003158 <encoder_readPushButton>:

bool encoder_readPushButton()
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
	static uint32_t lastTick = 0;
	static bool lastButtonState = false;
	uint32_t currentTick;
	bool currentButtonState = HAL_GPIO_ReadPin(ENCODER_BUTTON_GPIO_Port, ENCODER_BUTTON_Pin);
 800315e:	2110      	movs	r1, #16
 8003160:	4816      	ldr	r0, [pc, #88]	@ (80031bc <encoder_readPushButton+0x64>)
 8003162:	f7fe f94d 	bl	8001400 <HAL_GPIO_ReadPin>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	70fb      	strb	r3, [r7, #3]

	if(currentButtonState && currentButtonState != lastButtonState){
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d016      	beq.n	80031a6 <encoder_readPushButton+0x4e>
 8003178:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <encoder_readPushButton+0x68>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	429a      	cmp	r2, r3
 8003180:	d011      	beq.n	80031a6 <encoder_readPushButton+0x4e>
		currentTick = HAL_GetTick();
 8003182:	f7fd fea3 	bl	8000ecc <HAL_GetTick>
 8003186:	6078      	str	r0, [r7, #4]

		if((currentTick - lastTick) > _c_debounce_tick_delay){
 8003188:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <encoder_readPushButton+0x6c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	220a      	movs	r2, #10
 8003192:	4293      	cmp	r3, r2
 8003194:	d907      	bls.n	80031a6 <encoder_readPushButton+0x4e>
			lastTick = currentTick;
 8003196:	4a0b      	ldr	r2, [pc, #44]	@ (80031c4 <encoder_readPushButton+0x6c>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6013      	str	r3, [r2, #0]
			lastButtonState = currentButtonState;
 800319c:	4a08      	ldr	r2, [pc, #32]	@ (80031c0 <encoder_readPushButton+0x68>)
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	7013      	strb	r3, [r2, #0]
			return true;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e006      	b.n	80031b4 <encoder_readPushButton+0x5c>
		}
	}

	lastTick = currentTick;
 80031a6:	4a07      	ldr	r2, [pc, #28]	@ (80031c4 <encoder_readPushButton+0x6c>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6013      	str	r3, [r2, #0]
	lastButtonState = currentButtonState;
 80031ac:	4a04      	ldr	r2, [pc, #16]	@ (80031c0 <encoder_readPushButton+0x68>)
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	7013      	strb	r3, [r2, #0]
	return false;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40020800 	.word	0x40020800
 80031c0:	200001a4 	.word	0x200001a4
 80031c4:	200001a8 	.word	0x200001a8

080031c8 <encoder_read>:

encoder_movement_t encoder_read()
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
	static uint32_t previousEncoderPosition = 0;

	uint32_t encoderPosition = __HAL_TIM_GET_COUNTER(&htim3);
 80031ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003208 <encoder_read+0x40>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	607b      	str	r3, [r7, #4]

	int32_t encoderDiff = (int32_t)(encoderPosition - previousEncoderPosition);
 80031d6:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <encoder_read+0x44>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	603b      	str	r3, [r7, #0]

	if(encoderDiff == 0){
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <encoder_read+0x22>
		return NO_MOVEMENT;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e008      	b.n	80031fc <encoder_read+0x34>
	}

	previousEncoderPosition = encoderPosition;
 80031ea:	4a08      	ldr	r2, [pc, #32]	@ (800320c <encoder_read+0x44>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6013      	str	r3, [r2, #0]

	if(encoderDiff > 0){
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	dd01      	ble.n	80031fa <encoder_read+0x32>
		return MOVED_CLOCKWISE;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <encoder_read+0x34>
	}

	return MOVED_COUNTERCLOCKWISE;
 80031fa:	2302      	movs	r3, #2
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	200000c8 	.word	0x200000c8
 800320c:	200001ac 	.word	0x200001ac

08003210 <init_hardware>:

#include "buzzer.h"
#include "encoder.h"

void init_hardware()
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
	encoder_init();
 8003214:	f7ff ff96 	bl	8003144 <encoder_init>
	buzzer_init();
 8003218:	f7ff ff8c 	bl	8003134 <buzzer_init>
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}

08003220 <memset>:
 8003220:	4402      	add	r2, r0
 8003222:	4603      	mov	r3, r0
 8003224:	4293      	cmp	r3, r2
 8003226:	d100      	bne.n	800322a <memset+0xa>
 8003228:	4770      	bx	lr
 800322a:	f803 1b01 	strb.w	r1, [r3], #1
 800322e:	e7f9      	b.n	8003224 <memset+0x4>

08003230 <__libc_init_array>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4d0d      	ldr	r5, [pc, #52]	@ (8003268 <__libc_init_array+0x38>)
 8003234:	4c0d      	ldr	r4, [pc, #52]	@ (800326c <__libc_init_array+0x3c>)
 8003236:	1b64      	subs	r4, r4, r5
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	2600      	movs	r6, #0
 800323c:	42a6      	cmp	r6, r4
 800323e:	d109      	bne.n	8003254 <__libc_init_array+0x24>
 8003240:	4d0b      	ldr	r5, [pc, #44]	@ (8003270 <__libc_init_array+0x40>)
 8003242:	4c0c      	ldr	r4, [pc, #48]	@ (8003274 <__libc_init_array+0x44>)
 8003244:	f000 f818 	bl	8003278 <_init>
 8003248:	1b64      	subs	r4, r4, r5
 800324a:	10a4      	asrs	r4, r4, #2
 800324c:	2600      	movs	r6, #0
 800324e:	42a6      	cmp	r6, r4
 8003250:	d105      	bne.n	800325e <__libc_init_array+0x2e>
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	f855 3b04 	ldr.w	r3, [r5], #4
 8003258:	4798      	blx	r3
 800325a:	3601      	adds	r6, #1
 800325c:	e7ee      	b.n	800323c <__libc_init_array+0xc>
 800325e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003262:	4798      	blx	r3
 8003264:	3601      	adds	r6, #1
 8003266:	e7f2      	b.n	800324e <__libc_init_array+0x1e>
 8003268:	080032f4 	.word	0x080032f4
 800326c:	080032f4 	.word	0x080032f4
 8003270:	080032f4 	.word	0x080032f4
 8003274:	080032f8 	.word	0x080032f8

08003278 <_init>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	bf00      	nop
 800327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327e:	bc08      	pop	{r3}
 8003280:	469e      	mov	lr, r3
 8003282:	4770      	bx	lr

08003284 <_fini>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr
