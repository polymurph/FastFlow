
FastFlow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005b70  08005b70  00006b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd8  08005bd8  00007058  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd8  08005bd8  00006bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005be0  08005be0  00007058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be0  08005be0  00006be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005be4  08005be4  00006be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08005be8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000058  08005c40  00007058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08005c40  00007410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001485e  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003490  00000000  00000000  0001b8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  0001ed78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f57  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fa  00000000  00000000  00021087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bd8  00000000  00000000  00038a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000929d7  00000000  00000000  00051659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e4030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005158  00000000  00000000  000e40b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e9210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000058 	.word	0x20000058
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005b58 	.word	0x08005b58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000005c 	.word	0x2000005c
 80001d4:	08005b58 	.word	0x08005b58

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	4b35      	ldr	r3, [pc, #212]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a34      	ldr	r2, [pc, #208]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b32      	ldr	r3, [pc, #200]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	4b2e      	ldr	r3, [pc, #184]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a2d      	ldr	r2, [pc, #180]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b2b      	ldr	r3, [pc, #172]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b27      	ldr	r3, [pc, #156]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a26      	ldr	r2, [pc, #152]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b24      	ldr	r3, [pc, #144]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b20      	ldr	r3, [pc, #128]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a1f      	ldr	r2, [pc, #124]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b1d      	ldr	r3, [pc, #116]	@ (80005b8 <MX_GPIO_Init+0xf0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_MAX31865_GPIO_Port, SPI3_CS_MAX31865_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000554:	4819      	ldr	r0, [pc, #100]	@ (80005bc <MX_GPIO_Init+0xf4>)
 8000556:	f001 f8d3 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000560:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	4813      	ldr	r0, [pc, #76]	@ (80005c0 <MX_GPIO_Init+0xf8>)
 8000572:	f000 ff29 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin|DOOR_CLOSED_Pin;
 8000576:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <MX_GPIO_Init+0xf8>)
 800058c:	f000 ff1c 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_MAX31865_Pin;
 8000590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_MAX31865_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	4804      	ldr	r0, [pc, #16]	@ (80005bc <MX_GPIO_Init+0xf4>)
 80005aa:	f000 ff0d 	bl	80013c8 <HAL_GPIO_Init>

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	@ 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40020000 	.word	0x40020000
 80005c0:	40020800 	.word	0x40020800

080005c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005ca:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <MX_I2C1_Init+0x54>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005d0:	4a12      	ldr	r2, [pc, #72]	@ (800061c <MX_I2C1_Init+0x58>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <MX_I2C1_Init+0x50>)
 8000602:	f001 f897 	bl	8001734 <HAL_I2C_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800060c:	f000 f8e6 	bl	80007dc <Error_Handler>
  /* USER CODE BEGIN I2C1_Init 2 */


  /* USER CODE END I2C1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000074 	.word	0x20000074
 8000618:	40005400 	.word	0x40005400
 800061c:	000186a0 	.word	0x000186a0

08000620 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	@ (80006c4 <HAL_I2C_MspInit+0xa4>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d13b      	bne.n	80006ba <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <HAL_I2C_MspInit+0xa8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a1f      	ldr	r2, [pc, #124]	@ (80006c8 <HAL_I2C_MspInit+0xa8>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <HAL_I2C_MspInit+0xa8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800065e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000664:	2312      	movs	r3, #18
 8000666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000670:	2304      	movs	r3, #4
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	4814      	ldr	r0, [pc, #80]	@ (80006cc <HAL_I2C_MspInit+0xac>)
 800067c:	f000 fea4 	bl	80013c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <HAL_I2C_MspInit+0xa8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <HAL_I2C_MspInit+0xa8>)
 800068a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <HAL_I2C_MspInit+0xa8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <HAL_I2C_MspInit+0xa8>)
 800069e:	6a1b      	ldr	r3, [r3, #32]
 80006a0:	4a09      	ldr	r2, [pc, #36]	@ (80006c8 <HAL_I2C_MspInit+0xa8>)
 80006a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006a6:	6213      	str	r3, [r2, #32]
    HAL_Delay(100);
 80006a8:	2064      	movs	r0, #100	@ 0x64
 80006aa:	f000 fd83 	bl	80011b4 <HAL_Delay>
    __HAL_RCC_I2C1_RELEASE_RESET();
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <HAL_I2C_MspInit+0xa8>)
 80006b0:	6a1b      	ldr	r3, [r3, #32]
 80006b2:	4a05      	ldr	r2, [pc, #20]	@ (80006c8 <HAL_I2C_MspInit+0xa8>)
 80006b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80006b8:	6213      	str	r3, [r2, #32]
    // https://community.st.com/t5/stm32-mcus-products/stm32f4-i2c-issues-solved/td-p/526774
    // https://github.com/wokwi/wokwi-features/issues/744

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40005400 	.word	0x40005400
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020400 	.word	0x40020400

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fcfc 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f816 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff fef4 	bl	80004c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e0:	f000 fc5a 	bl	8000f98 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80006e4:	f000 f880 	bl	80007e8 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006e8:	f000 f966 	bl	80009b8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006ec:	f000 fa60 	bl	8000bb0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006f0:	f000 fab2 	bl	8000c58 <MX_TIM4_Init>
  MX_TIM2_Init();
 80006f4:	f000 f9e4 	bl	8000ac0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80006f8:	f7ff ff64 	bl	80005c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  fastFlow_init();
 80006fc:	f004 f99a 	bl	8004a34 <fastFlow_init>
  fastFlow_run();
 8000700:	f004 f9aa 	bl	8004a58 <fastFlow_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <main+0x34>

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	@ 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f005 f9e3 	bl	8005ae2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000778:	2310      	movs	r3, #16
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800077c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000780:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000782:	2304      	movs	r3, #4
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000786:	2304      	movs	r3, #4
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	4618      	mov	r0, r3
 8000790:	f001 ffca 	bl	8002728 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800079a:	f000 f81f 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fa2c 	bl	8002c18 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c6:	f000 f809 	bl	80007dc <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_SPI3_Init+0x64>)
 80007ee:	4a18      	ldr	r2, [pc, #96]	@ (8000850 <MX_SPI3_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_SPI3_Init+0x64>)
 80007f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_SPI3_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_SPI3_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_SPI3_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_SPI3_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_SPI3_Init+0x64>)
 8000814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000818:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_SPI3_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_SPI3_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_SPI3_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_SPI3_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_SPI3_Init+0x64>)
 8000834:	220a      	movs	r2, #10
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_SPI3_Init+0x64>)
 800083a:	f002 fc0d 	bl	8003058 <HAL_SPI_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000844:	f7ff ffca 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000c8 	.word	0x200000c8
 8000850:	40003c00 	.word	0x40003c00

08000854 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a19      	ldr	r2, [pc, #100]	@ (80008d8 <HAL_SPI_MspInit+0x84>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d12c      	bne.n	80008d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <HAL_SPI_MspInit+0x88>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a17      	ldr	r2, [pc, #92]	@ (80008dc <HAL_SPI_MspInit+0x88>)
 8000880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_SPI_MspInit+0x88>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <HAL_SPI_MspInit+0x88>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a10      	ldr	r2, [pc, #64]	@ (80008dc <HAL_SPI_MspInit+0x88>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_SPI_MspInit+0x88>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008ae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c0:	2306      	movs	r3, #6
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <HAL_SPI_MspInit+0x8c>)
 80008cc:	f000 fd7c 	bl	80013c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40003c00 	.word	0x40003c00
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020800 	.word	0x40020800

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fd1c 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <NMI_Handler+0x4>

0800093c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <MemManage_Handler+0x4>

0800094c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <UsageFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098a:	f000 fbf3 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b092      	sub	sp, #72	@ 0x48
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2220      	movs	r2, #32
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 f87d 	bl	8005ae2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e8:	4b33      	ldr	r3, [pc, #204]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 80009ea:	4a34      	ldr	r2, [pc, #208]	@ (8000abc <MX_TIM1_Init+0x104>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ee:	4b32      	ldr	r3, [pc, #200]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b30      	ldr	r3, [pc, #192]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009fa:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 80009fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a02:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a14:	4828      	ldr	r0, [pc, #160]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 8000a16:	f002 fbf7 	bl	8003208 <HAL_TIM_OC_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000a20:	f7ff fedc 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a30:	4619      	mov	r1, r3
 8000a32:	4821      	ldr	r0, [pc, #132]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 8000a34:	f003 fb32 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a3e:	f7ff fecd 	bl	80007dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4814      	ldr	r0, [pc, #80]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 8000a68:	f002 fe5a 	bl	8003720 <HAL_TIM_OC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000a72:	f7ff feb3 	bl	80007dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 8000a9a:	f003 fb6d 	bl	8004178 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000aa4:	f7ff fe9a 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_TIM1_Init+0x100>)
 8000aaa:	f000 f9ef 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000aae:	bf00      	nop
 8000ab0:	3748      	adds	r7, #72	@ 0x48
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000120 	.word	0x20000120
 8000abc:	40010000 	.word	0x40010000

08000ac0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	@ 0x38
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af0:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000af2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000af6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0x0A04;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000afa:	f640 2204 	movw	r2, #2564	@ 0xa04
 8000afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8000b06:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b14:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b1a:	4824      	ldr	r0, [pc, #144]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b1c:	f002 fb25 	bl	800316a <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f7ff fe59 	bl	80007dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b34:	4619      	mov	r1, r3
 8000b36:	481d      	ldr	r0, [pc, #116]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b38:	f002 ff10 	bl	800395c <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b42:	f7ff fe4b 	bl	80007dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b48:	f002 fbad 	bl	80032a6 <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b52:	f7ff fe43 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	4619      	mov	r1, r3
 8000b64:	4811      	ldr	r0, [pc, #68]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b66:	f003 fa99 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b70:	f7ff fe34 	bl	80007dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b74:	2360      	movs	r3, #96	@ 0x60
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0x0FFF;
 8000b78:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000b7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b8e:	f002 fe23 	bl	80037d8 <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000b98:	f7ff fe20 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b9e:	f000 f975 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000ba2:	bf00      	nop
 8000ba4:	3738      	adds	r7, #56	@ 0x38
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000168 	.word	0x20000168

08000bb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	@ 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2224      	movs	r2, #36	@ 0x24
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 ff8f 	bl	8005ae2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bcc:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <MX_TIM3_Init+0xa0>)
 8000bce:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <MX_TIM3_Init+0xa4>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_TIM3_Init+0xa0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_TIM3_Init+0xa0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_TIM3_Init+0xa0>)
 8000be0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000be4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_TIM3_Init+0xa0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_TIM3_Init+0xa0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000c02:	230f      	movs	r3, #15
 8000c04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000c12:	230f      	movs	r3, #15
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <MX_TIM3_Init+0xa0>)
 8000c1e:	f002 fc4b 	bl	80034b8 <HAL_TIM_Encoder_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000c28:	f7ff fdd8 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_TIM3_Init+0xa0>)
 8000c3a:	f003 fa2f 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000c44:	f7ff fdca 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3730      	adds	r7, #48	@ 0x30
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200001b0 	.word	0x200001b0
 8000c54:	40000400 	.word	0x40000400

08000c58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	@ 0x38
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c88:	4b2e      	ldr	r3, [pc, #184]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d48 <MX_TIM4_Init+0xf0>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20000;
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000c90:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b2b      	ldr	r3, [pc, #172]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 8000c9c:	4b29      	ldr	r3, [pc, #164]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000c9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ca4:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000caa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cb2:	4824      	ldr	r0, [pc, #144]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000cb4:	f002 fa59 	bl	800316a <HAL_TIM_Base_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000cbe:	f7ff fd8d 	bl	80007dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481d      	ldr	r0, [pc, #116]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000cd0:	f002 fe44 	bl	800395c <HAL_TIM_ConfigClockSource>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000cda:	f7ff fd7f 	bl	80007dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000cde:	4819      	ldr	r0, [pc, #100]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000ce0:	f002 fa92 	bl	8003208 <HAL_TIM_OC_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000cea:	f7ff fd77 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000cfe:	f003 f9cd 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000d08:	f7ff fd68 	bl	80007dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0x7FFF;
 8000d10:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000d26:	f002 fcfb 	bl	8003720 <HAL_TIM_OC_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000d30:	f7ff fd54 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <MX_TIM4_Init+0xec>)
 8000d36:	f000 f8a9 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	@ 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001f8 	.word	0x200001f8
 8000d48:	40000800 	.word	0x40000800

08000d4c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0b      	ldr	r2, [pc, #44]	@ (8000d88 <HAL_TIM_OC_MspInit+0x3c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d10d      	bne.n	8000d7a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_TIM_OC_MspInit+0x40>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	4a09      	ldr	r2, [pc, #36]	@ (8000d8c <HAL_TIM_OC_MspInit+0x40>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6e:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <HAL_TIM_OC_MspInit+0x40>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000da0:	d10e      	bne.n	8000dc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <HAL_TIM_Base_MspInit+0x64>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <HAL_TIM_Base_MspInit+0x64>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <HAL_TIM_Base_MspInit+0x64>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000dbe:	e012      	b.n	8000de6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000df8 <HAL_TIM_Base_MspInit+0x68>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10d      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <HAL_TIM_Base_MspInit+0x64>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <HAL_TIM_Base_MspInit+0x64>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_TIM_Base_MspInit+0x64>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40000800 	.word	0x40000800

08000dfc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	@ 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a19      	ldr	r2, [pc, #100]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12b      	bne.n	8000e76 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0x88>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0x88>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0x88>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0x88>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8000e56:	23c0      	movs	r3, #192	@ 0xc0
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e66:	2302      	movs	r3, #2
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e72:	f000 faa9 	bl	80013c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40000400 	.word	0x40000400
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000

08000e8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a36      	ldr	r2, [pc, #216]	@ (8000f84 <HAL_TIM_MspPostInit+0xf8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11f      	bne.n	8000eee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b35      	ldr	r3, [pc, #212]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a34      	ldr	r2, [pc, #208]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 8000eca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4829      	ldr	r0, [pc, #164]	@ (8000f8c <HAL_TIM_MspPostInit+0x100>)
 8000ee8:	f000 fa6e 	bl	80013c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000eec:	e046      	b.n	8000f7c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM2)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef6:	d11e      	bne.n	8000f36 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f14:	2320      	movs	r3, #32
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f24:	2301      	movs	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4817      	ldr	r0, [pc, #92]	@ (8000f8c <HAL_TIM_MspPostInit+0x100>)
 8000f30:	f000 fa4a 	bl	80013c8 <HAL_GPIO_Init>
}
 8000f34:	e022      	b.n	8000f7c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <HAL_TIM_MspPostInit+0x104>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d11d      	bne.n	8000f7c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f50:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8000f5c:	2340      	movs	r3, #64	@ 0x40
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <HAL_TIM_MspPostInit+0x108>)
 8000f78:	f000 fa26 	bl	80013c8 <HAL_GPIO_Init>
}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	@ 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010000 	.word	0x40010000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40000800 	.word	0x40000800
 8000f94:	40020400 	.word	0x40020400

08000f98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <MX_USART2_UART_Init+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	f003 f924 	bl	800421c <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fda:	f7ff fbff 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000240 	.word	0x20000240
 8000fe8:	40004400 	.word	0x40004400

08000fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a19      	ldr	r2, [pc, #100]	@ (8001070 <HAL_UART_MspInit+0x84>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12b      	bne.n	8001066 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_UART_MspInit+0x88>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a17      	ldr	r2, [pc, #92]	@ (8001074 <HAL_UART_MspInit+0x88>)
 8001018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_UART_MspInit+0x88>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_UART_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a10      	ldr	r2, [pc, #64]	@ (8001074 <HAL_UART_MspInit+0x88>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_UART_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001046:	230c      	movs	r3, #12
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001056:	2307      	movs	r3, #7
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	@ (8001078 <HAL_UART_MspInit+0x8c>)
 8001062:	f000 f9b1 	bl	80013c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	@ 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40004400 	.word	0x40004400
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001080:	f7ff fc88 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	@ (80010bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	@ (80010c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010aa:	f004 fd23 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fb0f 	bl	80006d0 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80010c0:	08005be8 	.word	0x08005be8
  ldr r2, =_sbss
 80010c4:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80010c8:	20000410 	.word	0x20000410

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	@ (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f931 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fbee 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f93b 	bl	80013ae <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 f911 	bl	8001376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	20000008 	.word	0x20000008
 8001170:	20000004 	.word	0x20000004

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	20000288 	.word	0x20000288

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000288 	.word	0x20000288

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	@ (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	@ (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	@ 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	@ 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800132c:	d301      	bcc.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e00f      	b.n	8001352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <SysTick_Config+0x40>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	210f      	movs	r1, #15
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f7ff ff8e 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <SysTick_Config+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	@ (800135c <SysTick_Config+0x40>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff47 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001388:	f7ff ff5c 	bl	8001244 <__NVIC_GetPriorityGrouping>
 800138c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7ff ff8e 	bl	80012b4 <NVIC_EncodePriority>
 8001398:	4602      	mov	r2, r0
 800139a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff5d 	bl	8001260 <__NVIC_SetPriority>
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffb0 	bl	800131c <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	@ 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e159      	b.n	8001698 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8148 	bne.w	8001692 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d005      	beq.n	800141a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	2b02      	cmp	r3, #2
 8001418:	d130      	bne.n	800147c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 0201 	and.w	r2, r3, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b03      	cmp	r3, #3
 8001486:	d017      	beq.n	80014b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d123      	bne.n	800150c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0203 	and.w	r2, r3, #3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80a2 	beq.w	8001692 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b57      	ldr	r3, [pc, #348]	@ (80016b0 <HAL_GPIO_Init+0x2e8>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	4a56      	ldr	r2, [pc, #344]	@ (80016b0 <HAL_GPIO_Init+0x2e8>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800155c:	6453      	str	r3, [r2, #68]	@ 0x44
 800155e:	4b54      	ldr	r3, [pc, #336]	@ (80016b0 <HAL_GPIO_Init+0x2e8>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156a:	4a52      	ldr	r2, [pc, #328]	@ (80016b4 <HAL_GPIO_Init+0x2ec>)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a49      	ldr	r2, [pc, #292]	@ (80016b8 <HAL_GPIO_Init+0x2f0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <HAL_GPIO_Init+0x202>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a48      	ldr	r2, [pc, #288]	@ (80016bc <HAL_GPIO_Init+0x2f4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x1fe>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a47      	ldr	r2, [pc, #284]	@ (80016c0 <HAL_GPIO_Init+0x2f8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x1fa>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a46      	ldr	r2, [pc, #280]	@ (80016c4 <HAL_GPIO_Init+0x2fc>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x1f6>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a45      	ldr	r2, [pc, #276]	@ (80016c8 <HAL_GPIO_Init+0x300>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x1f2>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e008      	b.n	80015cc <HAL_GPIO_Init+0x204>
 80015ba:	2307      	movs	r3, #7
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x204>
 80015be:	2303      	movs	r3, #3
 80015c0:	e004      	b.n	80015cc <HAL_GPIO_Init+0x204>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_Init+0x204>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_GPIO_Init+0x204>
 80015ca:	2300      	movs	r3, #0
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	f002 0203 	and.w	r2, r2, #3
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	4093      	lsls	r3, r2
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015dc:	4935      	ldr	r1, [pc, #212]	@ (80016b4 <HAL_GPIO_Init+0x2ec>)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ea:	4b38      	ldr	r3, [pc, #224]	@ (80016cc <HAL_GPIO_Init+0x304>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800160e:	4a2f      	ldr	r2, [pc, #188]	@ (80016cc <HAL_GPIO_Init+0x304>)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001614:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <HAL_GPIO_Init+0x304>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001638:	4a24      	ldr	r2, [pc, #144]	@ (80016cc <HAL_GPIO_Init+0x304>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800163e:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <HAL_GPIO_Init+0x304>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001662:	4a1a      	ldr	r2, [pc, #104]	@ (80016cc <HAL_GPIO_Init+0x304>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_GPIO_Init+0x304>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800168c:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <HAL_GPIO_Init+0x304>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3301      	adds	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	2b0f      	cmp	r3, #15
 800169c:	f67f aea2 	bls.w	80013e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3724      	adds	r7, #36	@ 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40013800 	.word	0x40013800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020400 	.word	0x40020400
 80016c0:	40020800 	.word	0x40020800
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e12b      	b.n	800199e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe ff60 	bl	8000620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2224      	movs	r2, #36	@ 0x24
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001798:	f001 fc36 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a81      	ldr	r2, [pc, #516]	@ (80019a8 <HAL_I2C_Init+0x274>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d807      	bhi.n	80017b8 <HAL_I2C_Init+0x84>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a80      	ldr	r2, [pc, #512]	@ (80019ac <HAL_I2C_Init+0x278>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	bf94      	ite	ls
 80017b0:	2301      	movls	r3, #1
 80017b2:	2300      	movhi	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e006      	b.n	80017c6 <HAL_I2C_Init+0x92>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4a7d      	ldr	r2, [pc, #500]	@ (80019b0 <HAL_I2C_Init+0x27c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	bf94      	ite	ls
 80017c0:	2301      	movls	r3, #1
 80017c2:	2300      	movhi	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0e7      	b.n	800199e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4a78      	ldr	r2, [pc, #480]	@ (80019b4 <HAL_I2C_Init+0x280>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0c9b      	lsrs	r3, r3, #18
 80017d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a6a      	ldr	r2, [pc, #424]	@ (80019a8 <HAL_I2C_Init+0x274>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d802      	bhi.n	8001808 <HAL_I2C_Init+0xd4>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	e009      	b.n	800181c <HAL_I2C_Init+0xe8>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	4a69      	ldr	r2, [pc, #420]	@ (80019b8 <HAL_I2C_Init+0x284>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	3301      	adds	r3, #1
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	430b      	orrs	r3, r1
 8001822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800182e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	495c      	ldr	r1, [pc, #368]	@ (80019a8 <HAL_I2C_Init+0x274>)
 8001838:	428b      	cmp	r3, r1
 800183a:	d819      	bhi.n	8001870 <HAL_I2C_Init+0x13c>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e59      	subs	r1, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fbb1 f3f3 	udiv	r3, r1, r3
 800184a:	1c59      	adds	r1, r3, #1
 800184c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001850:	400b      	ands	r3, r1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00a      	beq.n	800186c <HAL_I2C_Init+0x138>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1e59      	subs	r1, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fbb1 f3f3 	udiv	r3, r1, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	e051      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 800186c:	2304      	movs	r3, #4
 800186e:	e04f      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d111      	bne.n	800189c <HAL_I2C_Init+0x168>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1e58      	subs	r0, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	440b      	add	r3, r1
 8001886:	fbb0 f3f3 	udiv	r3, r0, r3
 800188a:	3301      	adds	r3, #1
 800188c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e012      	b.n	80018c2 <HAL_I2C_Init+0x18e>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Init+0x196>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e022      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10e      	bne.n	80018f0 <HAL_I2C_Init+0x1bc>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e58      	subs	r0, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6859      	ldr	r1, [r3, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	440b      	add	r3, r1
 80018e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ee:	e00f      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	0099      	lsls	r1, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	6809      	ldr	r1, [r1, #0]
 8001914:	4313      	orrs	r3, r2
 8001916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800193e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6911      	ldr	r1, [r2, #16]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68d2      	ldr	r2, [r2, #12]
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	430b      	orrs	r3, r1
 8001952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	000186a0 	.word	0x000186a0
 80019ac:	001e847f 	.word	0x001e847f
 80019b0:	003d08ff 	.word	0x003d08ff
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	10624dd3 	.word	0x10624dd3

080019bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	461a      	mov	r2, r3
 80019c8:	460b      	mov	r3, r1
 80019ca:	817b      	strh	r3, [r7, #10]
 80019cc:	4613      	mov	r3, r2
 80019ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff fbe4 	bl	800119c <HAL_GetTick>
 80019d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b20      	cmp	r3, #32
 80019e0:	f040 80e0 	bne.w	8001ba4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2319      	movs	r3, #25
 80019ea:	2201      	movs	r2, #1
 80019ec:	4970      	ldr	r1, [pc, #448]	@ (8001bb0 <HAL_I2C_Master_Transmit+0x1f4>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fc64 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019fa:	2302      	movs	r3, #2
 80019fc:	e0d3      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_I2C_Master_Transmit+0x50>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e0cc      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x1ea>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d007      	beq.n	8001a32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0201 	orr.w	r2, r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2221      	movs	r2, #33	@ 0x21
 8001a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	893a      	ldrh	r2, [r7, #8]
 8001a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4a50      	ldr	r2, [pc, #320]	@ (8001bb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a74:	8979      	ldrh	r1, [r7, #10]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	6a3a      	ldr	r2, [r7, #32]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 face 	bl	800201c <I2C_MasterRequestWrite>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e08d      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001aa0:	e066      	b.n	8001b70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	6a39      	ldr	r1, [r7, #32]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 fd22 	bl	80024f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00d      	beq.n	8001ace <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d107      	bne.n	8001aca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e06b      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d11b      	bne.n	8001b44 <HAL_I2C_Master_Transmit+0x188>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d017      	beq.n	8001b44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	6a39      	ldr	r1, [r7, #32]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fd19 	bl	8002580 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00d      	beq.n	8001b70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d107      	bne.n	8001b6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e01a      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d194      	bne.n	8001aa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ba4:	2302      	movs	r3, #2
  }
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	00100002 	.word	0x00100002
 8001bb4:	ffff0000 	.word	0xffff0000

08001bb8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	@ 0x30
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	817b      	strh	r3, [r7, #10]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff fae6 	bl	800119c <HAL_GetTick>
 8001bd0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	f040 8217 	bne.w	800200e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2319      	movs	r3, #25
 8001be6:	2201      	movs	r2, #1
 8001be8:	497c      	ldr	r1, [pc, #496]	@ (8001ddc <HAL_I2C_Master_Receive+0x224>)
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fb66 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e20a      	b.n	8002010 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_I2C_Master_Receive+0x50>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e203      	b.n	8002010 <HAL_I2C_Master_Receive+0x458>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d007      	beq.n	8001c2e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2222      	movs	r2, #34	@ 0x22
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2210      	movs	r2, #16
 8001c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	893a      	ldrh	r2, [r7, #8]
 8001c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4a5c      	ldr	r2, [pc, #368]	@ (8001de0 <HAL_I2C_Master_Receive+0x228>)
 8001c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c70:	8979      	ldrh	r1, [r7, #10]
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fa52 	bl	8002120 <I2C_MasterRequestRead>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e1c4      	b.n	8002010 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d113      	bne.n	8001cb6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	623b      	str	r3, [r7, #32]
 8001ca2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e198      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d11b      	bne.n	8001cf6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e178      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d11b      	bne.n	8001d36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	e158      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d5c:	e144      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	f200 80f1 	bhi.w	8001f4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d123      	bne.n	8001db8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fc4b 	bl	8002610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e145      	b.n	8002010 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001db6:	e117      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d14e      	bne.n	8001e5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4906      	ldr	r1, [pc, #24]	@ (8001de4 <HAL_I2C_Master_Receive+0x22c>)
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fa76 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d008      	beq.n	8001de8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e11a      	b.n	8002010 <HAL_I2C_Master_Receive+0x458>
 8001dda:	bf00      	nop
 8001ddc:	00100002 	.word	0x00100002
 8001de0:	ffff0000 	.word	0xffff0000
 8001de4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e5c:	e0c4      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e64:	2200      	movs	r2, #0
 8001e66:	496c      	ldr	r1, [pc, #432]	@ (8002018 <HAL_I2C_Master_Receive+0x460>)
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fa27 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0cb      	b.n	8002010 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4955      	ldr	r1, [pc, #340]	@ (8002018 <HAL_I2C_Master_Receive+0x460>)
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f9f9 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e09d      	b.n	8002010 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f48:	e04e      	b.n	8001fe8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fb5e 	bl	8002610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e058      	b.n	8002010 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d124      	bne.n	8001fe8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d107      	bne.n	8001fb6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fb4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f47f aeb6 	bne.w	8001d5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	3728      	adds	r7, #40	@ 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	00010004 	.word	0x00010004

0800201c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	460b      	mov	r3, r1
 800202a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002030:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b08      	cmp	r3, #8
 8002036:	d006      	beq.n	8002046 <I2C_MasterRequestWrite+0x2a>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d003      	beq.n	8002046 <I2C_MasterRequestWrite+0x2a>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002044:	d108      	bne.n	8002058 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e00b      	b.n	8002070 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	2b12      	cmp	r3, #18
 800205e:	d107      	bne.n	8002070 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800206e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f91d 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00d      	beq.n	80020a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002096:	d103      	bne.n	80020a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800209e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e035      	b.n	8002110 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020ac:	d108      	bne.n	80020c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ae:	897b      	ldrh	r3, [r7, #10]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020bc:	611a      	str	r2, [r3, #16]
 80020be:	e01b      	b.n	80020f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020c0:	897b      	ldrh	r3, [r7, #10]
 80020c2:	11db      	asrs	r3, r3, #7
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f003 0306 	and.w	r3, r3, #6
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f063 030f 	orn	r3, r3, #15
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	490e      	ldr	r1, [pc, #56]	@ (8002118 <I2C_MasterRequestWrite+0xfc>)
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f966 	bl	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e010      	b.n	8002110 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020ee:	897b      	ldrh	r3, [r7, #10]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4907      	ldr	r1, [pc, #28]	@ (800211c <I2C_MasterRequestWrite+0x100>)
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f956 	bl	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	00010008 	.word	0x00010008
 800211c:	00010002 	.word	0x00010002

08002120 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	460b      	mov	r3, r1
 800212e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002144:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d006      	beq.n	800215a <I2C_MasterRequestRead+0x3a>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d003      	beq.n	800215a <I2C_MasterRequestRead+0x3a>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002158:	d108      	bne.n	800216c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e00b      	b.n	8002184 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	2b11      	cmp	r3, #17
 8002172:	d107      	bne.n	8002184 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002182:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f893 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021aa:	d103      	bne.n	80021b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e079      	b.n	80022ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021c0:	d108      	bne.n	80021d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021c2:	897b      	ldrh	r3, [r7, #10]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	611a      	str	r2, [r3, #16]
 80021d2:	e05f      	b.n	8002294 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021d4:	897b      	ldrh	r3, [r7, #10]
 80021d6:	11db      	asrs	r3, r3, #7
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 0306 	and.w	r3, r3, #6
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f063 030f 	orn	r3, r3, #15
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4930      	ldr	r1, [pc, #192]	@ (80022b4 <I2C_MasterRequestRead+0x194>)
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f8dc 	bl	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e054      	b.n	80022ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002202:	897b      	ldrh	r3, [r7, #10]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4929      	ldr	r1, [pc, #164]	@ (80022b8 <I2C_MasterRequestRead+0x198>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f8cc 	bl	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e044      	b.n	80022ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002246:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f831 	bl	80022bc <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800226e:	d103      	bne.n	8002278 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002276:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e017      	b.n	80022ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800227c:	897b      	ldrh	r3, [r7, #10]
 800227e:	11db      	asrs	r3, r3, #7
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 0306 	and.w	r3, r3, #6
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f063 030e 	orn	r3, r3, #14
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	4907      	ldr	r1, [pc, #28]	@ (80022b8 <I2C_MasterRequestRead+0x198>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f888 	bl	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	00010008 	.word	0x00010008
 80022b8:	00010002 	.word	0x00010002

080022bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022cc:	e048      	b.n	8002360 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d044      	beq.n	8002360 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d6:	f7fe ff61 	bl	800119c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d139      	bne.n	8002360 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	0c1b      	lsrs	r3, r3, #16
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d10d      	bne.n	8002312 <I2C_WaitOnFlagUntilTimeout+0x56>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	43da      	mvns	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4013      	ands	r3, r2
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	e00c      	b.n	800232c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	43da      	mvns	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4013      	ands	r3, r2
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	429a      	cmp	r2, r3
 8002330:	d116      	bne.n	8002360 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f043 0220 	orr.w	r2, r3, #32
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e023      	b.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d10d      	bne.n	8002386 <I2C_WaitOnFlagUntilTimeout+0xca>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	43da      	mvns	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4013      	ands	r3, r2
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	e00c      	b.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	43da      	mvns	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4013      	ands	r3, r2
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d093      	beq.n	80022ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023be:	e071      	b.n	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ce:	d123      	bne.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f043 0204 	orr.w	r2, r3, #4
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e067      	b.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d041      	beq.n	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002420:	f7fe febc 	bl	800119c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d302      	bcc.n	8002436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d136      	bne.n	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d10c      	bne.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4013      	ands	r3, r2
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	bf14      	ite	ne
 8002452:	2301      	movne	r3, #1
 8002454:	2300      	moveq	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	e00b      	b.n	8002472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	43da      	mvns	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	4013      	ands	r3, r2
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf14      	ite	ne
 800246c:	2301      	movne	r3, #1
 800246e:	2300      	moveq	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d016      	beq.n	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e021      	b.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	0c1b      	lsrs	r3, r3, #16
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10c      	bne.n	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	43da      	mvns	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4013      	ands	r3, r2
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e00b      	b.n	80024e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4013      	ands	r3, r2
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf14      	ite	ne
 80024da:	2301      	movne	r3, #1
 80024dc:	2300      	moveq	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f47f af6d 	bne.w	80023c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024fc:	e034      	b.n	8002568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f8e3 	bl	80026ca <I2C_IsAcknowledgeFailed>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e034      	b.n	8002578 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d028      	beq.n	8002568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002516:	f7fe fe41 	bl	800119c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d11d      	bne.n	8002568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002536:	2b80      	cmp	r3, #128	@ 0x80
 8002538:	d016      	beq.n	8002568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e007      	b.n	8002578 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002572:	2b80      	cmp	r3, #128	@ 0x80
 8002574:	d1c3      	bne.n	80024fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800258c:	e034      	b.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f89b 	bl	80026ca <I2C_IsAcknowledgeFailed>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e034      	b.n	8002608 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d028      	beq.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a6:	f7fe fdf9 	bl	800119c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d302      	bcc.n	80025bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d11d      	bne.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d016      	beq.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e007      	b.n	8002608 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d1c3      	bne.n	800258e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800261c:	e049      	b.n	80026b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b10      	cmp	r3, #16
 800262a:	d119      	bne.n	8002660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0210 	mvn.w	r2, #16
 8002634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e030      	b.n	80026c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002660:	f7fe fd9c 	bl	800119c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	d302      	bcc.n	8002676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d11d      	bne.n	80026b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002680:	2b40      	cmp	r3, #64	@ 0x40
 8002682:	d016      	beq.n	80026b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e007      	b.n	80026c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026bc:	2b40      	cmp	r3, #64	@ 0x40
 80026be:	d1ae      	bne.n	800261e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e0:	d11b      	bne.n	800271a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f043 0204 	orr.w	r2, r3, #4
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e267      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d075      	beq.n	8002832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002746:	4b88      	ldr	r3, [pc, #544]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d00c      	beq.n	800276c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4b85      	ldr	r3, [pc, #532]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800275a:	2b08      	cmp	r3, #8
 800275c:	d112      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b82      	ldr	r3, [pc, #520]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800276a:	d10b      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	4b7e      	ldr	r3, [pc, #504]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d05b      	beq.n	8002830 <HAL_RCC_OscConfig+0x108>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d157      	bne.n	8002830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e242      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x74>
 800278e:	4b76      	ldr	r3, [pc, #472]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a75      	ldr	r2, [pc, #468]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x98>
 80027a6:	4b70      	ldr	r3, [pc, #448]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 80027c0:	4b69      	ldr	r3, [pc, #420]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a68      	ldr	r2, [pc, #416]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b66      	ldr	r3, [pc, #408]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a65      	ldr	r2, [pc, #404]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fcdc 	bl	800119c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fcd8 	bl	800119c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	@ 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e207      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xc0>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe fcc8 	bl	800119c <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fcc4 	bl	800119c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	@ 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1f3      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	4b51      	ldr	r3, [pc, #324]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0xe8>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d063      	beq.n	8002906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800283e:	4b4a      	ldr	r3, [pc, #296]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284a:	4b47      	ldr	r3, [pc, #284]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002852:	2b08      	cmp	r3, #8
 8002854:	d11c      	bne.n	8002890 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b44      	ldr	r3, [pc, #272]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d116      	bne.n	8002890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	4b41      	ldr	r3, [pc, #260]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_RCC_OscConfig+0x152>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1c7      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b3b      	ldr	r3, [pc, #236]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4937      	ldr	r1, [pc, #220]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	e03a      	b.n	8002906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002898:	4b34      	ldr	r3, [pc, #208]	@ (800296c <HAL_RCC_OscConfig+0x244>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fc7d 	bl	800119c <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a6:	f7fe fc79 	bl	800119c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1a8      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b28      	ldr	r3, [pc, #160]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4925      	ldr	r1, [pc, #148]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
 80028d8:	e015      	b.n	8002906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028da:	4b24      	ldr	r3, [pc, #144]	@ (800296c <HAL_RCC_OscConfig+0x244>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fc5c 	bl	800119c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e8:	f7fe fc58 	bl	800119c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e187      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d036      	beq.n	8002980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_RCC_OscConfig+0x248>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fc3c 	bl	800119c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002928:	f7fe fc38 	bl	800119c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e167      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <HAL_RCC_OscConfig+0x240>)
 800293c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x200>
 8002946:	e01b      	b.n	8002980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <HAL_RCC_OscConfig+0x248>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7fe fc25 	bl	800119c <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	e00e      	b.n	8002974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe fc21 	bl	800119c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d907      	bls.n	8002974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e150      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
 8002968:	40023800 	.word	0x40023800
 800296c:	42470000 	.word	0x42470000
 8002970:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002974:	4b88      	ldr	r3, [pc, #544]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ea      	bne.n	8002956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8097 	beq.w	8002abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002992:	4b81      	ldr	r3, [pc, #516]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ba:	2301      	movs	r3, #1
 80029bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029be:	4b77      	ldr	r3, [pc, #476]	@ (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d118      	bne.n	80029fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ca:	4b74      	ldr	r3, [pc, #464]	@ (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a73      	ldr	r2, [pc, #460]	@ (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fbe1 	bl	800119c <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029de:	f7fe fbdd 	bl	800119c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e10c      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x2ea>
 8002a04:	4b64      	ldr	r3, [pc, #400]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a08:	4a63      	ldr	r2, [pc, #396]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a10:	e01c      	b.n	8002a4c <HAL_RCC_OscConfig+0x324>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x30c>
 8002a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a26:	4b5c      	ldr	r3, [pc, #368]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a32:	e00b      	b.n	8002a4c <HAL_RCC_OscConfig+0x324>
 8002a34:	4b58      	ldr	r3, [pc, #352]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a38:	4a57      	ldr	r2, [pc, #348]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a40:	4b55      	ldr	r3, [pc, #340]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	4a54      	ldr	r2, [pc, #336]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 0304 	bic.w	r3, r3, #4
 8002a4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe fba2 	bl	800119c <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5c:	f7fe fb9e 	bl	800119c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e0cb      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	4b49      	ldr	r3, [pc, #292]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0ee      	beq.n	8002a5c <HAL_RCC_OscConfig+0x334>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fb8c 	bl	800119c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7fe fb88 	bl	800119c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e0b5      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ee      	bne.n	8002a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d105      	bne.n	8002abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab0:	4b39      	ldr	r3, [pc, #228]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	4a38      	ldr	r2, [pc, #224]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a1 	beq.w	8002c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac6:	4b34      	ldr	r3, [pc, #208]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d05c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d141      	bne.n	8002b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <HAL_RCC_OscConfig+0x478>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fb5c 	bl	800119c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe fb58 	bl	800119c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e087      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	4b27      	ldr	r3, [pc, #156]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	019b      	lsls	r3, r3, #6
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	491b      	ldr	r1, [pc, #108]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x478>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe fb31 	bl	800119c <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe fb2d 	bl	800119c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e05c      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x416>
 8002b5c:	e054      	b.n	8002c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_RCC_OscConfig+0x478>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe fb1a 	bl	800119c <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fb16 	bl	800119c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e045      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x444>
 8002b8a:	e03d      	b.n	8002c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e038      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <HAL_RCC_OscConfig+0x4ec>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d028      	beq.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d121      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d11a      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d111      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0cc      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b68      	ldr	r3, [pc, #416]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d90c      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b65      	ldr	r3, [pc, #404]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b63      	ldr	r3, [pc, #396]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0b8      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c6c:	4b59      	ldr	r3, [pc, #356]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a58      	ldr	r2, [pc, #352]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c84:	4b53      	ldr	r3, [pc, #332]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a52      	ldr	r2, [pc, #328]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b50      	ldr	r3, [pc, #320]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	494d      	ldr	r1, [pc, #308]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d044      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d119      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e07f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e067      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b37      	ldr	r3, [pc, #220]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4934      	ldr	r1, [pc, #208]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d08:	f7fe fa48 	bl	800119c <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe fa44 	bl	800119c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e04f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b25      	ldr	r3, [pc, #148]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d20c      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e032      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4916      	ldr	r1, [pc, #88]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8a:	4b12      	ldr	r3, [pc, #72]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	490e      	ldr	r1, [pc, #56]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d9e:	f000 f821 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	490a      	ldr	r1, [pc, #40]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a09      	ldr	r2, [pc, #36]	@ (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dba:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f9a8 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023c00 	.word	0x40023c00
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08005bc0 	.word	0x08005bc0
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	20000004 	.word	0x20000004

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de8:	b094      	sub	sp, #80	@ 0x50
 8002dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dfc:	4b79      	ldr	r3, [pc, #484]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d00d      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x40>
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	f200 80e1 	bhi.w	8002fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x34>
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e16:	e0db      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b73      	ldr	r3, [pc, #460]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e1c:	e0db      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1e:	4b73      	ldr	r3, [pc, #460]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x208>)
 8002e20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e22:	e0d8      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e24:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d063      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	2200      	movs	r2, #0
 8002e42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e4e:	2300      	movs	r3, #0
 8002e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e56:	4622      	mov	r2, r4
 8002e58:	462b      	mov	r3, r5
 8002e5a:	f04f 0000 	mov.w	r0, #0
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	0159      	lsls	r1, r3, #5
 8002e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e68:	0150      	lsls	r0, r2, #5
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4621      	mov	r1, r4
 8002e70:	1a51      	subs	r1, r2, r1
 8002e72:	6139      	str	r1, [r7, #16]
 8002e74:	4629      	mov	r1, r5
 8002e76:	eb63 0301 	sbc.w	r3, r3, r1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e88:	4659      	mov	r1, fp
 8002e8a:	018b      	lsls	r3, r1, #6
 8002e8c:	4651      	mov	r1, sl
 8002e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e92:	4651      	mov	r1, sl
 8002e94:	018a      	lsls	r2, r1, #6
 8002e96:	4651      	mov	r1, sl
 8002e98:	ebb2 0801 	subs.w	r8, r2, r1
 8002e9c:	4659      	mov	r1, fp
 8002e9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eb6:	4690      	mov	r8, r2
 8002eb8:	4699      	mov	r9, r3
 8002eba:	4623      	mov	r3, r4
 8002ebc:	eb18 0303 	adds.w	r3, r8, r3
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	462b      	mov	r3, r5
 8002ec4:	eb49 0303 	adc.w	r3, r9, r3
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	024b      	lsls	r3, r1, #9
 8002eda:	4621      	mov	r1, r4
 8002edc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	024a      	lsls	r2, r1, #9
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eea:	2200      	movs	r2, #0
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ef4:	f7fd f970 	bl	80001d8 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4613      	mov	r3, r2
 8002efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f00:	e058      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f02:	4b38      	ldr	r3, [pc, #224]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	2200      	movs	r2, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	2300      	movs	r3, #0
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	464b      	mov	r3, r9
 8002f20:	f04f 0000 	mov.w	r0, #0
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	0159      	lsls	r1, r3, #5
 8002f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f2e:	0150      	lsls	r0, r2, #5
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4641      	mov	r1, r8
 8002f36:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f54:	ebb2 040a 	subs.w	r4, r2, sl
 8002f58:	eb63 050b 	sbc.w	r5, r3, fp
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	00eb      	lsls	r3, r5, #3
 8002f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f6a:	00e2      	lsls	r2, r4, #3
 8002f6c:	4614      	mov	r4, r2
 8002f6e:	461d      	mov	r5, r3
 8002f70:	4643      	mov	r3, r8
 8002f72:	18e3      	adds	r3, r4, r3
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	464b      	mov	r3, r9
 8002f78:	eb45 0303 	adc.w	r3, r5, r3
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	028b      	lsls	r3, r1, #10
 8002f8e:	4621      	mov	r1, r4
 8002f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f94:	4621      	mov	r1, r4
 8002f96:	028a      	lsls	r2, r1, #10
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	61fa      	str	r2, [r7, #28]
 8002fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fa8:	f7fd f916 	bl	80001d8 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002fc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fce:	e002      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3750      	adds	r7, #80	@ 0x50
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	00f42400 	.word	0x00f42400
 8002fec:	007a1200 	.word	0x007a1200

08002ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	@ (8003004 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000000 	.word	0x20000000

08003008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800300c:	f7ff fff0 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	0a9b      	lsrs	r3, r3, #10
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4903      	ldr	r1, [pc, #12]	@ (800302c <HAL_RCC_GetPCLK1Freq+0x24>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	08005bd0 	.word	0x08005bd0

08003030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003034:	f7ff ffdc 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	0b5b      	lsrs	r3, r3, #13
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4903      	ldr	r1, [pc, #12]	@ (8003054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	08005bd0 	.word	0x08005bd0

08003058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e07b      	b.n	8003162 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	d108      	bne.n	8003084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800307a:	d009      	beq.n	8003090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
 8003082:	e005      	b.n	8003090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fbd2 	bl	8000854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003114:	ea42 0103 	orr.w	r1, r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	f003 0104 	and.w	r1, r3, #4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	f003 0210 	and.w	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003150:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e041      	b.n	8003200 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fd fdfd 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f000 fc9f 	bl	8003aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e041      	b.n	800329e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fd8c 	bl	8000d4c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f000 fc50 	bl	8003aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e041      	b.n	800333c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f839 	bl	8003344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f000 fc01 	bl	8003aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HAL_TIM_PWM_Start+0x24>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e022      	b.n	80033c2 <HAL_TIM_PWM_Start+0x6a>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d109      	bne.n	8003396 <HAL_TIM_PWM_Start+0x3e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e015      	b.n	80033c2 <HAL_TIM_PWM_Start+0x6a>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d109      	bne.n	80033b0 <HAL_TIM_PWM_Start+0x58>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e008      	b.n	80033c2 <HAL_TIM_PWM_Start+0x6a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e068      	b.n	800349c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d104      	bne.n	80033da <HAL_TIM_PWM_Start+0x82>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d8:	e013      	b.n	8003402 <HAL_TIM_PWM_Start+0xaa>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d104      	bne.n	80033ea <HAL_TIM_PWM_Start+0x92>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e8:	e00b      	b.n	8003402 <HAL_TIM_PWM_Start+0xaa>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d104      	bne.n	80033fa <HAL_TIM_PWM_Start+0xa2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033f8:	e003      	b.n	8003402 <HAL_TIM_PWM_Start+0xaa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	6839      	ldr	r1, [r7, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fe20 	bl	8004050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a23      	ldr	r2, [pc, #140]	@ (80034a4 <HAL_TIM_PWM_Start+0x14c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d107      	bne.n	800342a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_TIM_PWM_Start+0x14c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d018      	beq.n	8003466 <HAL_TIM_PWM_Start+0x10e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343c:	d013      	beq.n	8003466 <HAL_TIM_PWM_Start+0x10e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a19      	ldr	r2, [pc, #100]	@ (80034a8 <HAL_TIM_PWM_Start+0x150>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_TIM_PWM_Start+0x10e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a17      	ldr	r2, [pc, #92]	@ (80034ac <HAL_TIM_PWM_Start+0x154>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d009      	beq.n	8003466 <HAL_TIM_PWM_Start+0x10e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a16      	ldr	r2, [pc, #88]	@ (80034b0 <HAL_TIM_PWM_Start+0x158>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_TIM_PWM_Start+0x10e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a14      	ldr	r2, [pc, #80]	@ (80034b4 <HAL_TIM_PWM_Start+0x15c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d111      	bne.n	800348a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b06      	cmp	r3, #6
 8003476:	d010      	beq.n	800349a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	e007      	b.n	800349a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40010000 	.word	0x40010000
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800
 80034b0:	40000c00 	.word	0x40000c00
 80034b4:	40014000 	.word	0x40014000

080034b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e097      	b.n	80035fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7fd fc8b 	bl	8000dfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034fc:	f023 0307 	bic.w	r3, r3, #7
 8003500:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f000 faed 	bl	8003aec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	4313      	orrs	r3, r2
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003558:	f023 030c 	bic.w	r3, r3, #12
 800355c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003564:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	4313      	orrs	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	011a      	lsls	r2, r3, #4
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	031b      	lsls	r3, r3, #12
 8003588:	4313      	orrs	r3, r2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003596:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800359e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4313      	orrs	r3, r2
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003614:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800361c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003624:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800362c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d110      	bne.n	8003656 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d102      	bne.n	8003640 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800363a:	7b7b      	ldrb	r3, [r7, #13]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d001      	beq.n	8003644 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e069      	b.n	8003718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003654:	e031      	b.n	80036ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d110      	bne.n	800367e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800365c:	7bbb      	ldrb	r3, [r7, #14]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d102      	bne.n	8003668 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003662:	7b3b      	ldrb	r3, [r7, #12]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d001      	beq.n	800366c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e055      	b.n	8003718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800367c:	e01d      	b.n	80036ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d108      	bne.n	8003696 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003684:	7bbb      	ldrb	r3, [r7, #14]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d105      	bne.n	8003696 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800368a:	7b7b      	ldrb	r3, [r7, #13]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d102      	bne.n	8003696 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003690:	7b3b      	ldrb	r3, [r7, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d001      	beq.n	800369a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e03e      	b.n	8003718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_TIM_Encoder_Start+0xc4>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d008      	beq.n	80036d8 <HAL_TIM_Encoder_Start+0xd4>
 80036c6:	e00f      	b.n	80036e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2201      	movs	r2, #1
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fcbd 	bl	8004050 <TIM_CCxChannelCmd>
      break;
 80036d6:	e016      	b.n	8003706 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2201      	movs	r2, #1
 80036de:	2104      	movs	r1, #4
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fcb5 	bl	8004050 <TIM_CCxChannelCmd>
      break;
 80036e6:	e00e      	b.n	8003706 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fcad 	bl	8004050 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2201      	movs	r2, #1
 80036fc:	2104      	movs	r1, #4
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fca6 	bl	8004050 <TIM_CCxChannelCmd>
      break;
 8003704:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_TIM_OC_ConfigChannel+0x1e>
 800373a:	2302      	movs	r3, #2
 800373c:	e048      	b.n	80037d0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d839      	bhi.n	80037c0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800374c:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <HAL_TIM_OC_ConfigChannel+0x34>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003789 	.word	0x08003789
 8003758:	080037c1 	.word	0x080037c1
 800375c:	080037c1 	.word	0x080037c1
 8003760:	080037c1 	.word	0x080037c1
 8003764:	08003797 	.word	0x08003797
 8003768:	080037c1 	.word	0x080037c1
 800376c:	080037c1 	.word	0x080037c1
 8003770:	080037c1 	.word	0x080037c1
 8003774:	080037a5 	.word	0x080037a5
 8003778:	080037c1 	.word	0x080037c1
 800377c:	080037c1 	.word	0x080037c1
 8003780:	080037c1 	.word	0x080037c1
 8003784:	080037b3 	.word	0x080037b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fa38 	bl	8003c04 <TIM_OC1_SetConfig>
      break;
 8003794:	e017      	b.n	80037c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fa97 	bl	8003cd0 <TIM_OC2_SetConfig>
      break;
 80037a2:	e010      	b.n	80037c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fafc 	bl	8003da8 <TIM_OC3_SetConfig>
      break;
 80037b0:	e009      	b.n	80037c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fb5f 	bl	8003e7c <TIM_OC4_SetConfig>
      break;
 80037be:	e002      	b.n	80037c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
      break;
 80037c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e0ae      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	f200 809f 	bhi.w	8003944 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003806:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003841 	.word	0x08003841
 8003810:	08003945 	.word	0x08003945
 8003814:	08003945 	.word	0x08003945
 8003818:	08003945 	.word	0x08003945
 800381c:	08003881 	.word	0x08003881
 8003820:	08003945 	.word	0x08003945
 8003824:	08003945 	.word	0x08003945
 8003828:	08003945 	.word	0x08003945
 800382c:	080038c3 	.word	0x080038c3
 8003830:	08003945 	.word	0x08003945
 8003834:	08003945 	.word	0x08003945
 8003838:	08003945 	.word	0x08003945
 800383c:	08003903 	.word	0x08003903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f9dc 	bl	8003c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6999      	ldr	r1, [r3, #24]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	619a      	str	r2, [r3, #24]
      break;
 800387e:	e064      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fa22 	bl	8003cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800389a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6999      	ldr	r1, [r3, #24]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	619a      	str	r2, [r3, #24]
      break;
 80038c0:	e043      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fa6d 	bl	8003da8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0208 	orr.w	r2, r2, #8
 80038dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0204 	bic.w	r2, r2, #4
 80038ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69d9      	ldr	r1, [r3, #28]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	61da      	str	r2, [r3, #28]
      break;
 8003900:	e023      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fab7 	bl	8003e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800391c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69d9      	ldr	r1, [r3, #28]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	61da      	str	r2, [r3, #28]
      break;
 8003942:	e002      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	75fb      	strb	r3, [r7, #23]
      break;
 8003948:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003952:	7dfb      	ldrb	r3, [r7, #23]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIM_ConfigClockSource+0x1c>
 8003974:	2302      	movs	r3, #2
 8003976:	e0b4      	b.n	8003ae2 <HAL_TIM_ConfigClockSource+0x186>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800399e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b0:	d03e      	beq.n	8003a30 <HAL_TIM_ConfigClockSource+0xd4>
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b6:	f200 8087 	bhi.w	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039be:	f000 8086 	beq.w	8003ace <HAL_TIM_ConfigClockSource+0x172>
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c6:	d87f      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039c8:	2b70      	cmp	r3, #112	@ 0x70
 80039ca:	d01a      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0xa6>
 80039cc:	2b70      	cmp	r3, #112	@ 0x70
 80039ce:	d87b      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d0:	2b60      	cmp	r3, #96	@ 0x60
 80039d2:	d050      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x11a>
 80039d4:	2b60      	cmp	r3, #96	@ 0x60
 80039d6:	d877      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b50      	cmp	r3, #80	@ 0x50
 80039da:	d03c      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0xfa>
 80039dc:	2b50      	cmp	r3, #80	@ 0x50
 80039de:	d873      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039e0:	2b40      	cmp	r3, #64	@ 0x40
 80039e2:	d058      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x13a>
 80039e4:	2b40      	cmp	r3, #64	@ 0x40
 80039e6:	d86f      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039e8:	2b30      	cmp	r3, #48	@ 0x30
 80039ea:	d064      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80039ec:	2b30      	cmp	r3, #48	@ 0x30
 80039ee:	d86b      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d060      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d867      	bhi.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d05c      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d05a      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a00:	e062      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a12:	f000 fafd 	bl	8004010 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	609a      	str	r2, [r3, #8]
      break;
 8003a2e:	e04f      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a40:	f000 fae6 	bl	8004010 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a52:	609a      	str	r2, [r3, #8]
      break;
 8003a54:	e03c      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 fa5a 	bl	8003f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2150      	movs	r1, #80	@ 0x50
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fab3 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003a74:	e02c      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a82:	461a      	mov	r2, r3
 8003a84:	f000 fa79 	bl	8003f7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2160      	movs	r1, #96	@ 0x60
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 faa3 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003a94:	e01c      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f000 fa3a 	bl	8003f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2140      	movs	r1, #64	@ 0x40
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fa93 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003ab4:	e00c      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	f000 fa8a 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003ac6:	e003      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      break;
 8003acc:	e000      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3a      	ldr	r2, [pc, #232]	@ (8003be8 <TIM_Base_SetConfig+0xfc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00f      	beq.n	8003b24 <TIM_Base_SetConfig+0x38>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0a:	d00b      	beq.n	8003b24 <TIM_Base_SetConfig+0x38>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a37      	ldr	r2, [pc, #220]	@ (8003bec <TIM_Base_SetConfig+0x100>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d007      	beq.n	8003b24 <TIM_Base_SetConfig+0x38>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a36      	ldr	r2, [pc, #216]	@ (8003bf0 <TIM_Base_SetConfig+0x104>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_Base_SetConfig+0x38>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a35      	ldr	r2, [pc, #212]	@ (8003bf4 <TIM_Base_SetConfig+0x108>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d108      	bne.n	8003b36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2b      	ldr	r2, [pc, #172]	@ (8003be8 <TIM_Base_SetConfig+0xfc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01b      	beq.n	8003b76 <TIM_Base_SetConfig+0x8a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b44:	d017      	beq.n	8003b76 <TIM_Base_SetConfig+0x8a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a28      	ldr	r2, [pc, #160]	@ (8003bec <TIM_Base_SetConfig+0x100>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <TIM_Base_SetConfig+0x8a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a27      	ldr	r2, [pc, #156]	@ (8003bf0 <TIM_Base_SetConfig+0x104>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00f      	beq.n	8003b76 <TIM_Base_SetConfig+0x8a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a26      	ldr	r2, [pc, #152]	@ (8003bf4 <TIM_Base_SetConfig+0x108>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <TIM_Base_SetConfig+0x8a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a25      	ldr	r2, [pc, #148]	@ (8003bf8 <TIM_Base_SetConfig+0x10c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <TIM_Base_SetConfig+0x8a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a24      	ldr	r2, [pc, #144]	@ (8003bfc <TIM_Base_SetConfig+0x110>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_Base_SetConfig+0x8a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a23      	ldr	r2, [pc, #140]	@ (8003c00 <TIM_Base_SetConfig+0x114>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d108      	bne.n	8003b88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a0e      	ldr	r2, [pc, #56]	@ (8003be8 <TIM_Base_SetConfig+0xfc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d103      	bne.n	8003bbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f023 0201 	bic.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	611a      	str	r2, [r3, #16]
  }
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800
 8003bf4:	40000c00 	.word	0x40000c00
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40014400 	.word	0x40014400
 8003c00:	40014800 	.word	0x40014800

08003c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f023 0201 	bic.w	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f023 0302 	bic.w	r3, r3, #2
 8003c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ccc <TIM_OC1_SetConfig+0xc8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d10c      	bne.n	8003c7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 0308 	bic.w	r3, r3, #8
 8003c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 0304 	bic.w	r3, r3, #4
 8003c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a13      	ldr	r2, [pc, #76]	@ (8003ccc <TIM_OC1_SetConfig+0xc8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d111      	bne.n	8003ca6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	621a      	str	r2, [r3, #32]
}
 8003cc0:	bf00      	nop
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40010000 	.word	0x40010000

08003cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f023 0210 	bic.w	r2, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0320 	bic.w	r3, r3, #32
 8003d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003da4 <TIM_OC2_SetConfig+0xd4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10d      	bne.n	8003d4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a15      	ldr	r2, [pc, #84]	@ (8003da4 <TIM_OC2_SetConfig+0xd4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d113      	bne.n	8003d7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000

08003da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <TIM_OC3_SetConfig+0xd0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10d      	bne.n	8003e22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a14      	ldr	r2, [pc, #80]	@ (8003e78 <TIM_OC3_SetConfig+0xd0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d113      	bne.n	8003e52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40010000 	.word	0x40010000

08003e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	031b      	lsls	r3, r3, #12
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a10      	ldr	r2, [pc, #64]	@ (8003f18 <TIM_OC4_SetConfig+0x9c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d109      	bne.n	8003ef0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40010000 	.word	0x40010000

08003f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f023 0201 	bic.w	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f023 030a 	bic.w	r3, r3, #10
 8003f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b087      	sub	sp, #28
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f023 0210 	bic.w	r2, r3, #16
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	031b      	lsls	r3, r3, #12
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f043 0307 	orr.w	r3, r3, #7
 8003ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	609a      	str	r2, [r3, #8]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800402a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	021a      	lsls	r2, r3, #8
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	431a      	orrs	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4313      	orrs	r3, r2
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	bf00      	nop
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	2201      	movs	r2, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1a      	ldr	r2, [r3, #32]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	43db      	mvns	r3, r3
 8004072:	401a      	ands	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1a      	ldr	r2, [r3, #32]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	fa01 f303 	lsl.w	r3, r1, r3
 8004088:	431a      	orrs	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e050      	b.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d018      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004100:	d013      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a18      	ldr	r2, [pc, #96]	@ (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00e      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a16      	ldr	r2, [pc, #88]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a15      	ldr	r2, [pc, #84]	@ (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a13      	ldr	r2, [pc, #76]	@ (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d10c      	bne.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	4313      	orrs	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40014000 	.word	0x40014000

08004178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004190:	2302      	movs	r3, #2
 8004192:	e03d      	b.n	8004210 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e042      	b.n	80042b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fc fed2 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2224      	movs	r2, #36	@ 0x24
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800425e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f973 	bl	800454c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	@ 0x28
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d175      	bne.n	80043c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_UART_Transmit+0x2c>
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e06e      	b.n	80043ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2221      	movs	r2, #33	@ 0x21
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042fa:	f7fc ff4f 	bl	800119c <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	88fa      	ldrh	r2, [r7, #6]
 800430a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004314:	d108      	bne.n	8004328 <HAL_UART_Transmit+0x6c>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d104      	bne.n	8004328 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	e003      	b.n	8004330 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004330:	e02e      	b.n	8004390 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2200      	movs	r2, #0
 800433a:	2180      	movs	r1, #128	@ 0x80
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f848 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e03a      	b.n	80043ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004368:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	3302      	adds	r3, #2
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	e007      	b.n	8004382 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3301      	adds	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1cb      	bne.n	8004332 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2140      	movs	r1, #64	@ 0x40
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f814 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e006      	b.n	80043ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e2:	e03b      	b.n	800445c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	d037      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ec:	f7fc fed6 	bl	800119c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	6a3a      	ldr	r2, [r7, #32]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d302      	bcc.n	8004402 <UART_WaitOnFlagUntilTimeout+0x30>
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e03a      	b.n	800447c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d023      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b80      	cmp	r3, #128	@ 0x80
 8004418:	d020      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x8a>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b40      	cmp	r3, #64	@ 0x40
 800441e:	d01d      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	d116      	bne.n	800445c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f81d 	bl	8004484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2208      	movs	r2, #8
 800444e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e00f      	b.n	800447c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	429a      	cmp	r2, r3
 8004478:	d0b4      	beq.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b095      	sub	sp, #84	@ 0x54
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800449c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80044ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3314      	adds	r3, #20
 80044c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e5      	bne.n	80044c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d119      	bne.n	8004530 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	60bb      	str	r3, [r7, #8]
   return(result);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	647b      	str	r3, [r7, #68]	@ 0x44
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800451c:	61ba      	str	r2, [r7, #24]
 800451e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6979      	ldr	r1, [r7, #20]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800453e:	bf00      	nop
 8004540:	3754      	adds	r7, #84	@ 0x54
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800454c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004550:	b0c0      	sub	sp, #256	@ 0x100
 8004552:	af00      	add	r7, sp, #0
 8004554:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	68d9      	ldr	r1, [r3, #12]
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	ea40 0301 	orr.w	r3, r0, r1
 8004574:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	431a      	orrs	r2, r3
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	431a      	orrs	r2, r3
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045a4:	f021 010c 	bic.w	r1, r1, #12
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045b2:	430b      	orrs	r3, r1
 80045b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	6999      	ldr	r1, [r3, #24]
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	ea40 0301 	orr.w	r3, r0, r1
 80045d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b8f      	ldr	r3, [pc, #572]	@ (8004818 <UART_SetConfig+0x2cc>)
 80045dc:	429a      	cmp	r2, r3
 80045de:	d005      	beq.n	80045ec <UART_SetConfig+0xa0>
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b8d      	ldr	r3, [pc, #564]	@ (800481c <UART_SetConfig+0x2d0>)
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d104      	bne.n	80045f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045ec:	f7fe fd20 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
 80045f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045f4:	e003      	b.n	80045fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045f6:	f7fe fd07 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 80045fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004608:	f040 810c 	bne.w	8004824 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800460c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004610:	2200      	movs	r2, #0
 8004612:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004616:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800461a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800461e:	4622      	mov	r2, r4
 8004620:	462b      	mov	r3, r5
 8004622:	1891      	adds	r1, r2, r2
 8004624:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004626:	415b      	adcs	r3, r3
 8004628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800462a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800462e:	4621      	mov	r1, r4
 8004630:	eb12 0801 	adds.w	r8, r2, r1
 8004634:	4629      	mov	r1, r5
 8004636:	eb43 0901 	adc.w	r9, r3, r1
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800464a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800464e:	4690      	mov	r8, r2
 8004650:	4699      	mov	r9, r3
 8004652:	4623      	mov	r3, r4
 8004654:	eb18 0303 	adds.w	r3, r8, r3
 8004658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800465c:	462b      	mov	r3, r5
 800465e:	eb49 0303 	adc.w	r3, r9, r3
 8004662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004672:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800467a:	460b      	mov	r3, r1
 800467c:	18db      	adds	r3, r3, r3
 800467e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004680:	4613      	mov	r3, r2
 8004682:	eb42 0303 	adc.w	r3, r2, r3
 8004686:	657b      	str	r3, [r7, #84]	@ 0x54
 8004688:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800468c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004690:	f7fb fda2 	bl	80001d8 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4b61      	ldr	r3, [pc, #388]	@ (8004820 <UART_SetConfig+0x2d4>)
 800469a:	fba3 2302 	umull	r2, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	011c      	lsls	r4, r3, #4
 80046a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046bc:	415b      	adcs	r3, r3
 80046be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046c4:	4641      	mov	r1, r8
 80046c6:	eb12 0a01 	adds.w	sl, r2, r1
 80046ca:	4649      	mov	r1, r9
 80046cc:	eb43 0b01 	adc.w	fp, r3, r1
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e4:	4692      	mov	sl, r2
 80046e6:	469b      	mov	fp, r3
 80046e8:	4643      	mov	r3, r8
 80046ea:	eb1a 0303 	adds.w	r3, sl, r3
 80046ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046f2:	464b      	mov	r3, r9
 80046f4:	eb4b 0303 	adc.w	r3, fp, r3
 80046f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004708:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800470c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004710:	460b      	mov	r3, r1
 8004712:	18db      	adds	r3, r3, r3
 8004714:	643b      	str	r3, [r7, #64]	@ 0x40
 8004716:	4613      	mov	r3, r2
 8004718:	eb42 0303 	adc.w	r3, r2, r3
 800471c:	647b      	str	r3, [r7, #68]	@ 0x44
 800471e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004722:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004726:	f7fb fd57 	bl	80001d8 <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4611      	mov	r1, r2
 8004730:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <UART_SetConfig+0x2d4>)
 8004732:	fba3 2301 	umull	r2, r3, r3, r1
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	2264      	movs	r2, #100	@ 0x64
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	1acb      	subs	r3, r1, r3
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004746:	4b36      	ldr	r3, [pc, #216]	@ (8004820 <UART_SetConfig+0x2d4>)
 8004748:	fba3 2302 	umull	r2, r3, r3, r2
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004754:	441c      	add	r4, r3
 8004756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004760:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004764:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	1891      	adds	r1, r2, r2
 800476e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004770:	415b      	adcs	r3, r3
 8004772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004778:	4641      	mov	r1, r8
 800477a:	1851      	adds	r1, r2, r1
 800477c:	6339      	str	r1, [r7, #48]	@ 0x30
 800477e:	4649      	mov	r1, r9
 8004780:	414b      	adcs	r3, r1
 8004782:	637b      	str	r3, [r7, #52]	@ 0x34
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004790:	4659      	mov	r1, fp
 8004792:	00cb      	lsls	r3, r1, #3
 8004794:	4651      	mov	r1, sl
 8004796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479a:	4651      	mov	r1, sl
 800479c:	00ca      	lsls	r2, r1, #3
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	4642      	mov	r2, r8
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047ac:	464b      	mov	r3, r9
 80047ae:	460a      	mov	r2, r1
 80047b0:	eb42 0303 	adc.w	r3, r2, r3
 80047b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047cc:	460b      	mov	r3, r1
 80047ce:	18db      	adds	r3, r3, r3
 80047d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047d2:	4613      	mov	r3, r2
 80047d4:	eb42 0303 	adc.w	r3, r2, r3
 80047d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047e2:	f7fb fcf9 	bl	80001d8 <__aeabi_uldivmod>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <UART_SetConfig+0x2d4>)
 80047ec:	fba3 1302 	umull	r1, r3, r3, r2
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	2164      	movs	r1, #100	@ 0x64
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	3332      	adds	r3, #50	@ 0x32
 80047fe:	4a08      	ldr	r2, [pc, #32]	@ (8004820 <UART_SetConfig+0x2d4>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	f003 0207 	and.w	r2, r3, #7
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4422      	add	r2, r4
 8004812:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004814:	e106      	b.n	8004a24 <UART_SetConfig+0x4d8>
 8004816:	bf00      	nop
 8004818:	40011000 	.word	0x40011000
 800481c:	40011400 	.word	0x40011400
 8004820:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004828:	2200      	movs	r2, #0
 800482a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800482e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004832:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004836:	4642      	mov	r2, r8
 8004838:	464b      	mov	r3, r9
 800483a:	1891      	adds	r1, r2, r2
 800483c:	6239      	str	r1, [r7, #32]
 800483e:	415b      	adcs	r3, r3
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24
 8004842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004846:	4641      	mov	r1, r8
 8004848:	1854      	adds	r4, r2, r1
 800484a:	4649      	mov	r1, r9
 800484c:	eb43 0501 	adc.w	r5, r3, r1
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	00eb      	lsls	r3, r5, #3
 800485a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800485e:	00e2      	lsls	r2, r4, #3
 8004860:	4614      	mov	r4, r2
 8004862:	461d      	mov	r5, r3
 8004864:	4643      	mov	r3, r8
 8004866:	18e3      	adds	r3, r4, r3
 8004868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800486c:	464b      	mov	r3, r9
 800486e:	eb45 0303 	adc.w	r3, r5, r3
 8004872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004882:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004892:	4629      	mov	r1, r5
 8004894:	008b      	lsls	r3, r1, #2
 8004896:	4621      	mov	r1, r4
 8004898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800489c:	4621      	mov	r1, r4
 800489e:	008a      	lsls	r2, r1, #2
 80048a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048a4:	f7fb fc98 	bl	80001d8 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4b60      	ldr	r3, [pc, #384]	@ (8004a30 <UART_SetConfig+0x4e4>)
 80048ae:	fba3 2302 	umull	r2, r3, r3, r2
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	011c      	lsls	r4, r3, #4
 80048b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	1891      	adds	r1, r2, r2
 80048ce:	61b9      	str	r1, [r7, #24]
 80048d0:	415b      	adcs	r3, r3
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d8:	4641      	mov	r1, r8
 80048da:	1851      	adds	r1, r2, r1
 80048dc:	6139      	str	r1, [r7, #16]
 80048de:	4649      	mov	r1, r9
 80048e0:	414b      	adcs	r3, r1
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f0:	4659      	mov	r1, fp
 80048f2:	00cb      	lsls	r3, r1, #3
 80048f4:	4651      	mov	r1, sl
 80048f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048fa:	4651      	mov	r1, sl
 80048fc:	00ca      	lsls	r2, r1, #3
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	4603      	mov	r3, r0
 8004904:	4642      	mov	r2, r8
 8004906:	189b      	adds	r3, r3, r2
 8004908:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800490c:	464b      	mov	r3, r9
 800490e:	460a      	mov	r2, r1
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004922:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004930:	4649      	mov	r1, r9
 8004932:	008b      	lsls	r3, r1, #2
 8004934:	4641      	mov	r1, r8
 8004936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493a:	4641      	mov	r1, r8
 800493c:	008a      	lsls	r2, r1, #2
 800493e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004942:	f7fb fc49 	bl	80001d8 <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4611      	mov	r1, r2
 800494c:	4b38      	ldr	r3, [pc, #224]	@ (8004a30 <UART_SetConfig+0x4e4>)
 800494e:	fba3 2301 	umull	r2, r3, r3, r1
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2264      	movs	r2, #100	@ 0x64
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	1acb      	subs	r3, r1, r3
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	3332      	adds	r3, #50	@ 0x32
 8004960:	4a33      	ldr	r2, [pc, #204]	@ (8004a30 <UART_SetConfig+0x4e4>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800496c:	441c      	add	r4, r3
 800496e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004972:	2200      	movs	r2, #0
 8004974:	673b      	str	r3, [r7, #112]	@ 0x70
 8004976:	677a      	str	r2, [r7, #116]	@ 0x74
 8004978:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800497c:	4642      	mov	r2, r8
 800497e:	464b      	mov	r3, r9
 8004980:	1891      	adds	r1, r2, r2
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	415b      	adcs	r3, r3
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800498c:	4641      	mov	r1, r8
 800498e:	1851      	adds	r1, r2, r1
 8004990:	6039      	str	r1, [r7, #0]
 8004992:	4649      	mov	r1, r9
 8004994:	414b      	adcs	r3, r1
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049a4:	4659      	mov	r1, fp
 80049a6:	00cb      	lsls	r3, r1, #3
 80049a8:	4651      	mov	r1, sl
 80049aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ae:	4651      	mov	r1, sl
 80049b0:	00ca      	lsls	r2, r1, #3
 80049b2:	4610      	mov	r0, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	4642      	mov	r2, r8
 80049ba:	189b      	adds	r3, r3, r2
 80049bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049be:	464b      	mov	r3, r9
 80049c0:	460a      	mov	r2, r1
 80049c2:	eb42 0303 	adc.w	r3, r2, r3
 80049c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80049d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049e0:	4649      	mov	r1, r9
 80049e2:	008b      	lsls	r3, r1, #2
 80049e4:	4641      	mov	r1, r8
 80049e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ea:	4641      	mov	r1, r8
 80049ec:	008a      	lsls	r2, r1, #2
 80049ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049f2:	f7fb fbf1 	bl	80001d8 <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <UART_SetConfig+0x4e4>)
 80049fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	2164      	movs	r1, #100	@ 0x64
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	3332      	adds	r3, #50	@ 0x32
 8004a0e:	4a08      	ldr	r2, [pc, #32]	@ (8004a30 <UART_SetConfig+0x4e4>)
 8004a10:	fba2 2303 	umull	r2, r3, r2, r3
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	f003 020f 	and.w	r2, r3, #15
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4422      	add	r2, r4
 8004a22:	609a      	str	r2, [r3, #8]
}
 8004a24:	bf00      	nop
 8004a26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a30:	51eb851f 	.word	0x51eb851f

08004a34 <fastFlow_init>:
//void _i2cWrite(uint8_t address, uint8_t* data,uint8_t len);
//void _i2cRead(uint8_t address, uint8_t* data,uint8_t len);


void fastFlow_init()
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
	fsmInitSingleThreaded(&fastFlowFSM, _state_menu, _action_init, fsmNoAction);
 8004a38:	4b03      	ldr	r3, [pc, #12]	@ (8004a48 <fastFlow_init+0x14>)
 8004a3a:	4a04      	ldr	r2, [pc, #16]	@ (8004a4c <fastFlow_init+0x18>)
 8004a3c:	4904      	ldr	r1, [pc, #16]	@ (8004a50 <fastFlow_init+0x1c>)
 8004a3e:	4805      	ldr	r0, [pc, #20]	@ (8004a54 <fastFlow_init+0x20>)
 8004a40:	f000 f896 	bl	8004b70 <fsmInitSingleThreaded>
}
 8004a44:	bf00      	nop
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	08004d23 	.word	0x08004d23
 8004a4c:	08004ae1 	.word	0x08004ae1
 8004a50:	08004a69 	.word	0x08004a69
 8004a54:	2000028c 	.word	0x2000028c

08004a58 <fastFlow_run>:


void fastFlow_run()
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(&huart2, helloWorld_msg, sizeof(helloWorld_msg) - 1, 1000);




	while(1) fsmRun(&fastFlowFSM);
 8004a5c:	4801      	ldr	r0, [pc, #4]	@ (8004a64 <fastFlow_run+0xc>)
 8004a5e:	f000 f8bb 	bl	8004bd8 <fsmRun>
 8004a62:	e7fb      	b.n	8004a5c <fastFlow_run+0x4>
 8004a64:	2000028c 	.word	0x2000028c

08004a68 <_state_menu>:
}

// states implementation

void _state_menu()
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
	const uint32_t c_uiRefreshRateNtick = 200;
 8004a6e:	23c8      	movs	r3, #200	@ 0xc8
 8004a70:	60fb      	str	r3, [r7, #12]
	const uint32_t c_LEDRefreshRateNtick = 500;
 8004a72:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004a76:	60bb      	str	r3, [r7, #8]
	const uint32_t c_displayRefreshRateNtick = 1;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	607b      	str	r3, [r7, #4]

	static uint32_t uiLastTick = 0;
	static uint32_t LEDLastTick = 0;
	static uint32_t displayLastTick = 0;

	uint32_t tickNow = hw_getTick();
 8004a7c:	f000 feb8 	bl	80057f0 <hw_getTick>
 8004a80:	6038      	str	r0, [r7, #0]

	if(tickNow - uiLastTick > c_uiRefreshRateNtick){
 8004a82:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <_state_menu+0x6c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d204      	bcs.n	8004a9a <_state_menu+0x32>
		uiLastTick = tickNow;
 8004a90:	4a10      	ldr	r2, [pc, #64]	@ (8004ad4 <_state_menu+0x6c>)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6013      	str	r3, [r2, #0]
		ui_updateRoutine();
 8004a96:	f000 f981 	bl	8004d9c <ui_updateRoutine>
	}


	if(tickNow - LEDLastTick > c_LEDRefreshRateNtick){
 8004a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <_state_menu+0x70>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d204      	bcs.n	8004ab2 <_state_menu+0x4a>
		LEDLastTick = tickNow;
 8004aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad8 <_state_menu+0x70>)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	6013      	str	r3, [r2, #0]
		ui_toggleLED();
 8004aae:	f000 f98b 	bl	8004dc8 <ui_toggleLED>
	}



	if(tickNow - displayLastTick > c_displayRefreshRateNtick){
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <_state_menu+0x74>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d204      	bcs.n	8004aca <_state_menu+0x62>
		displayLastTick = tickNow;
 8004ac0:	4a06      	ldr	r2, [pc, #24]	@ (8004adc <_state_menu+0x74>)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6013      	str	r3, [r2, #0]
		ui_displayUpdateRoutine();
 8004ac6:	f000 f973 	bl	8004db0 <ui_displayUpdateRoutine>
	}
}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200002bc 	.word	0x200002bc
 8004ad8:	200002c0 	.word	0x200002c0
 8004adc:	200002c4 	.word	0x200002c4

08004ae0 <_action_init>:

// actions implementation

void _action_init()
{
 8004ae0:	b5b0      	push	{r4, r5, r7, lr}
 8004ae2:	b08a      	sub	sp, #40	@ 0x28
 8004ae4:	af00      	add	r7, sp, #0
	char initMSG[] = "Initializing Fast Flow...\n\r";
 8004ae6:	4b14      	ldr	r3, [pc, #80]	@ (8004b38 <_action_init+0x58>)
 8004ae8:	f107 040c 	add.w	r4, r7, #12
 8004aec:	461d      	mov	r5, r3
 8004aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004af6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char doneMSG[] = "...done!\n\r";
 8004afa:	4a10      	ldr	r2, [pc, #64]	@ (8004b3c <_action_init+0x5c>)
 8004afc:	463b      	mov	r3, r7
 8004afe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b00:	c303      	stmia	r3!, {r0, r1}
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	3302      	adds	r3, #2
 8004b06:	0c12      	lsrs	r2, r2, #16
 8004b08:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, initMSG, sizeof(initMSG) - 1, 1000);
 8004b0a:	f107 010c 	add.w	r1, r7, #12
 8004b0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b12:	221b      	movs	r2, #27
 8004b14:	480a      	ldr	r0, [pc, #40]	@ (8004b40 <_action_init+0x60>)
 8004b16:	f7ff fbd1 	bl	80042bc <HAL_UART_Transmit>

	hw_init();
 8004b1a:	f000 fe07 	bl	800572c <hw_init>

	ui_init();
 8004b1e:	f000 f907 	bl	8004d30 <ui_init>
	HAL_UART_Transmit(&huart2, doneMSG, sizeof(doneMSG) - 1, 1000);
 8004b22:	4639      	mov	r1, r7
 8004b24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b28:	220a      	movs	r2, #10
 8004b2a:	4805      	ldr	r0, [pc, #20]	@ (8004b40 <_action_init+0x60>)
 8004b2c:	f7ff fbc6 	bl	80042bc <HAL_UART_Transmit>
}
 8004b30:	bf00      	nop
 8004b32:	3728      	adds	r7, #40	@ 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bdb0      	pop	{r4, r5, r7, pc}
 8004b38:	08005b70 	.word	0x08005b70
 8004b3c:	08005b8c 	.word	0x08005b8c
 8004b40:	20000240 	.word	0x20000240

08004b44 <_singleThreadedLock>:
 */

#include "tinyfsm.h"

// No-op lock function for single-threaded use
static unsigned int _singleThreadedLock(fsmMutex_t mutexObject) {
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
    return 0;  // Success
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <_singleThreadedUnlock>:

// No-op unlock function for single-threaded use
static unsigned int _singleThreadedUnlock(fsmMutex_t mutexObject) {
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
    return 0;  // Success
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <fsmInitSingleThreaded>:
void fsmInitSingleThreaded(
    fsm_t* fsmObject,
    fsmStateRoutine_t entryState,
    fsmAction_t entryAction,
    fsmAction_t fsmEndingAction)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
    static fsmMutexOps_t singleThreadedOps = {
        .lock = _singleThreadedLock,
        .unlock = _singleThreadedUnlock
    };

    fsmObject->entryState = entryState;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	601a      	str	r2, [r3, #0]
    fsmObject->previousState = entryState;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	60da      	str	r2, [r3, #12]
    fsmObject->currentState = entryState;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	611a      	str	r2, [r3, #16]
    fsmObject->nextState = entryState;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	615a      	str	r2, [r3, #20]
    fsmObject->entryAction = entryAction;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	605a      	str	r2, [r3, #4]
    fsmObject->fsmEndingAction = fsmEndingAction;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	609a      	str	r2, [r3, #8]
    fsmObject->action = entryAction;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	61da      	str	r2, [r3, #28]
    fsmObject->state = STATE_START;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	761a      	strb	r2, [r3, #24]
    fsmObject->mutexObject = 0;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	621a      	str	r2, [r3, #32]
    fsmObject->mutexOps = singleThreadedOps;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a07      	ldr	r2, [pc, #28]	@ (8004bd4 <fsmInitSingleThreaded+0x64>)
 8004bb8:	3324      	adds	r3, #36	@ 0x24
 8004bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bbe:	e883 0003 	stmia.w	r3, {r0, r1}
    fsmObject->initialized = 1;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	2000000c 	.word	0x2000000c

08004bd8 <fsmRun>:

fsmStatus_t fsmRun(fsm_t* fsmObject)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	// cease execution if not initialized
    if (fsmObject->initialized != 1) return FSM_NOT_INITIALIZED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d001      	beq.n	8004bec <fsmRun+0x14>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e06c      	b.n	8004cc6 <fsmRun+0xee>

    // mutex lock
    if (fsmObject->mutexOps.lock(fsmObject->mutexObject) != 0) return FSM_MUTEX_LOCKED;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6a12      	ldr	r2, [r2, #32]
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4798      	blx	r3
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <fsmRun+0x2a>
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e061      	b.n	8004cc6 <fsmRun+0xee>

    switch (fsmObject->state) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	7e1b      	ldrb	r3, [r3, #24]
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d84e      	bhi.n	8004ca8 <fsmRun+0xd0>
 8004c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c10 <fsmRun+0x38>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c21 	.word	0x08004c21
 8004c14:	08004c57 	.word	0x08004c57
 8004c18:	08004c2f 	.word	0x08004c2f
 8004c1c:	08004c75 	.word	0x08004c75
        case STATE_START:
            fsmObject->entryAction();
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4798      	blx	r3
            fsmObject->state = STATE_NO_CHANGE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	761a      	strb	r2, [r3, #24]
            break;
 8004c2c:	e044      	b.n	8004cb8 <fsmRun+0xe0>

        case STATE_NO_CHANGE:
        	fsmObject->mutexOps.unlock(fsmObject->mutexObject);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6a12      	ldr	r2, [r2, #32]
 8004c36:	4610      	mov	r0, r2
 8004c38:	4798      	blx	r3
            fsmObject->currentState();
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	4798      	blx	r3
        	// wait until mutex is unlocked and then lock it
        	while(fsmObject->mutexOps.lock(fsmObject->mutexObject) != 0);
 8004c40:	bf00      	nop
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6a12      	ldr	r2, [r2, #32]
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4798      	blx	r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f6      	bne.n	8004c42 <fsmRun+0x6a>
            break;
 8004c54:	e030      	b.n	8004cb8 <fsmRun+0xe0>

        case STATE_TRANSITION:
            // Change state
            fsmObject->previousState = fsmObject->currentState;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	60da      	str	r2, [r3, #12]
            fsmObject->currentState = fsmObject->nextState;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	611a      	str	r2, [r3, #16]
            fsmObject->action();
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	4798      	blx	r3
            fsmObject->state = STATE_NO_CHANGE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	761a      	strb	r2, [r3, #24]
            break;
 8004c72:	e021      	b.n	8004cb8 <fsmRun+0xe0>

        case STATE_END_FSM:
            // End the finite state machine
            fsmObject->previousState = fsmObject->entryState;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60da      	str	r2, [r3, #12]
            fsmObject->currentState = fsmObject->entryState;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	611a      	str	r2, [r3, #16]
            fsmObject->nextState = fsmObject->entryState;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	615a      	str	r2, [r3, #20]
            fsmObject->fsmEndingAction();
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4798      	blx	r3
            fsmObject->state = STATE_NO_CHANGE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	761a      	strb	r2, [r3, #24]

            // mutex unlock
            fsmObject->mutexOps.unlock(fsmObject->mutexObject);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6a12      	ldr	r2, [r2, #32]
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4798      	blx	r3
            return FSM_ENDED;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e00e      	b.n	8004cc6 <fsmRun+0xee>

        default:
            // Invalid state
            fsmObject->mutexOps.unlock(fsmObject->mutexObject);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6a12      	ldr	r2, [r2, #32]
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4798      	blx	r3
            return FSM_FAULT_UNKNOWN_STATE_RETURN;
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	e006      	b.n	8004cc6 <fsmRun+0xee>
    }

    // mutex unlock
    fsmObject->mutexOps.unlock(fsmObject->mutexObject);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6a12      	ldr	r2, [r2, #32]
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4798      	blx	r3
    return FSM_RUNNING;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop

08004cd0 <fsmTransitionState>:

void fsmTransitionState(
    fsm_t* fsmObject,
    fsmStateRoutine_t nextState,
    fsmAction_t action)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
	// cease execution if not initialized
    if (fsmObject->initialized != 1) return;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d118      	bne.n	8004d16 <fsmTransitionState+0x46>

    // mutex lock
    if (fsmObject->mutexOps.lock(fsmObject->mutexObject) != 0) return;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	6a12      	ldr	r2, [r2, #32]
 8004cec:	4610      	mov	r0, r2
 8004cee:	4798      	blx	r3
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d111      	bne.n	8004d1a <fsmTransitionState+0x4a>

    fsmObject->state = STATE_TRANSITION;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	761a      	strb	r2, [r3, #24]
    fsmObject->action = action;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	61da      	str	r2, [r3, #28]
    fsmObject->nextState = nextState;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	615a      	str	r2, [r3, #20]

    // mutex unlock
    fsmObject->mutexOps.unlock(fsmObject->mutexObject);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	6a12      	ldr	r2, [r2, #32]
 8004d10:	4610      	mov	r0, r2
 8004d12:	4798      	blx	r3
 8004d14:	e002      	b.n	8004d1c <fsmTransitionState+0x4c>
    if (fsmObject->initialized != 1) return;
 8004d16:	bf00      	nop
 8004d18:	e000      	b.n	8004d1c <fsmTransitionState+0x4c>
    if (fsmObject->mutexOps.lock(fsmObject->mutexObject) != 0) return;
 8004d1a:	bf00      	nop
}
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <fsmNoAction>:
    // mutex unlock
    fsmObject->mutexOps.unlock(fsmObject->mutexObject);
}

void fsmNoAction()
{
 8004d22:	b480      	push	{r7}
 8004d24:	af00      	add	r7, sp, #0
    // No action function
}
 8004d26:	bf00      	nop
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <ui_init>:
bool _buttonPressed();



void ui_init()
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af02      	add	r7, sp, #8

	//encoder_init();
	displayPtr = hw_getDisplayobjectByPtr();
 8004d36:	f000 fd51 	bl	80057dc <hw_getDisplayobjectByPtr>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4a11      	ldr	r2, [pc, #68]	@ (8004d84 <ui_init+0x54>)
 8004d3e:	6013      	str	r3, [r2, #0]


	display_print(displayPtr, menu, sizeof(menu), 0, 0);
 8004d40:	4b10      	ldr	r3, [pc, #64]	@ (8004d84 <ui_init+0x54>)
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	2241      	movs	r2, #65	@ 0x41
 8004d4c:	490e      	ldr	r1, [pc, #56]	@ (8004d88 <ui_init+0x58>)
 8004d4e:	f000 fa9d 	bl	800528c <display_print>
	display_request(displayPtr, SET_CURSOR_POSITION, 0, 0);
 8004d52:	4b0c      	ldr	r3, [pc, #48]	@ (8004d84 <ui_init+0x54>)
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	2300      	movs	r3, #0
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	f000 fa66 	bl	800522c <display_request>


	while(display_updateRoutine(displayPtr));
 8004d60:	bf00      	nop
 8004d62:	4b08      	ldr	r3, [pc, #32]	@ (8004d84 <ui_init+0x54>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f9d4 	bl	8005114 <display_updateRoutine>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f7      	bne.n	8004d62 <ui_init+0x32>


	fsmInitSingleThreaded(&ui_fsm, _state_listMenu, _action_initSelectArrow, fsmNoAction);
 8004d72:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <ui_init+0x5c>)
 8004d74:	4a06      	ldr	r2, [pc, #24]	@ (8004d90 <ui_init+0x60>)
 8004d76:	4907      	ldr	r1, [pc, #28]	@ (8004d94 <ui_init+0x64>)
 8004d78:	4807      	ldr	r0, [pc, #28]	@ (8004d98 <ui_init+0x68>)
 8004d7a:	f7ff fef9 	bl	8004b70 <fsmInitSingleThreaded>
}
 8004d7e:	bf00      	nop
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	200002f8 	.word	0x200002f8
 8004d88:	20000014 	.word	0x20000014
 8004d8c:	08004d23 	.word	0x08004d23
 8004d90:	08004e81 	.word	0x08004e81
 8004d94:	08004dd5 	.word	0x08004dd5
 8004d98:	200002c8 	.word	0x200002c8

08004d9c <ui_updateRoutine>:

void ui_updateRoutine()
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
	fsmRun(&ui_fsm);
 8004da0:	4802      	ldr	r0, [pc, #8]	@ (8004dac <ui_updateRoutine+0x10>)
 8004da2:	f7ff ff19 	bl	8004bd8 <fsmRun>
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	200002c8 	.word	0x200002c8

08004db0 <ui_displayUpdateRoutine>:
{
	eventBuffer = event;
}

void ui_displayUpdateRoutine()
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	display_updateRoutine(displayPtr);
 8004db4:	4b03      	ldr	r3, [pc, #12]	@ (8004dc4 <ui_displayUpdateRoutine+0x14>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 f9ab 	bl	8005114 <display_updateRoutine>
}
 8004dbe:	bf00      	nop
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200002f8 	.word	0x200002f8

08004dc8 <ui_toggleLED>:

void ui_toggleLED()
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
	hw_toggleLED();
 8004dcc:	f000 fd18 	bl	8005800 <hw_toggleLED>
}
 8004dd0:	bf00      	nop
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <_state_listMenu>:

// stat implementation

void _state_listMenu()
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
	}

	buttonOldState = buttonState;
	*/

	if(_buttonPressed()){
 8004dd8:	f000 f936 	bl	8005048 <_buttonPressed>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d019      	beq.n	8004e16 <_state_listMenu+0x42>
		switch(columnIndex | rowindex){
 8004de2:	4b18      	ldr	r3, [pc, #96]	@ (8004e44 <_state_listMenu+0x70>)
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	4b18      	ldr	r3, [pc, #96]	@ (8004e48 <_state_listMenu+0x74>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d00c      	beq.n	8004e0c <_state_listMenu+0x38>
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	dc0c      	bgt.n	8004e10 <_state_listMenu+0x3c>
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d002      	beq.n	8004e00 <_state_listMenu+0x2c>
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d00a      	beq.n	8004e14 <_state_listMenu+0x40>

			case 0x03:
				break;

			default:
				break;
 8004dfe:	e007      	b.n	8004e10 <_state_listMenu+0x3c>
				fsmTransitionState(&ui_fsm, _state_set_r_s, _action_turnOnCursorBlink);
 8004e00:	4a12      	ldr	r2, [pc, #72]	@ (8004e4c <_state_listMenu+0x78>)
 8004e02:	4913      	ldr	r1, [pc, #76]	@ (8004e50 <_state_listMenu+0x7c>)
 8004e04:	4813      	ldr	r0, [pc, #76]	@ (8004e54 <_state_listMenu+0x80>)
 8004e06:	f7ff ff63 	bl	8004cd0 <fsmTransitionState>
				return;
 8004e0a:	e019      	b.n	8004e40 <_state_listMenu+0x6c>
				break;
 8004e0c:	bf00      	nop
 8004e0e:	e002      	b.n	8004e16 <_state_listMenu+0x42>
				break;
 8004e10:	bf00      	nop
 8004e12:	e000      	b.n	8004e16 <_state_listMenu+0x42>
				break;
 8004e14:	bf00      	nop
		}
	}


	switch(encoder_read()){
 8004e16:	f000 fc65 	bl	80056e4 <encoder_read>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d009      	beq.n	8004e34 <_state_listMenu+0x60>
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	dc0a      	bgt.n	8004e3a <_state_listMenu+0x66>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <_state_listMenu+0x6a>
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d000      	beq.n	8004e2e <_state_listMenu+0x5a>
			_action_moveSelectArrowUp();
			break;


		default:
			break;
 8004e2c:	e005      	b.n	8004e3a <_state_listMenu+0x66>
			_action_moveSelectArrowDown();
 8004e2e:	f000 f89d 	bl	8004f6c <_action_moveSelectArrowDown>
			break;
 8004e32:	e005      	b.n	8004e40 <_state_listMenu+0x6c>
			_action_moveSelectArrowUp();
 8004e34:	f000 f84a 	bl	8004ecc <_action_moveSelectArrowUp>
			break;
 8004e38:	e002      	b.n	8004e40 <_state_listMenu+0x6c>
			break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <_state_listMenu+0x6c>
			return;
 8004e3e:	bf00      	nop
	}
}
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200002fd 	.word	0x200002fd
 8004e48:	200002fc 	.word	0x200002fc
 8004e4c:	08005011 	.word	0x08005011
 8004e50:	08004e59 	.word	0x08004e59
 8004e54:	200002c8 	.word	0x200002c8

08004e58 <_state_set_r_s>:

void _state_set_r_s()
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
	if(_buttonPressed()){
 8004e5c:	f000 f8f4 	bl	8005048 <_buttonPressed>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <_state_set_r_s+0x1a>
		fsmTransitionState(&ui_fsm, _state_listMenu, _action_turnOffCursorBlink);
 8004e66:	4a03      	ldr	r2, [pc, #12]	@ (8004e74 <_state_set_r_s+0x1c>)
 8004e68:	4903      	ldr	r1, [pc, #12]	@ (8004e78 <_state_set_r_s+0x20>)
 8004e6a:	4804      	ldr	r0, [pc, #16]	@ (8004e7c <_state_set_r_s+0x24>)
 8004e6c:	f7ff ff30 	bl	8004cd0 <fsmTransitionState>
		return;
 8004e70:	bf00      	nop
	}
}
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	0800502d 	.word	0x0800502d
 8004e78:	08004dd5 	.word	0x08004dd5
 8004e7c:	200002c8 	.word	0x200002c8

08004e80 <_action_initSelectArrow>:

}

// action implementation
void _action_initSelectArrow()
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af02      	add	r7, sp, #8
	display_request(displayPtr, SET_CURSOR_MODE, INVISIBLE, 0);
 8004e86:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <_action_initSelectArrow+0x40>)
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2102      	movs	r1, #2
 8004e90:	f000 f9cc 	bl	800522c <display_request>
	display_print(displayPtr, ">", 1, rowindex, 0);
 8004e94:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <_action_initSelectArrow+0x40>)
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec4 <_action_initSelectArrow+0x44>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	9200      	str	r2, [sp, #0]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	4909      	ldr	r1, [pc, #36]	@ (8004ec8 <_action_initSelectArrow+0x48>)
 8004ea4:	f000 f9f2 	bl	800528c <display_print>
	display_request(displayPtr, SET_CURSOR_POSITION, rowindex, 0);
 8004ea8:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <_action_initSelectArrow+0x40>)
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <_action_initSelectArrow+0x44>)
 8004eae:	781a      	ldrb	r2, [r3, #0]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	f000 f9ba 	bl	800522c <display_request>
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200002f8 	.word	0x200002f8
 8004ec4:	200002fc 	.word	0x200002fc
 8004ec8:	08005b98 	.word	0x08005b98

08004ecc <_action_moveSelectArrowUp>:

void _action_moveSelectArrowUp()
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af02      	add	r7, sp, #8
	display_print(displayPtr, " ", 1, rowindex & 0x03, columnIndex);
 8004ed2:	4b21      	ldr	r3, [pc, #132]	@ (8004f58 <_action_moveSelectArrowUp+0x8c>)
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	4b21      	ldr	r3, [pc, #132]	@ (8004f5c <_action_moveSelectArrowUp+0x90>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f60 <_action_moveSelectArrowUp+0x94>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	2201      	movs	r2, #1
 8004eea:	491e      	ldr	r1, [pc, #120]	@ (8004f64 <_action_moveSelectArrowUp+0x98>)
 8004eec:	f000 f9ce 	bl	800528c <display_print>
	rowindex--;
 8004ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f5c <_action_moveSelectArrowUp+0x90>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <_action_moveSelectArrowUp+0x90>)
 8004efa:	701a      	strb	r2, [r3, #0]
	rowindex &= 0x07;
 8004efc:	4b17      	ldr	r3, [pc, #92]	@ (8004f5c <_action_moveSelectArrowUp+0x90>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	4b15      	ldr	r3, [pc, #84]	@ (8004f5c <_action_moveSelectArrowUp+0x90>)
 8004f08:	701a      	strb	r2, [r3, #0]
	if(rowindex >0x03) {
 8004f0a:	4b14      	ldr	r3, [pc, #80]	@ (8004f5c <_action_moveSelectArrowUp+0x90>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d903      	bls.n	8004f1a <_action_moveSelectArrowUp+0x4e>
		columnIndex = 8;
 8004f12:	4b13      	ldr	r3, [pc, #76]	@ (8004f60 <_action_moveSelectArrowUp+0x94>)
 8004f14:	2208      	movs	r2, #8
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	e002      	b.n	8004f20 <_action_moveSelectArrowUp+0x54>
	} else {
		columnIndex = 0;
 8004f1a:	4b11      	ldr	r3, [pc, #68]	@ (8004f60 <_action_moveSelectArrowUp+0x94>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]
	}
	display_print(displayPtr, ">", 1, rowindex & 0x03, columnIndex);
 8004f20:	4b0d      	ldr	r3, [pc, #52]	@ (8004f58 <_action_moveSelectArrowUp+0x8c>)
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	4b0d      	ldr	r3, [pc, #52]	@ (8004f5c <_action_moveSelectArrowUp+0x90>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <_action_moveSelectArrowUp+0x94>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	2201      	movs	r2, #1
 8004f38:	490b      	ldr	r1, [pc, #44]	@ (8004f68 <_action_moveSelectArrowUp+0x9c>)
 8004f3a:	f000 f9a7 	bl	800528c <display_print>
	display_request(displayPtr, SET_CURSOR_POSITION, rowindex, columnIndex);
 8004f3e:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <_action_moveSelectArrowUp+0x8c>)
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <_action_moveSelectArrowUp+0x90>)
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <_action_moveSelectArrowUp+0x94>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	f000 f96e 	bl	800522c <display_request>
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	200002f8 	.word	0x200002f8
 8004f5c:	200002fc 	.word	0x200002fc
 8004f60:	200002fd 	.word	0x200002fd
 8004f64:	08005b9c 	.word	0x08005b9c
 8004f68:	08005b98 	.word	0x08005b98

08004f6c <_action_moveSelectArrowDown>:

void _action_moveSelectArrowDown()
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af02      	add	r7, sp, #8
	display_print(displayPtr, " ", 1, rowindex & 0x03, columnIndex);
 8004f72:	4b22      	ldr	r3, [pc, #136]	@ (8004ffc <_action_moveSelectArrowDown+0x90>)
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	4b22      	ldr	r3, [pc, #136]	@ (8005000 <_action_moveSelectArrowDown+0x94>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	4b20      	ldr	r3, [pc, #128]	@ (8005004 <_action_moveSelectArrowDown+0x98>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	4613      	mov	r3, r2
 8004f88:	2201      	movs	r2, #1
 8004f8a:	491f      	ldr	r1, [pc, #124]	@ (8005008 <_action_moveSelectArrowDown+0x9c>)
 8004f8c:	f000 f97e 	bl	800528c <display_print>
	rowindex++;
 8004f90:	4b1b      	ldr	r3, [pc, #108]	@ (8005000 <_action_moveSelectArrowDown+0x94>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	4b19      	ldr	r3, [pc, #100]	@ (8005000 <_action_moveSelectArrowDown+0x94>)
 8004f9a:	701a      	strb	r2, [r3, #0]
	rowindex &= 0x07;
 8004f9c:	4b18      	ldr	r3, [pc, #96]	@ (8005000 <_action_moveSelectArrowDown+0x94>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4b16      	ldr	r3, [pc, #88]	@ (8005000 <_action_moveSelectArrowDown+0x94>)
 8004fa8:	701a      	strb	r2, [r3, #0]
	if(rowindex >0x03) {
 8004faa:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <_action_moveSelectArrowDown+0x94>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d903      	bls.n	8004fba <_action_moveSelectArrowDown+0x4e>
		columnIndex = 8;
 8004fb2:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <_action_moveSelectArrowDown+0x98>)
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e002      	b.n	8004fc0 <_action_moveSelectArrowDown+0x54>
	} else {
		columnIndex = 0;
 8004fba:	4b12      	ldr	r3, [pc, #72]	@ (8005004 <_action_moveSelectArrowDown+0x98>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
	}
	display_print(displayPtr, ">", 1, rowindex & 0x03, columnIndex);
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8004ffc <_action_moveSelectArrowDown+0x90>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <_action_moveSelectArrowDown+0x94>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <_action_moveSelectArrowDown+0x98>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	490c      	ldr	r1, [pc, #48]	@ (800500c <_action_moveSelectArrowDown+0xa0>)
 8004fda:	f000 f957 	bl	800528c <display_print>
	display_request(displayPtr, SET_CURSOR_POSITION, rowindex & 0x03, columnIndex);
 8004fde:	4b07      	ldr	r3, [pc, #28]	@ (8004ffc <_action_moveSelectArrowDown+0x90>)
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	4b07      	ldr	r3, [pc, #28]	@ (8005000 <_action_moveSelectArrowDown+0x94>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <_action_moveSelectArrowDown+0x98>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	f000 f91b 	bl	800522c <display_request>
}
 8004ff6:	bf00      	nop
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	200002f8 	.word	0x200002f8
 8005000:	200002fc 	.word	0x200002fc
 8005004:	200002fd 	.word	0x200002fd
 8005008:	08005b9c 	.word	0x08005b9c
 800500c:	08005b98 	.word	0x08005b98

08005010 <_action_turnOnCursorBlink>:


void _action_turnOnCursorBlink()
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
	display_request(displayPtr, SET_CURSOR_MODE, VISIBLE_BLINK, 0);
 8005014:	4b04      	ldr	r3, [pc, #16]	@ (8005028 <_action_turnOnCursorBlink+0x18>)
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	2300      	movs	r3, #0
 800501a:	2203      	movs	r2, #3
 800501c:	2102      	movs	r1, #2
 800501e:	f000 f905 	bl	800522c <display_request>
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200002f8 	.word	0x200002f8

0800502c <_action_turnOffCursorBlink>:

void _action_turnOffCursorBlink()
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
	display_request(displayPtr, SET_CURSOR_MODE, INVISIBLE, 0);
 8005030:	4b04      	ldr	r3, [pc, #16]	@ (8005044 <_action_turnOffCursorBlink+0x18>)
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	2300      	movs	r3, #0
 8005036:	2200      	movs	r2, #0
 8005038:	2102      	movs	r1, #2
 800503a:	f000 f8f7 	bl	800522c <display_request>
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	200002f8 	.word	0x200002f8

08005048 <_buttonPressed>:


// local functions implementeation

bool _buttonPressed()
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
	static bool buttonOldState = false;
	bool buttonState = encoder_readPushButton();
 800504e:	f000 fb39 	bl	80056c4 <encoder_readPushButton>
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]

	if(buttonState && (buttonState != buttonOldState)){
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d006      	beq.n	800506a <_buttonPressed+0x22>
 800505c:	4b07      	ldr	r3, [pc, #28]	@ (800507c <_buttonPressed+0x34>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	79fa      	ldrb	r2, [r7, #7]
 8005062:	429a      	cmp	r2, r3
 8005064:	d001      	beq.n	800506a <_buttonPressed+0x22>
		return true;
 8005066:	2301      	movs	r3, #1
 8005068:	e003      	b.n	8005072 <_buttonPressed+0x2a>
	}
	buttonOldState = buttonState;
 800506a:	4a04      	ldr	r2, [pc, #16]	@ (800507c <_buttonPressed+0x34>)
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	7013      	strb	r3, [r2, #0]
	return false;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200002fe 	.word	0x200002fe

08005080 <buzzer_init>:

#include "main.h"
#include "tim.h"

void buzzer_init()
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
	//HAL_TIM_Stop(&htim4);
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <display_init>:
		display_delay delay,
		display_writePort writePort,
		display_readWrite readWrite,
		display_enable enable,
		display_regSelect regSelect)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	603b      	str	r3, [r7, #0]
	_regSelect = regSelect;

	_displayCursorRow = 0;
	_displayCursorIndex = 0;
*/
	object->delay = delay;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	601a      	str	r2, [r3, #0]
	object->writePort = writePort;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	605a      	str	r2, [r3, #4]
	object->readWrite =readWrite;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	609a      	str	r2, [r3, #8]
	object->enable = enable;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	60da      	str	r2, [r3, #12]
	object->regSelect = regSelect;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	611a      	str	r2, [r3, #16]

	object->cursorRow = 0;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	object->cursorIndex = 0;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

	object->writeIndex = 0;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 20f7 	strb.w	r2, [r3, #247]	@ 0xf7
	object->workIndex = 0;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8

	display_request(object,SET_FUNCTION, 0, 0);
 80050da:	2300      	movs	r3, #0
 80050dc:	2200      	movs	r2, #0
 80050de:	2103      	movs	r1, #3
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f8a3 	bl	800522c <display_request>
	//display_request(SET_CURSOR_MODE,INVISIBLE,0);
	display_request(object,SET_CURSOR_MODE,BLINK,0);
 80050e6:	2300      	movs	r3, #0
 80050e8:	2202      	movs	r2, #2
 80050ea:	2102      	movs	r1, #2
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f89d 	bl	800522c <display_request>
	display_request(object,SET_CURSOR_MODE,AUTO_INCREMENT,0);
 80050f2:	2300      	movs	r3, #0
 80050f4:	2204      	movs	r2, #4
 80050f6:	2102      	movs	r1, #2
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f897 	bl	800522c <display_request>
	display_request(object,UPDATE_DISPLAY,0,0);
 80050fe:	2300      	movs	r3, #0
 8005100:	2200      	movs	r2, #0
 8005102:	2101      	movs	r1, #1
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f891 	bl	800522c <display_request>
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <display_updateRoutine>:

bool display_updateRoutine(display_t *object)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	uint8_t _wIndex;
	// check for new job
	if(!(object->workIndex != object->writeIndex)) return false;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 20f8 	ldrb.w	r2, [r3, #248]	@ 0xf8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 30f7 	ldrb.w	r3, [r3, #247]	@ 0xf7
 8005128:	429a      	cmp	r2, r3
 800512a:	d101      	bne.n	8005130 <display_updateRoutine+0x1c>
 800512c:	2300      	movs	r3, #0
 800512e:	e078      	b.n	8005222 <display_updateRoutine+0x10e>

	_wIndex = object->workIndex+1;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8005136:	3301      	adds	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]

	switch (object->requestPipeline[0][_wIndex]) {
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 8005144:	2b03      	cmp	r3, #3
 8005146:	d86a      	bhi.n	800521e <display_updateRoutine+0x10a>
 8005148:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <display_updateRoutine+0x3c>)
 800514a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514e:	bf00      	nop
 8005150:	08005161 	.word	0x08005161
 8005154:	08005185 	.word	0x08005185
 8005158:	0800518d 	.word	0x0800518d
 800515c:	0800520f 	.word	0x0800520f

		case SET_CURSOR_POSITION:
			_setCursorPosition(object, object->requestPipeline[1][_wIndex], object->requestPipeline[2][_wIndex]);
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	f893 10b7 	ldrb.w	r1, [r3, #183]	@ 0xb7
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	4413      	add	r3, r2
 8005170:	f893 30d7 	ldrb.w	r3, [r3, #215]	@ 0xd7
 8005174:	461a      	mov	r2, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f8d4 	bl	8005324 <_setCursorPosition>
			_requestHandled(object);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f909 	bl	8005394 <_requestHandled>
			break;
 8005182:	e04d      	b.n	8005220 <display_updateRoutine+0x10c>

		case UPDATE_DISPLAY:
			_writeToDisplay(object);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f9b3 	bl	80054f0 <_writeToDisplay>
			break;
 800518a:	e049      	b.n	8005220 <display_updateRoutine+0x10c>

		case SET_CURSOR_MODE:
			switch (object->requestPipeline[1][_wIndex])
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 8005196:	2b04      	cmp	r3, #4
 8005198:	d834      	bhi.n	8005204 <display_updateRoutine+0xf0>
 800519a:	a201      	add	r2, pc, #4	@ (adr r2, 80051a0 <display_updateRoutine+0x8c>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051b5 	.word	0x080051b5
 80051a4:	080051c5 	.word	0x080051c5
 80051a8:	080051d5 	.word	0x080051d5
 80051ac:	080051e5 	.word	0x080051e5
 80051b0:	080051f5 	.word	0x080051f5
			{
				case INVISIBLE:
					_writeCommandToDisplay(object, CURSOR_MODE_INVISIBLE);
 80051b4:	210c      	movs	r1, #12
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f941 	bl	800543e <_writeCommandToDisplay>
					_requestHandled(object);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f8e9 	bl	8005394 <_requestHandled>
					break;
 80051c2:	e023      	b.n	800520c <display_updateRoutine+0xf8>

				case VISIBLE:
					_writeCommandToDisplay(object, CURSOR_MODE_VISIBLE);
 80051c4:	210e      	movs	r1, #14
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f939 	bl	800543e <_writeCommandToDisplay>
					_requestHandled(object);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f8e1 	bl	8005394 <_requestHandled>
					break;
 80051d2:	e01b      	b.n	800520c <display_updateRoutine+0xf8>

				case BLINK:
					_writeCommandToDisplay(object,CURSOR_MODE_BLINK);
 80051d4:	210d      	movs	r1, #13
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f931 	bl	800543e <_writeCommandToDisplay>
					_requestHandled(object);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f8d9 	bl	8005394 <_requestHandled>
					break;
 80051e2:	e013      	b.n	800520c <display_updateRoutine+0xf8>

				case VISIBLE_BLINK:
					_writeCommandToDisplay(object,CURSOR_MODE_BLINK | CURSOR_MODE_INVISIBLE);
 80051e4:	210d      	movs	r1, #13
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f929 	bl	800543e <_writeCommandToDisplay>
					_requestHandled(object);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f8d1 	bl	8005394 <_requestHandled>
					break;
 80051f2:	e00b      	b.n	800520c <display_updateRoutine+0xf8>

				case AUTO_INCREMENT:
					_writeCommandToDisplay(object, CURSOR_MODE_AUTO_INCREMENT);
 80051f4:	2106      	movs	r1, #6
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f921 	bl	800543e <_writeCommandToDisplay>
					_requestHandled(object);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f8c9 	bl	8005394 <_requestHandled>
					break;
 8005202:	e003      	b.n	800520c <display_updateRoutine+0xf8>

				default:
					_requestHandled(object);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8c5 	bl	8005394 <_requestHandled>
					break;
 800520a:	bf00      	nop
			}
			break;
 800520c:	e008      	b.n	8005220 <display_updateRoutine+0x10c>

		case SET_FUNCTION:
			_writeCommandToDisplay(object, DISPLAY_FUNCTION_SET);
 800520e:	2138      	movs	r1, #56	@ 0x38
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f914 	bl	800543e <_writeCommandToDisplay>
			_requestHandled(object);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f8bc 	bl	8005394 <_requestHandled>
			break;
 800521c:	e000      	b.n	8005220 <display_updateRoutine+0x10c>

		default:
		break;
 800521e:	bf00      	nop
	};
	return true;
 8005220:	2301      	movs	r3, #1
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop

0800522c <display_request>:
void display_request(
		display_t *object,
		display_cmd_t cmd,
		uint8_t var1,
		uint8_t var2)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	461a      	mov	r2, r3
 800523a:	4603      	mov	r3, r0
 800523c:	70fb      	strb	r3, [r7, #3]
 800523e:	460b      	mov	r3, r1
 8005240:	70bb      	strb	r3, [r7, #2]
 8005242:	4613      	mov	r3, r2
 8005244:	707b      	strb	r3, [r7, #1]
	if(cmd == UPDATE_DISPLAY) {
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d115      	bne.n	8005278 <display_request+0x4c>
		_updateDisplayArray(object);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f9cd 	bl	80055ec <_updateDisplayArray>
		_placeRequest(object, SET_CURSOR_POSITION, 0, 0);
 8005252:	2300      	movs	r3, #0
 8005254:	2200      	movs	r2, #0
 8005256:	2100      	movs	r1, #0
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f8b6 	bl	80053ca <_placeRequest>
		_placeRequest(object, UPDATE_DISPLAY, 0, 0);
 800525e:	2300      	movs	r3, #0
 8005260:	2200      	movs	r2, #0
 8005262:	2101      	movs	r1, #1
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f8b0 	bl	80053ca <_placeRequest>
		_placeRequest(object, SET_CURSOR_POSITION, 0, 15);
 800526a:	230f      	movs	r3, #15
 800526c:	2200      	movs	r2, #0
 800526e:	2100      	movs	r1, #0
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f8aa 	bl	80053ca <_placeRequest>
	} else {
		_placeRequest(object, cmd,var1,var2);
	}
}
 8005276:	e005      	b.n	8005284 <display_request+0x58>
		_placeRequest(object, cmd,var1,var2);
 8005278:	787b      	ldrb	r3, [r7, #1]
 800527a:	78ba      	ldrb	r2, [r7, #2]
 800527c:	78f9      	ldrb	r1, [r7, #3]
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f8a3 	bl	80053ca <_placeRequest>
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <display_print>:
		display_t *object,
		char* text,
		uint8_t len,
		uint8_t row,
		uint8_t column)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4611      	mov	r1, r2
 8005298:	461a      	mov	r2, r3
 800529a:	460b      	mov	r3, r1
 800529c:	71fb      	strb	r3, [r7, #7]
 800529e:	4613      	mov	r3, r2
 80052a0:	71bb      	strb	r3, [r7, #6]
	uint8_t index = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75fb      	strb	r3, [r7, #23]

	switch (row){
 80052a6:	79bb      	ldrb	r3, [r7, #6]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d81e      	bhi.n	80052ea <display_print+0x5e>
 80052ac:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <display_print+0x28>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052c5 	.word	0x080052c5
 80052b8:	080052cd 	.word	0x080052cd
 80052bc:	080052d7 	.word	0x080052d7
 80052c0:	080052e1 	.word	0x080052e1
		case 0:
			index = column;
 80052c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052c8:	75fb      	strb	r3, [r7, #23]
			break;
 80052ca:	e00f      	b.n	80052ec <display_print+0x60>

		case 1:
			index = column + 16;
 80052cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052d0:	3310      	adds	r3, #16
 80052d2:	75fb      	strb	r3, [r7, #23]
			break;
 80052d4:	e00a      	b.n	80052ec <display_print+0x60>

		case 2:
			index = column + 32;
 80052d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052da:	3320      	adds	r3, #32
 80052dc:	75fb      	strb	r3, [r7, #23]
			break;
 80052de:	e005      	b.n	80052ec <display_print+0x60>

		case 3:
			index = column + 48;
 80052e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052e4:	3330      	adds	r3, #48	@ 0x30
 80052e6:	75fb      	strb	r3, [r7, #23]
			break;
 80052e8:	e000      	b.n	80052ec <display_print+0x60>

		default:
			break;
 80052ea:	bf00      	nop
	}

	memcpy(&(object->outputArrayMirror[index]),text,len);
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
 80052ee:	3310      	adds	r3, #16
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	3304      	adds	r3, #4
 80052f6:	79fa      	ldrb	r2, [r7, #7]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fc1e 	bl	8005b3c <memcpy>

	display_request(object, SET_CURSOR_POSITION,row,column);
 8005300:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005304:	79ba      	ldrb	r2, [r7, #6]
 8005306:	2100      	movs	r1, #0
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7ff ff8f 	bl	800522c <display_request>
	display_request(object, UPDATE_DISPLAY,0,0);
 800530e:	2300      	movs	r3, #0
 8005310:	2200      	movs	r2, #0
 8005312:	2101      	movs	r1, #1
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff ff89 	bl	800522c <display_request>
}
 800531a:	bf00      	nop
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop

08005324 <_setCursorPosition>:

void _setCursorPosition(display_t *object, uint8_t row, uint8_t column)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
 8005330:	4613      	mov	r3, r2
 8005332:	70bb      	strb	r3, [r7, #2]
	uint8_t position = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]

	//this sets up the upper nibble of  the display DD-RAM according to row
	switch(row)
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	2b03      	cmp	r3, #3
 800533c:	d816      	bhi.n	800536c <_setCursorPosition+0x48>
 800533e:	a201      	add	r2, pc, #4	@ (adr r2, 8005344 <_setCursorPosition+0x20>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005355 	.word	0x08005355
 8005348:	0800535b 	.word	0x0800535b
 800534c:	08005361 	.word	0x08005361
 8005350:	08005367 	.word	0x08005367
	{
		case 0:
			position = 0x00;
 8005354:	2300      	movs	r3, #0
 8005356:	73fb      	strb	r3, [r7, #15]
			break;
 8005358:	e00b      	b.n	8005372 <_setCursorPosition+0x4e>
		case 1:
			position = 0x40;
 800535a:	2340      	movs	r3, #64	@ 0x40
 800535c:	73fb      	strb	r3, [r7, #15]
			break;
 800535e:	e008      	b.n	8005372 <_setCursorPosition+0x4e>
		case 2:
			position = 0x10;
 8005360:	2310      	movs	r3, #16
 8005362:	73fb      	strb	r3, [r7, #15]
			break;
 8005364:	e005      	b.n	8005372 <_setCursorPosition+0x4e>
		case 3:
			position = 0x50;
 8005366:	2350      	movs	r3, #80	@ 0x50
 8005368:	73fb      	strb	r3, [r7, #15]
			break;
 800536a:	e002      	b.n	8005372 <_setCursorPosition+0x4e>
		//when row exceeds the limit of minimum one row or four rows
		default:
			position = 0x00;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]
			break;
 8005370:	bf00      	nop
	}

	//this sets up the lower nibble of  the display DD-RAM according to column
	if(column <= 15 || column >= 0){
		position |= column;
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	78bb      	ldrb	r3, [r7, #2]
 8005376:	4313      	orrs	r3, r2
 8005378:	73fb      	strb	r3, [r7, #15]
	}else{
		//when column is greater than 16 or smaller then one, it is set to one
		position |= 0;
	}
	_writeCommandToDisplay(object, (position | DD_RAM_ADDR_SET));
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005380:	b2db      	uxtb	r3, r3
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f85a 	bl	800543e <_writeCommandToDisplay>
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop

08005394 <_requestHandled>:

void _requestHandled(display_t *object)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	object->workIndex++;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 80053a2:	3301      	adds	r3, #1
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
	object->workIndex &= 0x1F;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <_placeRequest>:

void _placeRequest(display_t *object, uint8_t mode, uint8_t var1, uint8_t var2)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	4608      	mov	r0, r1
 80053d4:	4611      	mov	r1, r2
 80053d6:	461a      	mov	r2, r3
 80053d8:	4603      	mov	r3, r0
 80053da:	70fb      	strb	r3, [r7, #3]
 80053dc:	460b      	mov	r3, r1
 80053de:	70bb      	strb	r3, [r7, #2]
 80053e0:	4613      	mov	r3, r2
 80053e2:	707b      	strb	r3, [r7, #1]
	uint8_t _wIndex;
	object->writeIndex++;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 30f7 	ldrb.w	r3, [r3, #247]	@ 0xf7
 80053ea:	3301      	adds	r3, #1
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f883 20f7 	strb.w	r2, [r3, #247]	@ 0xf7
	object->writeIndex &= 0x1F;	//overflow reset
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 30f7 	ldrb.w	r3, [r3, #247]	@ 0xf7
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f883 20f7 	strb.w	r2, [r3, #247]	@ 0xf7

	_wIndex = object->writeIndex;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 30f7 	ldrb.w	r3, [r3, #247]	@ 0xf7
 800540c:	73fb      	strb	r3, [r7, #15]

	object->requestPipeline[0][_wIndex] = mode;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	78fa      	ldrb	r2, [r7, #3]
 8005416:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
	object->requestPipeline[1][_wIndex] = var1;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4413      	add	r3, r2
 8005420:	78ba      	ldrb	r2, [r7, #2]
 8005422:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
	object->requestPipeline[2][_wIndex] = var2;
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	4413      	add	r3, r2
 800542c:	787a      	ldrb	r2, [r7, #1]
 800542e:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <_writeCommandToDisplay>:

void _writeCommandToDisplay(display_t *object, uint8_t cmd)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	70fb      	strb	r3, [r7, #3]
	//while(read_busy_pin() & PIN_BUSY);

	//clear register select pin
	//HAL_GPIO_WritePin(DISPLAY_REGISTER_SELECT_GPIO_Port, DISPLAY_REGISTER_SELECT_Pin, 0);
	object->regSelect(false);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2000      	movs	r0, #0
 8005450:	4798      	blx	r3

	//set mode write to display
	//HAL_GPIO_WritePin(DISPLAY_READ_WRITE_GPIO_Port, DISPLAY_READ_WRITE_Pin, 0);
	object->readWrite(false);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2000      	movs	r0, #0
 8005458:	4798      	blx	r3

	//set enable pin
	//HAL_GPIO_WritePin(DISPLAY_ENABLE_GPIO_Port, DISPLAY_ENABLE_Pin, 1);
	object->enable(true);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	2001      	movs	r0, #1
 8005460:	4798      	blx	r3

	//for(i=0 ; i< 100/*42,43,44,45*/;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4798      	blx	r3

	//GPIOB->ODR &= 0xF403;
	//GPIOB->ODR |= (cmd & 0x07) | ((cmd & 0x08) << 10) | ((cmd & 0xF0) << 12);
	object->writePort(cmd);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	4610      	mov	r0, r2
 8005470:	4798      	blx	r3

	//for(i=0 ; i< 100/*42,43,44,45*/;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4798      	blx	r3

	//clear enable pin
	//HAL_GPIO_WritePin(DISPLAY_ENABLE_GPIO_Port, DISPLAY_ENABLE_Pin, 0);
	object->enable(false);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2000      	movs	r0, #0
 800547e:	4798      	blx	r3

	//for(i=0 ; i< 50/*42,43,44,45*/;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4798      	blx	r3

	//set resgister select pin
	//HAL_GPIO_WritePin(DISPLAY_REGISTER_SELECT_GPIO_Port, DISPLAY_REGISTER_SELECT_Pin, 1);
	object->regSelect(true);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2001      	movs	r0, #1
 800548c:	4798      	blx	r3

	//for(i=0 ; i< 50/*42,43,44,45*/;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4798      	blx	r3
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <_writeCharToDisplay>:

void _writeCharToDisplay(display_t *object, char data)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]

	//while(read_busy_pin() & PIN_BUSY);
	uint8_t i=0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	73fb      	strb	r3, [r7, #15]

	//set enable pin
	//HAL_GPIO_WritePin(DISPLAY_ENABLE_GPIO_Port, DISPLAY_ENABLE_Pin, 1);
	object->enable(true);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2001      	movs	r0, #1
 80054b2:	4798      	blx	r3


	//for(i=0 ; i< 50;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4798      	blx	r3

	//set mode write to display
	//HAL_GPIO_WritePin(DISPLAY_READ_WRITE_GPIO_Port, DISPLAY_READ_WRITE_Pin, 0);
	object->readWrite(false);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2000      	movs	r0, #0
 80054c0:	4798      	blx	r3

	//asm volatile ("nop");

	//for(i=0 ; i< 100;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4798      	blx	r3

	//GPIOB->ODR &= 0xF403;
	//GPIOB->ODR |= (data & 0x07) | ((data & 0x08) << 10) | ((data & 0xF0) << 12);
	object->writePort(data);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	78fa      	ldrb	r2, [r7, #3]
 80054ce:	4610      	mov	r0, r2
 80054d0:	4798      	blx	r3

	//for(i=0 ; i< 100;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4798      	blx	r3

	//clear enable pin
	//HAL_GPIO_WritePin(DISPLAY_ENABLE_GPIO_Port, DISPLAY_ENABLE_Pin, 0);
	object->enable(false);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2000      	movs	r0, #0
 80054de:	4798      	blx	r3

	//for(i=0 ; i< 50;i++){}
	//HAL_Delay(1);
	object->delay();
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4798      	blx	r3
}
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <_writeToDisplay>:

void _writeToDisplay(display_t *object)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	switch(object->state){
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d86b      	bhi.n	80055da <_writeToDisplay+0xea>
 8005502:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <_writeToDisplay+0x18>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005519 	.word	0x08005519
 800550c:	08005533 	.word	0x08005533
 8005510:	08005577 	.word	0x08005577
 8005514:	08005589 	.word	0x08005589
		case setCursorToTop:
			//cursor set to the first position in row 0 (first position of the first display array)
			_writeCommandToDisplay(object, 0x00|DD_RAM_ADDR_SET);
 8005518:	2180      	movs	r1, #128	@ 0x80
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff ff8f 	bl	800543e <_writeCommandToDisplay>

			//switch mode
			object->state = firstLines;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

			//reset display_cursor_index
			object->cursorIndex = 0;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
			break;
 8005530:	e058      	b.n	80055e4 <_writeToDisplay+0xf4>

		case firstLines:
			//write first display array
			_writeCharToDisplay(object, object->outputArray[object->cursorIndex]);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8005538:	b2db      	uxtb	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4413      	add	r3, r2
 8005540:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff ffa8 	bl	800549c <_writeCharToDisplay>
			if (object->cursorIndex == 32){
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b20      	cmp	r3, #32
 8005556:	d104      	bne.n	8005562 <_writeToDisplay+0x72>
				 //switch mode when cursor has reached the end of the first display array
				object->state = setCursorToMiddle;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
			}else{
				object->cursorIndex++;
			}
			break;
 8005560:	e040      	b.n	80055e4 <_writeToDisplay+0xf4>
				object->cursorIndex++;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8005568:	b2db      	uxtb	r3, r3
 800556a:	3301      	adds	r3, #1
 800556c:	b2da      	uxtb	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
			break;
 8005574:	e036      	b.n	80055e4 <_writeToDisplay+0xf4>

		case setCursorToMiddle:
			//cursor set to the first position in row 1 (first position of the second display array)
			_writeCommandToDisplay(object, 0x40|DD_RAM_ADDR_SET);
 8005576:	21c0      	movs	r1, #192	@ 0xc0
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff60 	bl	800543e <_writeCommandToDisplay>

			//switch mode
			object->state = secondLines;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2203      	movs	r2, #3
 8005582:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
			break;
 8005586:	e02d      	b.n	80055e4 <_writeToDisplay+0xf4>

		case secondLines:
			//write second display array
			_writeCharToDisplay(object, object->outputArray[object->cursorIndex]);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff ff7d 	bl	800549c <_writeCharToDisplay>
			if (object->cursorIndex == 63){
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80055ac:	d10b      	bne.n	80055c6 <_writeToDisplay+0xd6>
				object->cursorIndex = 0;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

				 //switch mode when cursor has reached the end of the second display array
				object->state = setCursorToTop;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
				_requestHandled(object);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff fee8 	bl	8005394 <_requestHandled>
			}else{
				object->cursorIndex++;
			}
			break;
 80055c4:	e00e      	b.n	80055e4 <_writeToDisplay+0xf4>
				object->cursorIndex++;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	3301      	adds	r3, #1
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
			break;
 80055d8:	e004      	b.n	80055e4 <_writeToDisplay+0xf4>

		default:
			//switch mode
			object->state = setCursorToTop;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
			break;
 80055e2:	bf00      	nop
	}
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <_updateDisplayArray>:

void _updateDisplayArray(display_t *object)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	uint8_t i  = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i<16; i++) {
 80055f8:	2300      	movs	r3, #0
 80055fa:	73fb      	strb	r3, [r7, #15]
 80055fc:	e00c      	b.n	8005618 <_updateDisplayArray+0x2c>
		object->outputArray[i] = object->outputArrayMirror[i];
 80055fe:	7bfa      	ldrb	r2, [r7, #15]
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	440a      	add	r2, r1
 8005606:	7d11      	ldrb	r1, [r2, #20]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4413      	add	r3, r2
 800560c:	460a      	mov	r2, r1
 800560e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	for(i = 0; i<16; i++) {
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	3301      	adds	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b0f      	cmp	r3, #15
 800561c:	d9ef      	bls.n	80055fe <_updateDisplayArray+0x12>
	}
	for(i = 0; i<16; i++) {
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]
 8005622:	e00f      	b.n	8005644 <_updateDisplayArray+0x58>
		object->outputArray[i+32] = object->outputArrayMirror[i+16];
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	f103 0210 	add.w	r2, r3, #16
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	3320      	adds	r3, #32
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	440a      	add	r2, r1
 8005632:	7d11      	ldrb	r1, [r2, #20]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4413      	add	r3, r2
 8005638:	460a      	mov	r2, r1
 800563a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	for(i = 0; i<16; i++) {
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	3301      	adds	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b0f      	cmp	r3, #15
 8005648:	d9ec      	bls.n	8005624 <_updateDisplayArray+0x38>
	}
	for(i = 0; i<16; i++) {
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
 800564e:	e00f      	b.n	8005670 <_updateDisplayArray+0x84>
		object->outputArray[i+16] = object->outputArrayMirror[i+32];
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	f103 0220 	add.w	r2, r3, #32
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	3310      	adds	r3, #16
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	440a      	add	r2, r1
 800565e:	7d11      	ldrb	r1, [r2, #20]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	460a      	mov	r2, r1
 8005666:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	for(i = 0; i<16; i++) {
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	3301      	adds	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b0f      	cmp	r3, #15
 8005674:	d9ec      	bls.n	8005650 <_updateDisplayArray+0x64>
	}
	for(i = 0; i<16; i++) {
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
 800567a:	e00f      	b.n	800569c <_updateDisplayArray+0xb0>
		object->outputArray[i+48] = object->outputArrayMirror[i+48];
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	3330      	adds	r3, #48	@ 0x30
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	440a      	add	r2, r1
 800568a:	7d11      	ldrb	r1, [r2, #20]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4413      	add	r3, r2
 8005690:	460a      	mov	r2, r1
 8005692:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	for(i = 0; i<16; i++) {
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	3301      	adds	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	2b0f      	cmp	r3, #15
 80056a0:	d9ec      	bls.n	800567c <_updateDisplayArray+0x90>
	}
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <encoder_init>:
#include <stdint.h>

const uint32_t _c_debounce_tick_delay = 10;

void encoder_init()
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80056b4:	213c      	movs	r1, #60	@ 0x3c
 80056b6:	4802      	ldr	r0, [pc, #8]	@ (80056c0 <encoder_init+0x10>)
 80056b8:	f7fd ffa4 	bl	8003604 <HAL_TIM_Encoder_Start>
}
 80056bc:	bf00      	nop
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	200001b0 	.word	0x200001b0

080056c4 <encoder_readPushButton>:

bool encoder_readPushButton()
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0

	//lastTick = currentTick;
	lastButtonState = currentButtonState;
	return false;
	*/
	return HAL_GPIO_ReadPin(ENCODER_BUTTON_GPIO_Port, ENCODER_BUTTON_Pin);
 80056c8:	2110      	movs	r1, #16
 80056ca:	4805      	ldr	r0, [pc, #20]	@ (80056e0 <encoder_readPushButton+0x1c>)
 80056cc:	f7fc f800 	bl	80016d0 <HAL_GPIO_ReadPin>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	b2db      	uxtb	r3, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40020800 	.word	0x40020800

080056e4 <encoder_read>:

encoder_movement_t encoder_read()
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
	static uint32_t previousEncoderPosition = 0;

	uint32_t encoderPosition = __HAL_TIM_GET_COUNTER(&htim3);
 80056ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005724 <encoder_read+0x40>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	607b      	str	r3, [r7, #4]

	int32_t encoderDiff = (int32_t)(encoderPosition - previousEncoderPosition);
 80056f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005728 <encoder_read+0x44>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	603b      	str	r3, [r7, #0]

	if(encoderDiff == 0){
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <encoder_read+0x22>
		return NO_MOVEMENT;
 8005702:	2300      	movs	r3, #0
 8005704:	e008      	b.n	8005718 <encoder_read+0x34>
	}

	previousEncoderPosition = encoderPosition;
 8005706:	4a08      	ldr	r2, [pc, #32]	@ (8005728 <encoder_read+0x44>)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6013      	str	r3, [r2, #0]
		}
		return MOVED_COUNTERCLOCKWISE_FAST;
	}
	*/

	if(encoderDiff > 0){
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	dd01      	ble.n	8005716 <encoder_read+0x32>
		return MOVED_CLOCKWISE;
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <encoder_read+0x34>
	}

	return MOVED_COUNTERCLOCKWISE;
 8005716:	2302      	movs	r3, #2
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	200001b0 	.word	0x200001b0
 8005728:	20000300 	.word	0x20000300

0800572c <hw_init>:
void _disp_readWrite(bool state);
void _disp_regSelect(bool state);


void hw_init()
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b091      	sub	sp, #68	@ 0x44
 8005730:	af02      	add	r7, sp, #8
	uint8_t rowIndex = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t rowIndex_old = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint32_t tickNow = HAL_GetTick();
 800573e:	f7fb fd2d 	bl	800119c <HAL_GetTick>
 8005742:	6338      	str	r0, [r7, #48]	@ 0x30
	uint32_t displayLastTick = tickNow;
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t encoderLastTick = tickNow;
 8005748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t LEDLastTick = tickNow;
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24

	//char clear[] = "                                                                ";

	uint8_t turnedRight_msg[] = "Turned Right!\n\r";
 8005750:	4b16      	ldr	r3, [pc, #88]	@ (80057ac <hw_init+0x80>)
 8005752:	f107 0414 	add.w	r4, r7, #20
 8005756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t turnedLeft_msg[] = "Turned Left!\n\r";
 800575c:	4b14      	ldr	r3, [pc, #80]	@ (80057b0 <hw_init+0x84>)
 800575e:	1d3c      	adds	r4, r7, #4
 8005760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005762:	c407      	stmia	r4!, {r0, r1, r2}
 8005764:	8023      	strh	r3, [r4, #0]
 8005766:	3402      	adds	r4, #2
 8005768:	0c1b      	lsrs	r3, r3, #16
 800576a:	7023      	strb	r3, [r4, #0]

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800576c:	2100      	movs	r1, #0
 800576e:	4811      	ldr	r0, [pc, #68]	@ (80057b4 <hw_init+0x88>)
 8005770:	f7fd fdf2 	bl	8003358 <HAL_TIM_PWM_Start>

	// seccond level
	pcf8575_init(&ioexpander, 0x20, _i2cRead, _i2cWrite, 0x00, 0x00);
 8005774:	2300      	movs	r3, #0
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	2300      	movs	r3, #0
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	4b0e      	ldr	r3, [pc, #56]	@ (80057b8 <hw_init+0x8c>)
 800577e:	4a0f      	ldr	r2, [pc, #60]	@ (80057bc <hw_init+0x90>)
 8005780:	2120      	movs	r1, #32
 8005782:	480f      	ldr	r0, [pc, #60]	@ (80057c0 <hw_init+0x94>)
 8005784:	f000 f8d8 	bl	8005938 <pcf8575_init>

	encoder_init();
 8005788:	f7ff ff92 	bl	80056b0 <encoder_init>

	buzzer_init();
 800578c:	f7ff fc78 	bl	8005080 <buzzer_init>


	// third level

	display_init(
 8005790:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <hw_init+0x98>)
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	4b0c      	ldr	r3, [pc, #48]	@ (80057c8 <hw_init+0x9c>)
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <hw_init+0xa0>)
 800579a:	4a0d      	ldr	r2, [pc, #52]	@ (80057d0 <hw_init+0xa4>)
 800579c:	490d      	ldr	r1, [pc, #52]	@ (80057d4 <hw_init+0xa8>)
 800579e:	480e      	ldr	r0, [pc, #56]	@ (80057d8 <hw_init+0xac>)
 80057a0:	f7ff fc75 	bl	800508e <display_init>
			displayLastTick = tickNow;
			display_updateRoutine(&display);
		}
	}
	*/
}
 80057a4:	bf00      	nop
 80057a6:	373c      	adds	r7, #60	@ 0x3c
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd90      	pop	{r4, r7, pc}
 80057ac:	08005ba0 	.word	0x08005ba0
 80057b0:	08005bb0 	.word	0x08005bb0
 80057b4:	20000168 	.word	0x20000168
 80057b8:	08005819 	.word	0x08005819
 80057bc:	0800584d 	.word	0x0800584d
 80057c0:	20000304 	.word	0x20000304
 80057c4:	08005915 	.word	0x08005915
 80057c8:	08005881 	.word	0x08005881
 80057cc:	080058f1 	.word	0x080058f1
 80057d0:	080058cd 	.word	0x080058cd
 80057d4:	080058a5 	.word	0x080058a5
 80057d8:	20000314 	.word	0x20000314

080057dc <hw_getDisplayobjectByPtr>:


display_t* hw_getDisplayobjectByPtr()
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
	return &display;
 80057e0:	4b02      	ldr	r3, [pc, #8]	@ (80057ec <hw_getDisplayobjectByPtr+0x10>)
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	20000314 	.word	0x20000314

080057f0 <hw_getTick>:

uint32_t hw_getTick()
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80057f4:	f7fb fcd2 	bl	800119c <HAL_GetTick>
 80057f8:	4603      	mov	r3, r0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <hw_toggleLED>:

void hw_toggleLED()
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
	pcf8575_togglePin(&ioexpander, PCF8575_IOPORT_0, 7);
 8005804:	2207      	movs	r2, #7
 8005806:	2100      	movs	r1, #0
 8005808:	4802      	ldr	r0, [pc, #8]	@ (8005814 <hw_toggleLED+0x14>)
 800580a:	f000 f917 	bl	8005a3c <pcf8575_togglePin>
}
 800580e:	bf00      	nop
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000304 	.word	0x20000304

08005818 <_i2cWrite>:

// interface functions pcf8575

void _i2cWrite(uint8_t address, uint8_t* data,uint8_t len)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af02      	add	r7, sp, #8
 800581e:	4603      	mov	r3, r0
 8005820:	6039      	str	r1, [r7, #0]
 8005822:	71fb      	strb	r3, [r7, #7]
 8005824:	4613      	mov	r3, r2
 8005826:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, address, data, len, 10000);
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	b299      	uxth	r1, r3
 800582c:	79bb      	ldrb	r3, [r7, #6]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005834:	9200      	str	r2, [sp, #0]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	4803      	ldr	r0, [pc, #12]	@ (8005848 <_i2cWrite+0x30>)
 800583a:	f7fc f8bf 	bl	80019bc <HAL_I2C_Master_Transmit>
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000074 	.word	0x20000074

0800584c <_i2cRead>:

void _i2cRead(uint8_t address, uint8_t* data, uint8_t len)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af02      	add	r7, sp, #8
 8005852:	4603      	mov	r3, r0
 8005854:	6039      	str	r1, [r7, #0]
 8005856:	71fb      	strb	r3, [r7, #7]
 8005858:	4613      	mov	r3, r2
 800585a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Receive(&hi2c1, address, data, len, 10000);
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	b299      	uxth	r1, r3
 8005860:	79bb      	ldrb	r3, [r7, #6]
 8005862:	b29b      	uxth	r3, r3
 8005864:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005868:	9200      	str	r2, [sp, #0]
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	4803      	ldr	r0, [pc, #12]	@ (800587c <_i2cRead+0x30>)
 800586e:	f7fc f9a3 	bl	8001bb8 <HAL_I2C_Master_Receive>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000074 	.word	0x20000074

08005880 <_disp_enable>:

// interface functions display

void _disp_enable(bool state)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	71fb      	strb	r3, [r7, #7]
	pcf8575_writePin(&ioexpander, PCF8575_IOPORT_0, 2, state);
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2202      	movs	r2, #2
 800588e:	2100      	movs	r1, #0
 8005890:	4803      	ldr	r0, [pc, #12]	@ (80058a0 <_disp_enable+0x20>)
 8005892:	f000 f890 	bl	80059b6 <pcf8575_writePin>
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000304 	.word	0x20000304

080058a4 <_disp_delay>:

void _disp_delay()
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
	uint32_t i = 500;
 80058aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80058ae:	607b      	str	r3, [r7, #4]
	for(;i>0;i--);
 80058b0:	e002      	b.n	80058b8 <_disp_delay+0x14>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f9      	bne.n	80058b2 <_disp_delay+0xe>
	//HAL_Delay(1);
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <_disp_writePort>:

void _disp_writePort(uint8_t data)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	71fb      	strb	r3, [r7, #7]
	pcf8575_writePort(&ioexpander, PCF8575_IOPORT_1, data);
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	461a      	mov	r2, r3
 80058da:	2101      	movs	r1, #1
 80058dc:	4803      	ldr	r0, [pc, #12]	@ (80058ec <_disp_writePort+0x20>)
 80058de:	f000 f851 	bl	8005984 <pcf8575_writePort>
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000304 	.word	0x20000304

080058f0 <_disp_readWrite>:

void _disp_readWrite(bool state)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
	pcf8575_writePin(&ioexpander, PCF8575_IOPORT_0, 1, state);
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	2201      	movs	r2, #1
 80058fe:	2100      	movs	r1, #0
 8005900:	4803      	ldr	r0, [pc, #12]	@ (8005910 <_disp_readWrite+0x20>)
 8005902:	f000 f858 	bl	80059b6 <pcf8575_writePin>
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000304 	.word	0x20000304

08005914 <_disp_regSelect>:

void _disp_regSelect(bool state)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
	pcf8575_writePin(&ioexpander, PCF8575_IOPORT_0, 0, state);
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	2200      	movs	r2, #0
 8005922:	2100      	movs	r1, #0
 8005924:	4803      	ldr	r0, [pc, #12]	@ (8005934 <_disp_regSelect+0x20>)
 8005926:	f000 f846 	bl	80059b6 <pcf8575_writePin>
}
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000304 	.word	0x20000304

08005938 <pcf8575_init>:
		uint8_t i2cAddress,
		i2c_read_t i2cRead,
		i2c_write_t i2cWrite,
		uint8_t port0,
		uint8_t port1)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	607a      	str	r2, [r7, #4]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	460b      	mov	r3, r1
 8005946:	72fb      	strb	r3, [r7, #11]
	// init objects
	object->address = (pcf8575_I2CaddrBase | (i2cAddress & pcf8575_I2CaddrMask)) << 1;
 8005948:	2207      	movs	r2, #7
 800594a:	7afb      	ldrb	r3, [r7, #11]
 800594c:	4013      	ands	r3, r2
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2220      	movs	r2, #32
 8005952:	4313      	orrs	r3, r2
 8005954:	b2db      	uxtb	r3, r3
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	b2da      	uxtb	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	701a      	strb	r2, [r3, #0]
	object->_i2cRead = i2cRead;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	605a      	str	r2, [r3, #4]
	object->_i2cWrite = i2cWrite;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	609a      	str	r2, [r3, #8]
	object->_port0Buf = port0;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	7e3a      	ldrb	r2, [r7, #24]
 800596e:	731a      	strb	r2, [r3, #12]
	object->_port1Buf = port1;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	7f3a      	ldrb	r2, [r7, #28]
 8005974:	735a      	strb	r2, [r3, #13]

	// init hardware
	_updatePorts(object);
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f89e 	bl	8005ab8 <_updatePorts>
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <pcf8575_writePort>:

void pcf8575_writePort(
		pcf8575_t *object,
		pcf8575_IOport_t port,
		uint8_t data)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
 8005990:	4613      	mov	r3, r2
 8005992:	70bb      	strb	r3, [r7, #2]
	if(port == PCF8575_IOPORT_0) {
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d103      	bne.n	80059a2 <pcf8575_writePort+0x1e>
		object->_port0Buf = data;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	78ba      	ldrb	r2, [r7, #2]
 800599e:	731a      	strb	r2, [r3, #12]
 80059a0:	e002      	b.n	80059a8 <pcf8575_writePort+0x24>

	} else {
		object->_port1Buf = data;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	78ba      	ldrb	r2, [r7, #2]
 80059a6:	735a      	strb	r2, [r3, #13]
	}
	_updatePorts(object);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f885 	bl	8005ab8 <_updatePorts>
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <pcf8575_writePin>:
void pcf8575_writePin(
		pcf8575_t *object,
		pcf8575_IOport_t port,
		uint8_t pin,
		bool state)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	4608      	mov	r0, r1
 80059c0:	4611      	mov	r1, r2
 80059c2:	461a      	mov	r2, r3
 80059c4:	4603      	mov	r3, r0
 80059c6:	70fb      	strb	r3, [r7, #3]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70bb      	strb	r3, [r7, #2]
 80059cc:	4613      	mov	r3, r2
 80059ce:	707b      	strb	r3, [r7, #1]
	uint8_t *pBuf = NULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
	// only pin numbers 0 to 7 allowed
	pin &= 0x07;
 80059d4:	78bb      	ldrb	r3, [r7, #2]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	70bb      	strb	r3, [r7, #2]

	if(port == PCF8575_IOPORT_0){
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <pcf8575_writePin+0x34>
		pBuf = &(object->_port0Buf);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	330c      	adds	r3, #12
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	e002      	b.n	80059f0 <pcf8575_writePin+0x3a>
	} else {
		pBuf = &(object->_port1Buf);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	330d      	adds	r3, #13
 80059ee:	60fb      	str	r3, [r7, #12]
	}

	*pBuf &= ~(1 << pin);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	b25a      	sxtb	r2, r3
 80059f6:	78bb      	ldrb	r3, [r7, #2]
 80059f8:	2101      	movs	r1, #1
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	b25b      	sxtb	r3, r3
 8005a00:	43db      	mvns	r3, r3
 8005a02:	b25b      	sxtb	r3, r3
 8005a04:	4013      	ands	r3, r2
 8005a06:	b25b      	sxtb	r3, r3
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	701a      	strb	r2, [r3, #0]

	if(state){
 8005a0e:	787b      	ldrb	r3, [r7, #1]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00c      	beq.n	8005a2e <pcf8575_writePin+0x78>
		*pBuf |= state << pin;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	b25a      	sxtb	r2, r3
 8005a1a:	7879      	ldrb	r1, [r7, #1]
 8005a1c:	78bb      	ldrb	r3, [r7, #2]
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	b25b      	sxtb	r3, r3
 8005a24:	4313      	orrs	r3, r2
 8005a26:	b25b      	sxtb	r3, r3
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	701a      	strb	r2, [r3, #0]
	}

	_updatePorts(object);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f842 	bl	8005ab8 <_updatePorts>
}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <pcf8575_togglePin>:

void pcf8575_togglePin(
		pcf8575_t *object,
		pcf8575_IOport_t port,
		uint8_t pin)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	70bb      	strb	r3, [r7, #2]
	uint8_t *pBuf = NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
	// only pin numbers 0 to 7 allowed
	pin &= 0x07;
 8005a50:	78bb      	ldrb	r3, [r7, #2]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	70bb      	strb	r3, [r7, #2]

	if(port == PCF8575_IOPORT_0){
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d103      	bne.n	8005a66 <pcf8575_togglePin+0x2a>
		pBuf = &(object->_port0Buf);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	330c      	adds	r3, #12
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	e002      	b.n	8005a6c <pcf8575_togglePin+0x30>
	} else {
		pBuf = &(object->_port1Buf);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	330d      	adds	r3, #13
 8005a6a:	60fb      	str	r3, [r7, #12]
	}

	*pBuf ^= (1 << pin);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b25a      	sxtb	r2, r3
 8005a72:	78bb      	ldrb	r3, [r7, #2]
 8005a74:	2101      	movs	r1, #1
 8005a76:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7a:	b25b      	sxtb	r3, r3
 8005a7c:	4053      	eors	r3, r2
 8005a7e:	b25b      	sxtb	r3, r3
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	701a      	strb	r2, [r3, #0]
	_updatePorts(object);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f816 	bl	8005ab8 <_updatePorts>
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <_write>:
{
	object->_i2cRead(object->address, data, len);
}

void _write(pcf8575_t *object, uint8_t *data, uint8_t len)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	71fb      	strb	r3, [r7, #7]
	object->_i2cWrite(object->address, data, len);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	7810      	ldrb	r0, [r2, #0]
 8005aaa:	79fa      	ldrb	r2, [r7, #7]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	4798      	blx	r3
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <_updatePorts>:

void _updatePorts(pcf8575_t *object)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {object->_port0Buf, object->_port1Buf};
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	7b1b      	ldrb	r3, [r3, #12]
 8005ac4:	733b      	strb	r3, [r7, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	7b5b      	ldrb	r3, [r3, #13]
 8005aca:	737b      	strb	r3, [r7, #13]
	_write(object, data, 2);
 8005acc:	f107 030c 	add.w	r3, r7, #12
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff ffdd 	bl	8005a94 <_write>
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <memset>:
 8005ae2:	4402      	add	r2, r0
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d100      	bne.n	8005aec <memset+0xa>
 8005aea:	4770      	bx	lr
 8005aec:	f803 1b01 	strb.w	r1, [r3], #1
 8005af0:	e7f9      	b.n	8005ae6 <memset+0x4>
	...

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4d0d      	ldr	r5, [pc, #52]	@ (8005b2c <__libc_init_array+0x38>)
 8005af8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b30 <__libc_init_array+0x3c>)
 8005afa:	1b64      	subs	r4, r4, r5
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	2600      	movs	r6, #0
 8005b00:	42a6      	cmp	r6, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	4d0b      	ldr	r5, [pc, #44]	@ (8005b34 <__libc_init_array+0x40>)
 8005b06:	4c0c      	ldr	r4, [pc, #48]	@ (8005b38 <__libc_init_array+0x44>)
 8005b08:	f000 f826 	bl	8005b58 <_init>
 8005b0c:	1b64      	subs	r4, r4, r5
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	2600      	movs	r6, #0
 8005b12:	42a6      	cmp	r6, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1c:	4798      	blx	r3
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b26:	4798      	blx	r3
 8005b28:	3601      	adds	r6, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	08005be0 	.word	0x08005be0
 8005b30:	08005be0 	.word	0x08005be0
 8005b34:	08005be0 	.word	0x08005be0
 8005b38:	08005be4 	.word	0x08005be4

08005b3c <memcpy>:
 8005b3c:	440a      	add	r2, r1
 8005b3e:	4291      	cmp	r1, r2
 8005b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b44:	d100      	bne.n	8005b48 <memcpy+0xc>
 8005b46:	4770      	bx	lr
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b52:	4291      	cmp	r1, r2
 8005b54:	d1f9      	bne.n	8005b4a <memcpy+0xe>
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <_init>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr

08005b64 <_fini>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	bf00      	nop
 8005b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6a:	bc08      	pop	{r3}
 8005b6c:	469e      	mov	lr, r3
 8005b6e:	4770      	bx	lr
