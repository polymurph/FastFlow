
FastFlow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800516c  0800516c  0000616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f4  080051f4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080051f4  080051f4  000061f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051fc  080051fc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051fc  080051fc  000061fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005200  08005200  00006200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005204  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000000c  08005210  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005210  00007328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136a7  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f29  00000000  00000000  0001a6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0001d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e56  00000000  00000000  0001e868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177d7  00000000  00000000  0001f6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e80  00000000  00000000  00036e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009266f  00000000  00000000  0004ed15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e1384  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf0  00000000  00000000  000e140c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e5ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005154 	.word	0x08005154

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005154 	.word	0x08005154

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	4b4a      	ldr	r3, [pc, #296]	@ (800060c <MX_GPIO_Init+0x144>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a49      	ldr	r2, [pc, #292]	@ (800060c <MX_GPIO_Init+0x144>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b47      	ldr	r3, [pc, #284]	@ (800060c <MX_GPIO_Init+0x144>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	4b43      	ldr	r3, [pc, #268]	@ (800060c <MX_GPIO_Init+0x144>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a42      	ldr	r2, [pc, #264]	@ (800060c <MX_GPIO_Init+0x144>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b40      	ldr	r3, [pc, #256]	@ (800060c <MX_GPIO_Init+0x144>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b3c      	ldr	r3, [pc, #240]	@ (800060c <MX_GPIO_Init+0x144>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a3b      	ldr	r2, [pc, #236]	@ (800060c <MX_GPIO_Init+0x144>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b39      	ldr	r3, [pc, #228]	@ (800060c <MX_GPIO_Init+0x144>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b35      	ldr	r3, [pc, #212]	@ (800060c <MX_GPIO_Init+0x144>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a34      	ldr	r2, [pc, #208]	@ (800060c <MX_GPIO_Init+0x144>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b32      	ldr	r3, [pc, #200]	@ (800060c <MX_GPIO_Init+0x144>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_D0_Pin|DISPLAY_D1_Pin|DISPLAY_D2_Pin|DISPLAY_D3_Pin
 800054e:	2200      	movs	r2, #0
 8000550:	f24f 4107 	movw	r1, #62471	@ 0xf407
 8000554:	482e      	ldr	r0, [pc, #184]	@ (8000610 <MX_GPIO_Init+0x148>)
 8000556:	f001 f9db 	bl	8001910 <HAL_GPIO_WritePin>
                          |DISPLAY_D4_Pin|DISPLAY_D5_Pin|DISPLAY_D6_Pin|DISPLAY_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISPLAY_READ_WRITE_Pin|DISPLAY_REGISTER_SELECT_Pin|DISPLAY_ENABLE_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000560:	482c      	ldr	r0, [pc, #176]	@ (8000614 <MX_GPIO_Init+0x14c>)
 8000562:	f001 f9d5 	bl	8001910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_MAX31865_GPIO_Port, SPI3_CS_MAX31865_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800056c:	482a      	ldr	r0, [pc, #168]	@ (8000618 <MX_GPIO_Init+0x150>)
 800056e:	f001 f9cf 	bl	8001910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000572:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000578:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4822      	ldr	r0, [pc, #136]	@ (8000614 <MX_GPIO_Init+0x14c>)
 800058a:	f000 ff59 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin|DOOR_CLOSED_Pin;
 800058e:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	481c      	ldr	r0, [pc, #112]	@ (8000614 <MX_GPIO_Init+0x14c>)
 80005a4:	f000 ff4c 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DISPLAY_D0_Pin|DISPLAY_D1_Pin|DISPLAY_D2_Pin|DISPLAY_D3_Pin
 80005a8:	f24f 4307 	movw	r3, #62471	@ 0xf407
 80005ac:	617b      	str	r3, [r7, #20]
                          |DISPLAY_D4_Pin|DISPLAY_D5_Pin|DISPLAY_D6_Pin|DISPLAY_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	4813      	ldr	r0, [pc, #76]	@ (8000610 <MX_GPIO_Init+0x148>)
 80005c2:	f000 ff3d 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DISPLAY_READ_WRITE_Pin|DISPLAY_REGISTER_SELECT_Pin|DISPLAY_ENABLE_Pin;
 80005c6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	480d      	ldr	r0, [pc, #52]	@ (8000614 <MX_GPIO_Init+0x14c>)
 80005e0:	f000 ff2e 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_MAX31865_Pin;
 80005e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_MAX31865_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	4806      	ldr	r0, [pc, #24]	@ (8000618 <MX_GPIO_Init+0x150>)
 80005fe:	f000 ff1f 	bl	8001440 <HAL_GPIO_Init>

}
 8000602:	bf00      	nop
 8000604:	3728      	adds	r7, #40	@ 0x28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40020400 	.word	0x40020400
 8000614:	40020800 	.word	0x40020800
 8000618:	40020000 	.word	0x40020000

0800061c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	@ (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	@ (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	@ (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_I2C1_Init+0x50>)
 800065a:	f001 f973 	bl	8001944 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f8f6 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <HAL_I2C_MspInit+0x84>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d12c      	bne.n	80006f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <HAL_I2C_MspInit+0x88>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <HAL_I2C_MspInit+0x88>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <HAL_I2C_MspInit+0x88>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80006b6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80006ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006bc:	2312      	movs	r3, #18
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006c8:	2304      	movs	r3, #4
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	480c      	ldr	r0, [pc, #48]	@ (8000704 <HAL_I2C_MspInit+0x8c>)
 80006d4:	f000 feb4 	bl	8001440 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <HAL_I2C_MspInit+0x88>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <HAL_I2C_MspInit+0x88>)
 80006e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <HAL_I2C_MspInit+0x88>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	@ 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40005400 	.word	0x40005400
 8000700:	40023800 	.word	0x40023800
 8000704:	40020400 	.word	0x40020400

08000708 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <HAL_I2C_MspDeInit+0x38>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d10e      	bne.n	8000738 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800071a:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <HAL_I2C_MspDeInit+0x3c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a09      	ldr	r2, [pc, #36]	@ (8000744 <HAL_I2C_MspDeInit+0x3c>)
 8000720:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000726:	2180      	movs	r1, #128	@ 0x80
 8000728:	4807      	ldr	r0, [pc, #28]	@ (8000748 <HAL_I2C_MspDeInit+0x40>)
 800072a:	f001 f80d 	bl	8001748 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800072e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <HAL_I2C_MspDeInit+0x40>)
 8000734:	f001 f808 	bl	8001748 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40005400 	.word	0x40005400
 8000744:	40023800 	.word	0x40023800
 8000748:	40020400 	.word	0x40020400

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fcfa 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f814 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f7ff feb6 	bl	80004c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800075c:	f000 fc58 	bl	8001010 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000760:	f000 f87e 	bl	8000860 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000764:	f000 f964 	bl	8000a30 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000768:	f000 fa5e 	bl	8000c28 <MX_TIM3_Init>
  MX_TIM4_Init();
 800076c:	f000 fab0 	bl	8000cd0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000770:	f000 f9e2 	bl	8000b38 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000774:	f7ff ff52 	bl	800061c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  fastFlow_run();
 8000778:	f004 fa94 	bl	8004ca4 <fastFlow_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <main+0x30>

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	@ 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2230      	movs	r2, #48	@ 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f004 fcb3 	bl	80050fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b28      	ldr	r3, [pc, #160]	@ (800084c <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	4a27      	ldr	r2, [pc, #156]	@ (800084c <SystemClock_Config+0xcc>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b4:	4b25      	ldr	r3, [pc, #148]	@ (800084c <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <SystemClock_Config+0xd0>)
 80007ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007f0:	2310      	movs	r3, #16
 80007f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fe:	2304      	movs	r3, #4
 8000800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4618      	mov	r0, r3
 8000808:	f002 f8c6 	bl	8002998 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000812:	f000 f81f 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fb28 	bl	8002e88 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083e:	f000 f809 	bl	8000854 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	@ 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <Error_Handler+0x8>

08000860 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_SPI3_Init+0x64>)
 8000866:	4a18      	ldr	r2, [pc, #96]	@ (80008c8 <MX_SPI3_Init+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <MX_SPI3_Init+0x64>)
 800086c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_SPI3_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_SPI3_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_SPI3_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_SPI3_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_SPI3_Init+0x64>)
 800088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000890:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_SPI3_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <MX_SPI3_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_SPI3_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <MX_SPI3_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_SPI3_Init+0x64>)
 80008ac:	220a      	movs	r2, #10
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_SPI3_Init+0x64>)
 80008b2:	f002 fd09 	bl	80032c8 <HAL_SPI_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008bc:	f7ff ffca 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000007c 	.word	0x2000007c
 80008c8:	40003c00 	.word	0x40003c00

080008cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a19      	ldr	r2, [pc, #100]	@ (8000950 <HAL_SPI_MspInit+0x84>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d12c      	bne.n	8000948 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_SPI_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	4a17      	ldr	r2, [pc, #92]	@ (8000954 <HAL_SPI_MspInit+0x88>)
 80008f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HAL_SPI_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_SPI_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a10      	ldr	r2, [pc, #64]	@ (8000954 <HAL_SPI_MspInit+0x88>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <HAL_SPI_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000926:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000938:	2306      	movs	r3, #6
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <HAL_SPI_MspInit+0x8c>)
 8000944:	f000 fd7c 	bl	8001440 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40003c00 	.word	0x40003c00
 8000954:	40023800 	.word	0x40023800
 8000958:	40020800 	.word	0x40020800

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000970:	6453      	str	r3, [r2, #68]	@ 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099a:	2007      	movs	r0, #7
 800099c:	f000 fd1c 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a02:	f000 fbf3 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b092      	sub	sp, #72	@ 0x48
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
 8000a50:	615a      	str	r2, [r3, #20]
 8000a52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2220      	movs	r2, #32
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 fb4d 	bl	80050fa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a60:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000a62:	4a34      	ldr	r2, [pc, #208]	@ (8000b34 <MX_TIM1_Init+0x104>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a66:	4b32      	ldr	r3, [pc, #200]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b30      	ldr	r3, [pc, #192]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a72:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a8c:	4828      	ldr	r0, [pc, #160]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000a8e:	f002 fcf3 	bl	8003478 <HAL_TIM_OC_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000a98:	f7ff fedc 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4821      	ldr	r0, [pc, #132]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000aac:	f003 fc2e 	bl	800430c <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000ab6:	f7ff fecd 	bl	8000854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4814      	ldr	r0, [pc, #80]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000ae0:	f002 ff56 	bl	8003990 <HAL_TIM_OC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000aea:	f7ff feb3 	bl	8000854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4807      	ldr	r0, [pc, #28]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000b12:	f003 fc69 	bl	80043e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000b1c:	f7ff fe9a 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b20:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <MX_TIM1_Init+0x100>)
 8000b22:	f000 f9ef 	bl	8000f04 <HAL_TIM_MspPostInit>

}
 8000b26:	bf00      	nop
 8000b28:	3748      	adds	r7, #72	@ 0x48
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000d4 	.word	0x200000d4
 8000b34:	40010000 	.word	0x40010000

08000b38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	@ 0x38
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b68:	4b2e      	ldr	r3, [pc, #184]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000b6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0x0A04;
 8000b70:	4b2c      	ldr	r3, [pc, #176]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000b72:	f640 2204 	movw	r2, #2564	@ 0xa04
 8000b76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8000b7e:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000b80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b86:	4b27      	ldr	r3, [pc, #156]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b8c:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b92:	4824      	ldr	r0, [pc, #144]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000b94:	f002 fc21 	bl	80033da <HAL_TIM_Base_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b9e:	f7ff fe59 	bl	8000854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bac:	4619      	mov	r1, r3
 8000bae:	481d      	ldr	r0, [pc, #116]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000bb0:	f003 f80c 	bl	8003bcc <HAL_TIM_ConfigClockSource>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bba:	f7ff fe4b 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bbe:	4819      	ldr	r0, [pc, #100]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000bc0:	f002 fca9 	bl	8003516 <HAL_TIM_PWM_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bca:	f7ff fe43 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4811      	ldr	r0, [pc, #68]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000bde:	f003 fb95 	bl	800430c <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000be8:	f7ff fe34 	bl	8000854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bec:	2360      	movs	r3, #96	@ 0x60
 8000bee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0x0FFF;
 8000bf0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000bf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000c06:	f002 ff1f 	bl	8003a48 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000c10:	f7ff fe20 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <MX_TIM2_Init+0xec>)
 8000c16:	f000 f975 	bl	8000f04 <HAL_TIM_MspPostInit>

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	@ 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000011c 	.word	0x2000011c

08000c28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	@ 0x30
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2224      	movs	r2, #36	@ 0x24
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 fa5f 	bl	80050fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c44:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <MX_TIM3_Init+0xa0>)
 8000c46:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <MX_TIM3_Init+0xa4>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <MX_TIM3_Init+0xa0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <MX_TIM3_Init+0xa0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <MX_TIM3_Init+0xa0>)
 8000c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <MX_TIM3_Init+0xa0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <MX_TIM3_Init+0xa0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c72:	2301      	movs	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c82:	2301      	movs	r3, #1
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <MX_TIM3_Init+0xa0>)
 8000c96:	f002 fd47 	bl	8003728 <HAL_TIM_Encoder_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000ca0:	f7ff fdd8 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_TIM3_Init+0xa0>)
 8000cb2:	f003 fb2b 	bl	800430c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000cbc:	f7ff fdca 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3730      	adds	r7, #48	@ 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000164 	.word	0x20000164
 8000ccc:	40000400 	.word	0x40000400

08000cd0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	@ 0x38
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d00:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d02:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc0 <MX_TIM4_Init+0xf0>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20000;
 8000d06:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d08:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000d0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 8000d14:	4b29      	ldr	r3, [pc, #164]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d2a:	4824      	ldr	r0, [pc, #144]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d2c:	f002 fb55 	bl	80033da <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000d36:	f7ff fd8d 	bl	8000854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d44:	4619      	mov	r1, r3
 8000d46:	481d      	ldr	r0, [pc, #116]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d48:	f002 ff40 	bl	8003bcc <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000d52:	f7ff fd7f 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000d56:	4819      	ldr	r0, [pc, #100]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d58:	f002 fb8e 	bl	8003478 <HAL_TIM_OC_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000d62:	f7ff fd77 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	4619      	mov	r1, r3
 8000d74:	4811      	ldr	r0, [pc, #68]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d76:	f003 fac9 	bl	800430c <HAL_TIMEx_MasterConfigSynchronization>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000d80:	f7ff fd68 	bl	8000854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0x7FFF;
 8000d88:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000d8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000d9e:	f002 fdf7 	bl	8003990 <HAL_TIM_OC_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000da8:	f7ff fd54 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <MX_TIM4_Init+0xec>)
 8000dae:	f000 f8a9 	bl	8000f04 <HAL_TIM_MspPostInit>

}
 8000db2:	bf00      	nop
 8000db4:	3738      	adds	r7, #56	@ 0x38
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001ac 	.word	0x200001ac
 8000dc0:	40000800 	.word	0x40000800

08000dc4 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000e00 <HAL_TIM_OC_MspInit+0x3c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10d      	bne.n	8000df2 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_TIM_OC_MspInit+0x40>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <HAL_TIM_OC_MspInit+0x40>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <HAL_TIM_OC_MspInit+0x40>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40010000 	.word	0x40010000
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e18:	d10e      	bne.n	8000e38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <HAL_TIM_Base_MspInit+0x64>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <HAL_TIM_Base_MspInit+0x64>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <HAL_TIM_Base_MspInit+0x64>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e36:	e012      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e70 <HAL_TIM_Base_MspInit+0x68>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d10d      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <HAL_TIM_Base_MspInit+0x64>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_TIM_Base_MspInit+0x64>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_TIM_Base_MspInit+0x64>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40000800 	.word	0x40000800

08000e74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d12b      	bne.n	8000eee <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <HAL_TIM_Encoder_MspInit+0x88>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	4a17      	ldr	r2, [pc, #92]	@ (8000efc <HAL_TIM_Encoder_MspInit+0x88>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_TIM_Encoder_MspInit+0x88>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <HAL_TIM_Encoder_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <HAL_TIM_Encoder_MspInit+0x88>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_TIM_Encoder_MspInit+0x88>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8000ece:	23c0      	movs	r3, #192	@ 0xc0
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000eea:	f000 faa9 	bl	8001440 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40000400 	.word	0x40000400
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a36      	ldr	r2, [pc, #216]	@ (8000ffc <HAL_TIM_MspPostInit+0xf8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d11f      	bne.n	8000f66 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b35      	ldr	r3, [pc, #212]	@ (8001000 <HAL_TIM_MspPostInit+0xfc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a34      	ldr	r2, [pc, #208]	@ (8001000 <HAL_TIM_MspPostInit+0xfc>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b32      	ldr	r3, [pc, #200]	@ (8001000 <HAL_TIM_MspPostInit+0xfc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 8000f42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4829      	ldr	r0, [pc, #164]	@ (8001004 <HAL_TIM_MspPostInit+0x100>)
 8000f60:	f000 fa6e 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f64:	e046      	b.n	8000ff4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM2)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f6e:	d11e      	bne.n	8000fae <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <HAL_TIM_MspPostInit+0xfc>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f78:	4a21      	ldr	r2, [pc, #132]	@ (8001000 <HAL_TIM_MspPostInit+0xfc>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <HAL_TIM_MspPostInit+0xfc>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f8c:	2320      	movs	r3, #32
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4817      	ldr	r0, [pc, #92]	@ (8001004 <HAL_TIM_MspPostInit+0x100>)
 8000fa8:	f000 fa4a 	bl	8001440 <HAL_GPIO_Init>
}
 8000fac:	e022      	b.n	8000ff4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a15      	ldr	r2, [pc, #84]	@ (8001008 <HAL_TIM_MspPostInit+0x104>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d11d      	bne.n	8000ff4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <HAL_TIM_MspPostInit+0xfc>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001000 <HAL_TIM_MspPostInit+0xfc>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <HAL_TIM_MspPostInit+0xfc>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8000fd4:	2340      	movs	r3, #64	@ 0x40
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4807      	ldr	r0, [pc, #28]	@ (800100c <HAL_TIM_MspPostInit+0x108>)
 8000ff0:	f000 fa26 	bl	8001440 <HAL_GPIO_Init>
}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	@ 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010000 	.word	0x40010000
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	40000800 	.word	0x40000800
 800100c:	40020400 	.word	0x40020400

08001010 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <MX_USART2_UART_Init+0x4c>)
 8001016:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <MX_USART2_UART_Init+0x50>)
 8001018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <MX_USART2_UART_Init+0x4c>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <MX_USART2_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <MX_USART2_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <MX_USART2_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_USART2_UART_Init+0x4c>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b08      	ldr	r3, [pc, #32]	@ (800105c <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_USART2_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	@ (800105c <MX_USART2_UART_Init+0x4c>)
 8001048:	f003 fa20 	bl	800448c <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001052:	f7ff fbff 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001f4 	.word	0x200001f4
 8001060:	40004400 	.word	0x40004400

08001064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a19      	ldr	r2, [pc, #100]	@ (80010e8 <HAL_UART_MspInit+0x84>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d12b      	bne.n	80010de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <HAL_UART_MspInit+0x88>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	4a17      	ldr	r2, [pc, #92]	@ (80010ec <HAL_UART_MspInit+0x88>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001094:	6413      	str	r3, [r2, #64]	@ 0x40
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_UART_MspInit+0x88>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <HAL_UART_MspInit+0x88>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <HAL_UART_MspInit+0x88>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <HAL_UART_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010be:	230c      	movs	r3, #12
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ce:	2307      	movs	r3, #7
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <HAL_UART_MspInit+0x8c>)
 80010da:	f000 f9b1 	bl	8001440 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	@ 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40004400 	.word	0x40004400
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800112c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f8:	f7ff fc88 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	@ (8001134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	@ (8001140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001122:	f003 fff3 	bl	800510c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff fb11 	bl	800074c <main>
  bx  lr    
 800112a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800112c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001138:	08005204 	.word	0x08005204
  ldr r2, =_sbss
 800113c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001140:	20000328 	.word	0x20000328

08001144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <HAL_Init+0x40>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <HAL_Init+0x40>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <HAL_Init+0x40>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f931 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fbee 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f93b 	bl	8001426 <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 f911 	bl	80013ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	@ (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	2000023c 	.word	0x2000023c

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2000023c 	.word	0x2000023c

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff ffee 	bl	8001214 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffde 	bl	8001214 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	@ (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	@ (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	@ 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff47 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff5c 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff8e 	bl	800132c <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5d 	bl	80012d8 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffb0 	bl	8001394 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e159      	b.n	8001710 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	429a      	cmp	r2, r3
 8001476:	f040 8148 	bne.w	800170a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d005      	beq.n	8001492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	2b02      	cmp	r3, #2
 8001490:	d130      	bne.n	80014f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c8:	2201      	movs	r2, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 0201 	and.w	r2, r3, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d017      	beq.n	8001530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d123      	bne.n	8001584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	08da      	lsrs	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3208      	adds	r2, #8
 8001544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	69b9      	ldr	r1, [r7, #24]
 8001580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0203 	and.w	r2, r3, #3
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a2 	beq.w	800170a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b57      	ldr	r3, [pc, #348]	@ (8001728 <HAL_GPIO_Init+0x2e8>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	4a56      	ldr	r2, [pc, #344]	@ (8001728 <HAL_GPIO_Init+0x2e8>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d6:	4b54      	ldr	r3, [pc, #336]	@ (8001728 <HAL_GPIO_Init+0x2e8>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e2:	4a52      	ldr	r2, [pc, #328]	@ (800172c <HAL_GPIO_Init+0x2ec>)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	220f      	movs	r2, #15
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a49      	ldr	r2, [pc, #292]	@ (8001730 <HAL_GPIO_Init+0x2f0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x202>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a48      	ldr	r2, [pc, #288]	@ (8001734 <HAL_GPIO_Init+0x2f4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x1fe>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a47      	ldr	r2, [pc, #284]	@ (8001738 <HAL_GPIO_Init+0x2f8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x1fa>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a46      	ldr	r2, [pc, #280]	@ (800173c <HAL_GPIO_Init+0x2fc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x1f6>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a45      	ldr	r2, [pc, #276]	@ (8001740 <HAL_GPIO_Init+0x300>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x1f2>
 800162e:	2304      	movs	r3, #4
 8001630:	e008      	b.n	8001644 <HAL_GPIO_Init+0x204>
 8001632:	2307      	movs	r3, #7
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x204>
 8001636:	2303      	movs	r3, #3
 8001638:	e004      	b.n	8001644 <HAL_GPIO_Init+0x204>
 800163a:	2302      	movs	r3, #2
 800163c:	e002      	b.n	8001644 <HAL_GPIO_Init+0x204>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x204>
 8001642:	2300      	movs	r3, #0
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	f002 0203 	and.w	r2, r2, #3
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	4093      	lsls	r3, r2
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001654:	4935      	ldr	r1, [pc, #212]	@ (800172c <HAL_GPIO_Init+0x2ec>)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001662:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <HAL_GPIO_Init+0x304>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001686:	4a2f      	ldr	r2, [pc, #188]	@ (8001744 <HAL_GPIO_Init+0x304>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800168c:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <HAL_GPIO_Init+0x304>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b0:	4a24      	ldr	r2, [pc, #144]	@ (8001744 <HAL_GPIO_Init+0x304>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016b6:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <HAL_GPIO_Init+0x304>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016da:	4a1a      	ldr	r2, [pc, #104]	@ (8001744 <HAL_GPIO_Init+0x304>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_GPIO_Init+0x304>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001704:	4a0f      	ldr	r2, [pc, #60]	@ (8001744 <HAL_GPIO_Init+0x304>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	f67f aea2 	bls.w	800145c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3724      	adds	r7, #36	@ 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40013800 	.word	0x40013800
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	40020800 	.word	0x40020800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40021000 	.word	0x40021000
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e0bb      	b.n	80018dc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001764:	2201      	movs	r2, #1
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	429a      	cmp	r2, r3
 800177c:	f040 80ab 	bne.w	80018d6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001780:	4a5c      	ldr	r2, [pc, #368]	@ (80018f4 <HAL_GPIO_DeInit+0x1ac>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	4013      	ands	r3, r2
 80017a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a54      	ldr	r2, [pc, #336]	@ (80018f8 <HAL_GPIO_DeInit+0x1b0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d019      	beq.n	80017de <HAL_GPIO_DeInit+0x96>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a53      	ldr	r2, [pc, #332]	@ (80018fc <HAL_GPIO_DeInit+0x1b4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_DeInit+0x92>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a52      	ldr	r2, [pc, #328]	@ (8001900 <HAL_GPIO_DeInit+0x1b8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00d      	beq.n	80017d6 <HAL_GPIO_DeInit+0x8e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a51      	ldr	r2, [pc, #324]	@ (8001904 <HAL_GPIO_DeInit+0x1bc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d007      	beq.n	80017d2 <HAL_GPIO_DeInit+0x8a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a50      	ldr	r2, [pc, #320]	@ (8001908 <HAL_GPIO_DeInit+0x1c0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_GPIO_DeInit+0x86>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_DeInit+0x98>
 80017ce:	2307      	movs	r3, #7
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_DeInit+0x98>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_DeInit+0x98>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_DeInit+0x98>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_DeInit+0x98>
 80017de:	2300      	movs	r3, #0
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d132      	bne.n	8001856 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017f0:	4b46      	ldr	r3, [pc, #280]	@ (800190c <HAL_GPIO_DeInit+0x1c4>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4944      	ldr	r1, [pc, #272]	@ (800190c <HAL_GPIO_DeInit+0x1c4>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80017fe:	4b43      	ldr	r3, [pc, #268]	@ (800190c <HAL_GPIO_DeInit+0x1c4>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	43db      	mvns	r3, r3
 8001806:	4941      	ldr	r1, [pc, #260]	@ (800190c <HAL_GPIO_DeInit+0x1c4>)
 8001808:	4013      	ands	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800180c:	4b3f      	ldr	r3, [pc, #252]	@ (800190c <HAL_GPIO_DeInit+0x1c4>)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	43db      	mvns	r3, r3
 8001814:	493d      	ldr	r1, [pc, #244]	@ (800190c <HAL_GPIO_DeInit+0x1c4>)
 8001816:	4013      	ands	r3, r2
 8001818:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800181a:	4b3c      	ldr	r3, [pc, #240]	@ (800190c <HAL_GPIO_DeInit+0x1c4>)
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	493a      	ldr	r1, [pc, #232]	@ (800190c <HAL_GPIO_DeInit+0x1c4>)
 8001824:	4013      	ands	r3, r2
 8001826:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001838:	4a2e      	ldr	r2, [pc, #184]	@ (80018f4 <HAL_GPIO_DeInit+0x1ac>)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	43da      	mvns	r2, r3
 8001848:	482a      	ldr	r0, [pc, #168]	@ (80018f4 <HAL_GPIO_DeInit+0x1ac>)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	400a      	ands	r2, r1
 8001850:	3302      	adds	r3, #2
 8001852:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2103      	movs	r1, #3
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	401a      	ands	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	08da      	lsrs	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3208      	adds	r2, #8
 8001874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	08d2      	lsrs	r2, r2, #3
 800188c:	4019      	ands	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2103      	movs	r1, #3
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	2101      	movs	r1, #1
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2103      	movs	r1, #3
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	f67f af40 	bls.w	8001764 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40013c00 	.word	0x40013c00

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800192c:	e003      	b.n	8001936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	041a      	lsls	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e12b      	b.n	8001bae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7fe fe84 	bl	8000678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2224      	movs	r2, #36	@ 0x24
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001996:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019a8:	f001 fc66 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 80019ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4a81      	ldr	r2, [pc, #516]	@ (8001bb8 <HAL_I2C_Init+0x274>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d807      	bhi.n	80019c8 <HAL_I2C_Init+0x84>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4a80      	ldr	r2, [pc, #512]	@ (8001bbc <HAL_I2C_Init+0x278>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	bf94      	ite	ls
 80019c0:	2301      	movls	r3, #1
 80019c2:	2300      	movhi	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	e006      	b.n	80019d6 <HAL_I2C_Init+0x92>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4a7d      	ldr	r2, [pc, #500]	@ (8001bc0 <HAL_I2C_Init+0x27c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	bf94      	ite	ls
 80019d0:	2301      	movls	r3, #1
 80019d2:	2300      	movhi	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0e7      	b.n	8001bae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a78      	ldr	r2, [pc, #480]	@ (8001bc4 <HAL_I2C_Init+0x280>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0c9b      	lsrs	r3, r3, #18
 80019e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb8 <HAL_I2C_Init+0x274>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d802      	bhi.n	8001a18 <HAL_I2C_Init+0xd4>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3301      	adds	r3, #1
 8001a16:	e009      	b.n	8001a2c <HAL_I2C_Init+0xe8>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	4a69      	ldr	r2, [pc, #420]	@ (8001bc8 <HAL_I2C_Init+0x284>)
 8001a24:	fba2 2303 	umull	r2, r3, r2, r3
 8001a28:	099b      	lsrs	r3, r3, #6
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	495c      	ldr	r1, [pc, #368]	@ (8001bb8 <HAL_I2C_Init+0x274>)
 8001a48:	428b      	cmp	r3, r1
 8001a4a:	d819      	bhi.n	8001a80 <HAL_I2C_Init+0x13c>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1e59      	subs	r1, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a5a:	1c59      	adds	r1, r3, #1
 8001a5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a60:	400b      	ands	r3, r1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00a      	beq.n	8001a7c <HAL_I2C_Init+0x138>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1e59      	subs	r1, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a74:	3301      	adds	r3, #1
 8001a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7a:	e051      	b.n	8001b20 <HAL_I2C_Init+0x1dc>
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	e04f      	b.n	8001b20 <HAL_I2C_Init+0x1dc>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d111      	bne.n	8001aac <HAL_I2C_Init+0x168>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1e58      	subs	r0, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	440b      	add	r3, r1
 8001a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	e012      	b.n	8001ad2 <HAL_I2C_Init+0x18e>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1e58      	subs	r0, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	0099      	lsls	r1, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_Init+0x196>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e022      	b.n	8001b20 <HAL_I2C_Init+0x1dc>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10e      	bne.n	8001b00 <HAL_I2C_Init+0x1bc>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1e58      	subs	r0, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6859      	ldr	r1, [r3, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	440b      	add	r3, r1
 8001af0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af4:	3301      	adds	r3, #1
 8001af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001afe:	e00f      	b.n	8001b20 <HAL_I2C_Init+0x1dc>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1e58      	subs	r0, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6859      	ldr	r1, [r3, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	0099      	lsls	r1, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b16:	3301      	adds	r3, #1
 8001b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	6809      	ldr	r1, [r1, #0]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6911      	ldr	r1, [r2, #16]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68d2      	ldr	r2, [r2, #12]
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	000186a0 	.word	0x000186a0
 8001bbc:	001e847f 	.word	0x001e847f
 8001bc0:	003d08ff 	.word	0x003d08ff
 8001bc4:	431bde83 	.word	0x431bde83
 8001bc8:	10624dd3 	.word	0x10624dd3

08001bcc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e021      	b.n	8001c22 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2224      	movs	r2, #36	@ 0x24
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe fd86 	bl	8000708 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	461a      	mov	r2, r3
 8001c38:	460b      	mov	r3, r1
 8001c3a:	817b      	strh	r3, [r7, #10]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff fae8 	bl	8001214 <HAL_GetTick>
 8001c44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	f040 80e0 	bne.w	8001e14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2319      	movs	r3, #25
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4970      	ldr	r1, [pc, #448]	@ (8001e20 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 fc64 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e0d3      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2C_Master_Transmit+0x50>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0cc      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ea>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d007      	beq.n	8001ca2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2221      	movs	r2, #33	@ 0x21
 8001cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	893a      	ldrh	r2, [r7, #8]
 8001cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a50      	ldr	r2, [pc, #320]	@ (8001e24 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ce4:	8979      	ldrh	r1, [r7, #10]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	6a3a      	ldr	r2, [r7, #32]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 face 	bl	800228c <I2C_MasterRequestWrite>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e08d      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d10:	e066      	b.n	8001de0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	6a39      	ldr	r1, [r7, #32]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fd22 	bl	8002760 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00d      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d107      	bne.n	8001d3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e06b      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d11b      	bne.n	8001db4 <HAL_I2C_Master_Transmit+0x188>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d017      	beq.n	8001db4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	6a39      	ldr	r1, [r7, #32]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 fd19 	bl	80027f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d107      	bne.n	8001ddc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e01a      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d194      	bne.n	8001d12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e000      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	00100002 	.word	0x00100002
 8001e24:	ffff0000 	.word	0xffff0000

08001e28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	@ 0x30
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	461a      	mov	r2, r3
 8001e34:	460b      	mov	r3, r1
 8001e36:	817b      	strh	r3, [r7, #10]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	f7ff f9ea 	bl	8001214 <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	f040 8217 	bne.w	800227e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2319      	movs	r3, #25
 8001e56:	2201      	movs	r2, #1
 8001e58:	497c      	ldr	r1, [pc, #496]	@ (800204c <HAL_I2C_Master_Receive+0x224>)
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fb66 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001e66:	2302      	movs	r3, #2
 8001e68:	e20a      	b.n	8002280 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_I2C_Master_Receive+0x50>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e203      	b.n	8002280 <HAL_I2C_Master_Receive+0x458>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d007      	beq.n	8001e9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2222      	movs	r2, #34	@ 0x22
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2210      	movs	r2, #16
 8001eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	893a      	ldrh	r2, [r7, #8]
 8001ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a5c      	ldr	r2, [pc, #368]	@ (8002050 <HAL_I2C_Master_Receive+0x228>)
 8001ede:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ee0:	8979      	ldrh	r1, [r7, #10]
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fa52 	bl	8002390 <I2C_MasterRequestRead>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e1c4      	b.n	8002280 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d113      	bne.n	8001f26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	623b      	str	r3, [r7, #32]
 8001f12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	e198      	b.n	8002258 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d11b      	bne.n	8001f66 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e178      	b.n	8002258 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d11b      	bne.n	8001fa6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	e158      	b.n	8002258 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001fcc:	e144      	b.n	8002258 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	f200 80f1 	bhi.w	80021ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d123      	bne.n	8002028 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fc4b 	bl	8002880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e145      	b.n	8002280 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002026:	e117      	b.n	8002258 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202c:	2b02      	cmp	r3, #2
 800202e:	d14e      	bne.n	80020ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002036:	2200      	movs	r2, #0
 8002038:	4906      	ldr	r1, [pc, #24]	@ (8002054 <HAL_I2C_Master_Receive+0x22c>)
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fa76 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e11a      	b.n	8002280 <HAL_I2C_Master_Receive+0x458>
 800204a:	bf00      	nop
 800204c:	00100002 	.word	0x00100002
 8002050:	ffff0000 	.word	0xffff0000
 8002054:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020cc:	e0c4      	b.n	8002258 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d4:	2200      	movs	r2, #0
 80020d6:	496c      	ldr	r1, [pc, #432]	@ (8002288 <HAL_I2C_Master_Receive+0x460>)
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 fa27 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0cb      	b.n	8002280 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002130:	2200      	movs	r2, #0
 8002132:	4955      	ldr	r1, [pc, #340]	@ (8002288 <HAL_I2C_Master_Receive+0x460>)
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 f9f9 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e09d      	b.n	8002280 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021b8:	e04e      	b.n	8002258 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fb5e 	bl	8002880 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e058      	b.n	8002280 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b04      	cmp	r3, #4
 800220c:	d124      	bne.n	8002258 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002212:	2b03      	cmp	r3, #3
 8002214:	d107      	bne.n	8002226 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002224:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	f47f aeb6 	bne.w	8001fce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800227e:	2302      	movs	r3, #2
  }
}
 8002280:	4618      	mov	r0, r3
 8002282:	3728      	adds	r7, #40	@ 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	00010004 	.word	0x00010004

0800228c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	460b      	mov	r3, r1
 800229a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d006      	beq.n	80022b6 <I2C_MasterRequestWrite+0x2a>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d003      	beq.n	80022b6 <I2C_MasterRequestWrite+0x2a>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022b4:	d108      	bne.n	80022c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e00b      	b.n	80022e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	2b12      	cmp	r3, #18
 80022ce:	d107      	bne.n	80022e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f91d 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002306:	d103      	bne.n	8002310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e035      	b.n	8002380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800231c:	d108      	bne.n	8002330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800231e:	897b      	ldrh	r3, [r7, #10]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800232c:	611a      	str	r2, [r3, #16]
 800232e:	e01b      	b.n	8002368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002330:	897b      	ldrh	r3, [r7, #10]
 8002332:	11db      	asrs	r3, r3, #7
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 0306 	and.w	r3, r3, #6
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f063 030f 	orn	r3, r3, #15
 8002340:	b2da      	uxtb	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	490e      	ldr	r1, [pc, #56]	@ (8002388 <I2C_MasterRequestWrite+0xfc>)
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f966 	bl	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e010      	b.n	8002380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800235e:	897b      	ldrh	r3, [r7, #10]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4907      	ldr	r1, [pc, #28]	@ (800238c <I2C_MasterRequestWrite+0x100>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f956 	bl	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	00010008 	.word	0x00010008
 800238c:	00010002 	.word	0x00010002

08002390 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	460b      	mov	r3, r1
 800239e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d006      	beq.n	80023ca <I2C_MasterRequestRead+0x3a>
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d003      	beq.n	80023ca <I2C_MasterRequestRead+0x3a>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023c8:	d108      	bne.n	80023dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e00b      	b.n	80023f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	2b11      	cmp	r3, #17
 80023e2:	d107      	bne.n	80023f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f893 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800241a:	d103      	bne.n	8002424 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e079      	b.n	800251c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002430:	d108      	bne.n	8002444 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002432:	897b      	ldrh	r3, [r7, #10]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	611a      	str	r2, [r3, #16]
 8002442:	e05f      	b.n	8002504 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002444:	897b      	ldrh	r3, [r7, #10]
 8002446:	11db      	asrs	r3, r3, #7
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f003 0306 	and.w	r3, r3, #6
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f063 030f 	orn	r3, r3, #15
 8002454:	b2da      	uxtb	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4930      	ldr	r1, [pc, #192]	@ (8002524 <I2C_MasterRequestRead+0x194>)
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f8dc 	bl	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e054      	b.n	800251c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002472:	897b      	ldrh	r3, [r7, #10]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4929      	ldr	r1, [pc, #164]	@ (8002528 <I2C_MasterRequestRead+0x198>)
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f8cc 	bl	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e044      	b.n	800251c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f831 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00d      	beq.n	80024ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024de:	d103      	bne.n	80024e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024e6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e017      	b.n	800251c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80024ec:	897b      	ldrh	r3, [r7, #10]
 80024ee:	11db      	asrs	r3, r3, #7
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 0306 	and.w	r3, r3, #6
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f063 030e 	orn	r3, r3, #14
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4907      	ldr	r1, [pc, #28]	@ (8002528 <I2C_MasterRequestRead+0x198>)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f888 	bl	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00010008 	.word	0x00010008
 8002528:	00010002 	.word	0x00010002

0800252c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253c:	e048      	b.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d044      	beq.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7fe fe65 	bl	8001214 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d139      	bne.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10d      	bne.n	8002582 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	e00c      	b.n	800259c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	43da      	mvns	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4013      	ands	r3, r2
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d116      	bne.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e023      	b.n	8002618 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	0c1b      	lsrs	r3, r3, #16
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10d      	bne.n	80025f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	43da      	mvns	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	e00c      	b.n	8002610 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	43da      	mvns	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4013      	ands	r3, r2
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	429a      	cmp	r2, r3
 8002614:	d093      	beq.n	800253e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800262e:	e071      	b.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800263e:	d123      	bne.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800264e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002658:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	f043 0204 	orr.w	r2, r3, #4
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e067      	b.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d041      	beq.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002690:	f7fe fdc0 	bl	8001214 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	d302      	bcc.n	80026a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d136      	bne.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10c      	bne.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4013      	ands	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf14      	ite	ne
 80026c2:	2301      	movne	r3, #1
 80026c4:	2300      	moveq	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	e00b      	b.n	80026e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	43da      	mvns	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4013      	ands	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf14      	ite	ne
 80026dc:	2301      	movne	r3, #1
 80026de:	2300      	moveq	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e021      	b.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	0c1b      	lsrs	r3, r3, #16
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10c      	bne.n	8002738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	43da      	mvns	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4013      	ands	r3, r2
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e00b      	b.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4013      	ands	r3, r2
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf14      	ite	ne
 800274a:	2301      	movne	r3, #1
 800274c:	2300      	moveq	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f af6d 	bne.w	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800276c:	e034      	b.n	80027d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f8e3 	bl	800293a <I2C_IsAcknowledgeFailed>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e034      	b.n	80027e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d028      	beq.n	80027d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002786:	f7fe fd45 	bl	8001214 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	429a      	cmp	r2, r3
 8002794:	d302      	bcc.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11d      	bne.n	80027d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	2b80      	cmp	r3, #128	@ 0x80
 80027a8:	d016      	beq.n	80027d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e007      	b.n	80027e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e2:	2b80      	cmp	r3, #128	@ 0x80
 80027e4:	d1c3      	bne.n	800276e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027fc:	e034      	b.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f89b 	bl	800293a <I2C_IsAcknowledgeFailed>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e034      	b.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d028      	beq.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002816:	f7fe fcfd 	bl	8001214 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	d302      	bcc.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11d      	bne.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b04      	cmp	r3, #4
 8002838:	d016      	beq.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e007      	b.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d1c3      	bne.n	80027fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800288c:	e049      	b.n	8002922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b10      	cmp	r3, #16
 800289a:	d119      	bne.n	80028d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0210 	mvn.w	r2, #16
 80028a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e030      	b.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d0:	f7fe fca0 	bl	8001214 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d302      	bcc.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d11d      	bne.n	8002922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f0:	2b40      	cmp	r3, #64	@ 0x40
 80028f2:	d016      	beq.n	8002922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f043 0220 	orr.w	r2, r3, #32
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e007      	b.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292c:	2b40      	cmp	r3, #64	@ 0x40
 800292e:	d1ae      	bne.n	800288e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002950:	d11b      	bne.n	800298a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800295a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	f043 0204 	orr.w	r2, r3, #4
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e267      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d075      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029b6:	4b88      	ldr	r3, [pc, #544]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d00c      	beq.n	80029dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c2:	4b85      	ldr	r3, [pc, #532]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d112      	bne.n	80029f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ce:	4b82      	ldr	r3, [pc, #520]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029da:	d10b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	4b7e      	ldr	r3, [pc, #504]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d05b      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x108>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d157      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e242      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x74>
 80029fe:	4b76      	ldr	r3, [pc, #472]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a75      	ldr	r2, [pc, #468]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e01d      	b.n	8002a48 <HAL_RCC_OscConfig+0xb0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x98>
 8002a16:	4b70      	ldr	r3, [pc, #448]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6f      	ldr	r2, [pc, #444]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6c      	ldr	r2, [pc, #432]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCC_OscConfig+0xb0>
 8002a30:	4b69      	ldr	r3, [pc, #420]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a68      	ldr	r2, [pc, #416]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	4b66      	ldr	r3, [pc, #408]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a65      	ldr	r2, [pc, #404]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d013      	beq.n	8002a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fe fbe0 	bl	8001214 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a58:	f7fe fbdc 	bl	8001214 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	@ 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e207      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0xc0>
 8002a76:	e014      	b.n	8002aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fe fbcc 	bl	8001214 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a80:	f7fe fbc8 	bl	8001214 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	@ 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1f3      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	4b51      	ldr	r3, [pc, #324]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0xe8>
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d063      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002aae:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aba:	4b47      	ldr	r3, [pc, #284]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d11c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac6:	4b44      	ldr	r3, [pc, #272]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d116      	bne.n	8002b00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	4b41      	ldr	r3, [pc, #260]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_RCC_OscConfig+0x152>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e1c7      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aea:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4937      	ldr	r1, [pc, #220]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	e03a      	b.n	8002b76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d020      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b08:	4b34      	ldr	r3, [pc, #208]	@ (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fb81 	bl	8001214 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b16:	f7fe fb7d 	bl	8001214 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e1a8      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b34:	4b28      	ldr	r3, [pc, #160]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4925      	ldr	r1, [pc, #148]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
 8002b48:	e015      	b.n	8002b76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4a:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fb60 	bl	8001214 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b58:	f7fe fb5c 	bl	8001214 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e187      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d036      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_RCC_OscConfig+0x248>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe fb40 	bl	8001214 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b98:	f7fe fb3c 	bl	8001214 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e167      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002baa:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_RCC_OscConfig+0x240>)
 8002bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x200>
 8002bb6:	e01b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_RCC_OscConfig+0x248>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fb29 	bl	8001214 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	e00e      	b.n	8002be4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fb25 	bl	8001214 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d907      	bls.n	8002be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e150      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	42470000 	.word	0x42470000
 8002be0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	4b88      	ldr	r3, [pc, #544]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ea      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8097 	beq.w	8002d2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c02:	4b81      	ldr	r3, [pc, #516]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	4b7d      	ldr	r3, [pc, #500]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a7c      	ldr	r2, [pc, #496]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	4b77      	ldr	r3, [pc, #476]	@ (8002e0c <HAL_RCC_OscConfig+0x474>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3a:	4b74      	ldr	r3, [pc, #464]	@ (8002e0c <HAL_RCC_OscConfig+0x474>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a73      	ldr	r2, [pc, #460]	@ (8002e0c <HAL_RCC_OscConfig+0x474>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c46:	f7fe fae5 	bl	8001214 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4e:	f7fe fae1 	bl	8001214 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e10c      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	4b6a      	ldr	r3, [pc, #424]	@ (8002e0c <HAL_RCC_OscConfig+0x474>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x2ea>
 8002c74:	4b64      	ldr	r3, [pc, #400]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	4a63      	ldr	r2, [pc, #396]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c80:	e01c      	b.n	8002cbc <HAL_RCC_OscConfig+0x324>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x30c>
 8002c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c96:	4b5c      	ldr	r3, [pc, #368]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0x324>
 8002ca4:	4b58      	ldr	r3, [pc, #352]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca8:	4a57      	ldr	r2, [pc, #348]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb0:	4b55      	ldr	r3, [pc, #340]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a54      	ldr	r2, [pc, #336]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	f023 0304 	bic.w	r3, r3, #4
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d015      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe faa6 	bl	8001214 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7fe faa2 	bl	8001214 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0cb      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce2:	4b49      	ldr	r3, [pc, #292]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ee      	beq.n	8002ccc <HAL_RCC_OscConfig+0x334>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fa90 	bl	8001214 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fa8c 	bl	8001214 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0b5      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ee      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d20:	4b39      	ldr	r3, [pc, #228]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	4a38      	ldr	r2, [pc, #224]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a1 	beq.w	8002e78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d36:	4b34      	ldr	r3, [pc, #208]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d05c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d141      	bne.n	8002dce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b31      	ldr	r3, [pc, #196]	@ (8002e10 <HAL_RCC_OscConfig+0x478>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe fa60 	bl	8001214 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe fa5c 	bl	8001214 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e087      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	4b27      	ldr	r3, [pc, #156]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	019b      	lsls	r3, r3, #6
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	491b      	ldr	r1, [pc, #108]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x478>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe fa35 	bl	8001214 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fe fa31 	bl	8001214 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e05c      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x416>
 8002dcc:	e054      	b.n	8002e78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <HAL_RCC_OscConfig+0x478>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fa1e 	bl	8001214 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe fa1a 	bl	8001214 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e045      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_RCC_OscConfig+0x470>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x444>
 8002dfa:	e03d      	b.n	8002e78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e038      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <HAL_RCC_OscConfig+0x4ec>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d028      	beq.n	8002e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d121      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d11a      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e44:	4013      	ands	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d111      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800

08002e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0cc      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b68      	ldr	r3, [pc, #416]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d90c      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b65      	ldr	r3, [pc, #404]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b63      	ldr	r3, [pc, #396]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0b8      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002edc:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a58      	ldr	r2, [pc, #352]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ee6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef4:	4b53      	ldr	r3, [pc, #332]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b50      	ldr	r3, [pc, #320]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	494d      	ldr	r1, [pc, #308]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d044      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b47      	ldr	r3, [pc, #284]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d119      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e07f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f46:	4b3f      	ldr	r3, [pc, #252]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e06f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f56:	4b3b      	ldr	r3, [pc, #236]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e067      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b37      	ldr	r3, [pc, #220]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4934      	ldr	r1, [pc, #208]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f78:	f7fe f94c 	bl	8001214 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fe f948 	bl	8001214 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e04f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b2b      	ldr	r3, [pc, #172]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d20c      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b22      	ldr	r3, [pc, #136]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b20      	ldr	r3, [pc, #128]	@ (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e032      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4916      	ldr	r1, [pc, #88]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffa:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	490e      	ldr	r1, [pc, #56]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800300e:	f000 f821 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8003012:	4602      	mov	r2, r0
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	490a      	ldr	r1, [pc, #40]	@ (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8003020:	5ccb      	ldrb	r3, [r1, r3]
 8003022:	fa22 f303 	lsr.w	r3, r2, r3
 8003026:	4a09      	ldr	r2, [pc, #36]	@ (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <HAL_RCC_ClockConfig+0x1c8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe f8ac 	bl	800118c <HAL_InitTick>

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023c00 	.word	0x40023c00
 8003044:	40023800 	.word	0x40023800
 8003048:	080051dc 	.word	0x080051dc
 800304c:	20000000 	.word	0x20000000
 8003050:	20000004 	.word	0x20000004

08003054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003058:	b094      	sub	sp, #80	@ 0x50
 800305a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306c:	4b79      	ldr	r3, [pc, #484]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d00d      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x40>
 8003078:	2b08      	cmp	r3, #8
 800307a:	f200 80e1 	bhi.w	8003240 <HAL_RCC_GetSysClockFreq+0x1ec>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x34>
 8003082:	2b04      	cmp	r3, #4
 8003084:	d003      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x3a>
 8003086:	e0db      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003088:	4b73      	ldr	r3, [pc, #460]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x204>)
 800308a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800308c:	e0db      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800308e:	4b73      	ldr	r3, [pc, #460]	@ (800325c <HAL_RCC_GetSysClockFreq+0x208>)
 8003090:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003092:	e0d8      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003094:	4b6f      	ldr	r3, [pc, #444]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800309c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800309e:	4b6d      	ldr	r3, [pc, #436]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d063      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	099b      	lsrs	r3, r3, #6
 80030b0:	2200      	movs	r2, #0
 80030b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030be:	2300      	movs	r3, #0
 80030c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	f04f 0000 	mov.w	r0, #0
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	0159      	lsls	r1, r3, #5
 80030d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d8:	0150      	lsls	r0, r2, #5
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4621      	mov	r1, r4
 80030e0:	1a51      	subs	r1, r2, r1
 80030e2:	6139      	str	r1, [r7, #16]
 80030e4:	4629      	mov	r1, r5
 80030e6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f8:	4659      	mov	r1, fp
 80030fa:	018b      	lsls	r3, r1, #6
 80030fc:	4651      	mov	r1, sl
 80030fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003102:	4651      	mov	r1, sl
 8003104:	018a      	lsls	r2, r1, #6
 8003106:	4651      	mov	r1, sl
 8003108:	ebb2 0801 	subs.w	r8, r2, r1
 800310c:	4659      	mov	r1, fp
 800310e:	eb63 0901 	sbc.w	r9, r3, r1
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800311e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003126:	4690      	mov	r8, r2
 8003128:	4699      	mov	r9, r3
 800312a:	4623      	mov	r3, r4
 800312c:	eb18 0303 	adds.w	r3, r8, r3
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	462b      	mov	r3, r5
 8003134:	eb49 0303 	adc.w	r3, r9, r3
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003146:	4629      	mov	r1, r5
 8003148:	024b      	lsls	r3, r1, #9
 800314a:	4621      	mov	r1, r4
 800314c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003150:	4621      	mov	r1, r4
 8003152:	024a      	lsls	r2, r1, #9
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315a:	2200      	movs	r2, #0
 800315c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800315e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003164:	f7fd f838 	bl	80001d8 <__aeabi_uldivmod>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4613      	mov	r3, r2
 800316e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003170:	e058      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003172:	4b38      	ldr	r3, [pc, #224]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	2200      	movs	r2, #0
 800317a:	4618      	mov	r0, r3
 800317c:	4611      	mov	r1, r2
 800317e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	2300      	movs	r3, #0
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
 8003188:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800318c:	4642      	mov	r2, r8
 800318e:	464b      	mov	r3, r9
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	0159      	lsls	r1, r3, #5
 800319a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800319e:	0150      	lsls	r0, r2, #5
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4641      	mov	r1, r8
 80031a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80031aa:	4649      	mov	r1, r9
 80031ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031c4:	ebb2 040a 	subs.w	r4, r2, sl
 80031c8:	eb63 050b 	sbc.w	r5, r3, fp
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	00eb      	lsls	r3, r5, #3
 80031d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031da:	00e2      	lsls	r2, r4, #3
 80031dc:	4614      	mov	r4, r2
 80031de:	461d      	mov	r5, r3
 80031e0:	4643      	mov	r3, r8
 80031e2:	18e3      	adds	r3, r4, r3
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	464b      	mov	r3, r9
 80031e8:	eb45 0303 	adc.w	r3, r5, r3
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031fa:	4629      	mov	r1, r5
 80031fc:	028b      	lsls	r3, r1, #10
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003204:	4621      	mov	r1, r4
 8003206:	028a      	lsls	r2, r1, #10
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800320e:	2200      	movs	r2, #0
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	61fa      	str	r2, [r7, #28]
 8003214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003218:	f7fc ffde 	bl	80001d8 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003224:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003234:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x204>)
 8003242:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003248:	4618      	mov	r0, r3
 800324a:	3750      	adds	r7, #80	@ 0x50
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	00f42400 	.word	0x00f42400
 800325c:	007a1200 	.word	0x007a1200

08003260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	@ (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	080051ec 	.word	0x080051ec

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a4:	f7ff ffdc 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	0b5b      	lsrs	r3, r3, #13
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	@ (80032c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	080051ec 	.word	0x080051ec

080032c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07b      	b.n	80033d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d108      	bne.n	80032f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ea:	d009      	beq.n	8003300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	61da      	str	r2, [r3, #28]
 80032f2:	e005      	b.n	8003300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd fad6 	bl	80008cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003336:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003384:	ea42 0103 	orr.w	r1, r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	f003 0104 	and.w	r1, r3, #4
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	f003 0210 	and.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e041      	b.n	8003470 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7fd fd01 	bl	8000e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f000 fc9f 	bl	8003d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e041      	b.n	800350e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fc90 	bl	8000dc4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f000 fc50 	bl	8003d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e041      	b.n	80035ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f839 	bl	80035b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f000 fc01 	bl	8003d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_TIM_PWM_Start+0x24>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e022      	b.n	8003632 <HAL_TIM_PWM_Start+0x6a>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d109      	bne.n	8003606 <HAL_TIM_PWM_Start+0x3e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	e015      	b.n	8003632 <HAL_TIM_PWM_Start+0x6a>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b08      	cmp	r3, #8
 800360a:	d109      	bne.n	8003620 <HAL_TIM_PWM_Start+0x58>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e008      	b.n	8003632 <HAL_TIM_PWM_Start+0x6a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e068      	b.n	800370c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_TIM_PWM_Start+0x82>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003648:	e013      	b.n	8003672 <HAL_TIM_PWM_Start+0xaa>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d104      	bne.n	800365a <HAL_TIM_PWM_Start+0x92>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003658:	e00b      	b.n	8003672 <HAL_TIM_PWM_Start+0xaa>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d104      	bne.n	800366a <HAL_TIM_PWM_Start+0xa2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003668:	e003      	b.n	8003672 <HAL_TIM_PWM_Start+0xaa>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2201      	movs	r2, #1
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fe20 	bl	80042c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a23      	ldr	r2, [pc, #140]	@ (8003714 <HAL_TIM_PWM_Start+0x14c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d107      	bne.n	800369a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1d      	ldr	r2, [pc, #116]	@ (8003714 <HAL_TIM_PWM_Start+0x14c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d018      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x10e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ac:	d013      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x10e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a19      	ldr	r2, [pc, #100]	@ (8003718 <HAL_TIM_PWM_Start+0x150>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x10e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a17      	ldr	r2, [pc, #92]	@ (800371c <HAL_TIM_PWM_Start+0x154>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x10e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a16      	ldr	r2, [pc, #88]	@ (8003720 <HAL_TIM_PWM_Start+0x158>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x10e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a14      	ldr	r2, [pc, #80]	@ (8003724 <HAL_TIM_PWM_Start+0x15c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d111      	bne.n	80036fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b06      	cmp	r3, #6
 80036e6:	d010      	beq.n	800370a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f8:	e007      	b.n	800370a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40010000 	.word	0x40010000
 8003718:	40000400 	.word	0x40000400
 800371c:	40000800 	.word	0x40000800
 8003720:	40000c00 	.word	0x40000c00
 8003724:	40014000 	.word	0x40014000

08003728 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e097      	b.n	800386c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fd fb8f 	bl	8000e74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800376c:	f023 0307 	bic.w	r3, r3, #7
 8003770:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f000 faed 	bl	8003d5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	4313      	orrs	r3, r2
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80037c8:	f023 030c 	bic.w	r3, r3, #12
 80037cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	4313      	orrs	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	011a      	lsls	r2, r3, #4
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	031b      	lsls	r3, r3, #12
 80037f8:	4313      	orrs	r3, r2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	4313      	orrs	r3, r2
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003884:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800388c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003894:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800389c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d110      	bne.n	80038c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038aa:	7b7b      	ldrb	r3, [r7, #13]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d001      	beq.n	80038b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e069      	b.n	8003988 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038c4:	e031      	b.n	800392a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d110      	bne.n	80038ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038cc:	7bbb      	ldrb	r3, [r7, #14]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d102      	bne.n	80038d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038d2:	7b3b      	ldrb	r3, [r7, #12]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d001      	beq.n	80038dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e055      	b.n	8003988 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038ec:	e01d      	b.n	800392a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d108      	bne.n	8003906 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038f4:	7bbb      	ldrb	r3, [r7, #14]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d105      	bne.n	8003906 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038fa:	7b7b      	ldrb	r3, [r7, #13]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d102      	bne.n	8003906 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003900:	7b3b      	ldrb	r3, [r7, #12]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d001      	beq.n	800390a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e03e      	b.n	8003988 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_TIM_Encoder_Start+0xc4>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b04      	cmp	r3, #4
 8003934:	d008      	beq.n	8003948 <HAL_TIM_Encoder_Start+0xd4>
 8003936:	e00f      	b.n	8003958 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fcbd 	bl	80042c0 <TIM_CCxChannelCmd>
      break;
 8003946:	e016      	b.n	8003976 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	2104      	movs	r1, #4
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fcb5 	bl	80042c0 <TIM_CCxChannelCmd>
      break;
 8003956:	e00e      	b.n	8003976 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fcad 	bl	80042c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2201      	movs	r2, #1
 800396c:	2104      	movs	r1, #4
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fca6 	bl	80042c0 <TIM_CCxChannelCmd>
      break;
 8003974:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_OC_ConfigChannel+0x1e>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e048      	b.n	8003a40 <HAL_TIM_OC_ConfigChannel+0xb0>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b0c      	cmp	r3, #12
 80039ba:	d839      	bhi.n	8003a30 <HAL_TIM_OC_ConfigChannel+0xa0>
 80039bc:	a201      	add	r2, pc, #4	@ (adr r2, 80039c4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	08003a31 	.word	0x08003a31
 80039cc:	08003a31 	.word	0x08003a31
 80039d0:	08003a31 	.word	0x08003a31
 80039d4:	08003a07 	.word	0x08003a07
 80039d8:	08003a31 	.word	0x08003a31
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003a15 	.word	0x08003a15
 80039e8:	08003a31 	.word	0x08003a31
 80039ec:	08003a31 	.word	0x08003a31
 80039f0:	08003a31 	.word	0x08003a31
 80039f4:	08003a23 	.word	0x08003a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fa38 	bl	8003e74 <TIM_OC1_SetConfig>
      break;
 8003a04:	e017      	b.n	8003a36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fa97 	bl	8003f40 <TIM_OC2_SetConfig>
      break;
 8003a12:	e010      	b.n	8003a36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fafc 	bl	8004018 <TIM_OC3_SetConfig>
      break;
 8003a20:	e009      	b.n	8003a36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fb5f 	bl	80040ec <TIM_OC4_SetConfig>
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	75fb      	strb	r3, [r7, #23]
      break;
 8003a34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e0ae      	b.n	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	f200 809f 	bhi.w	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a76:	a201      	add	r2, pc, #4	@ (adr r2, 8003a7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003ab1 	.word	0x08003ab1
 8003a80:	08003bb5 	.word	0x08003bb5
 8003a84:	08003bb5 	.word	0x08003bb5
 8003a88:	08003bb5 	.word	0x08003bb5
 8003a8c:	08003af1 	.word	0x08003af1
 8003a90:	08003bb5 	.word	0x08003bb5
 8003a94:	08003bb5 	.word	0x08003bb5
 8003a98:	08003bb5 	.word	0x08003bb5
 8003a9c:	08003b33 	.word	0x08003b33
 8003aa0:	08003bb5 	.word	0x08003bb5
 8003aa4:	08003bb5 	.word	0x08003bb5
 8003aa8:	08003bb5 	.word	0x08003bb5
 8003aac:	08003b73 	.word	0x08003b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f9dc 	bl	8003e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0208 	orr.w	r2, r2, #8
 8003aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0204 	bic.w	r2, r2, #4
 8003ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6999      	ldr	r1, [r3, #24]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	619a      	str	r2, [r3, #24]
      break;
 8003aee:	e064      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fa22 	bl	8003f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6999      	ldr	r1, [r3, #24]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	619a      	str	r2, [r3, #24]
      break;
 8003b30:	e043      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fa6d 	bl	8004018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0208 	orr.w	r2, r2, #8
 8003b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0204 	bic.w	r2, r2, #4
 8003b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69d9      	ldr	r1, [r3, #28]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	61da      	str	r2, [r3, #28]
      break;
 8003b70:	e023      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fab7 	bl	80040ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69d9      	ldr	r1, [r3, #28]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	021a      	lsls	r2, r3, #8
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	61da      	str	r2, [r3, #28]
      break;
 8003bb2:	e002      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_ConfigClockSource+0x1c>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0b4      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x186>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c20:	d03e      	beq.n	8003ca0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c26:	f200 8087 	bhi.w	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c2e:	f000 8086 	beq.w	8003d3e <HAL_TIM_ConfigClockSource+0x172>
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c36:	d87f      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b70      	cmp	r3, #112	@ 0x70
 8003c3a:	d01a      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0xa6>
 8003c3c:	2b70      	cmp	r3, #112	@ 0x70
 8003c3e:	d87b      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b60      	cmp	r3, #96	@ 0x60
 8003c42:	d050      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x11a>
 8003c44:	2b60      	cmp	r3, #96	@ 0x60
 8003c46:	d877      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b50      	cmp	r3, #80	@ 0x50
 8003c4a:	d03c      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c4c:	2b50      	cmp	r3, #80	@ 0x50
 8003c4e:	d873      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b40      	cmp	r3, #64	@ 0x40
 8003c52:	d058      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x13a>
 8003c54:	2b40      	cmp	r3, #64	@ 0x40
 8003c56:	d86f      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b30      	cmp	r3, #48	@ 0x30
 8003c5a:	d064      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x15a>
 8003c5c:	2b30      	cmp	r3, #48	@ 0x30
 8003c5e:	d86b      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d060      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x15a>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d867      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d05c      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x15a>
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d05a      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x15a>
 8003c70:	e062      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c82:	f000 fafd 	bl	8004280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	609a      	str	r2, [r3, #8]
      break;
 8003c9e:	e04f      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cb0:	f000 fae6 	bl	8004280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cc2:	609a      	str	r2, [r3, #8]
      break;
 8003cc4:	e03c      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f000 fa5a 	bl	800418c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2150      	movs	r1, #80	@ 0x50
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fab3 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003ce4:	e02c      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f000 fa79 	bl	80041ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2160      	movs	r1, #96	@ 0x60
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 faa3 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003d04:	e01c      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d12:	461a      	mov	r2, r3
 8003d14:	f000 fa3a 	bl	800418c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2140      	movs	r1, #64	@ 0x40
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fa93 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003d24:	e00c      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f000 fa8a 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003d36:	e003      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3c:	e000      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a3a      	ldr	r2, [pc, #232]	@ (8003e58 <TIM_Base_SetConfig+0xfc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00f      	beq.n	8003d94 <TIM_Base_SetConfig+0x38>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7a:	d00b      	beq.n	8003d94 <TIM_Base_SetConfig+0x38>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a37      	ldr	r2, [pc, #220]	@ (8003e5c <TIM_Base_SetConfig+0x100>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <TIM_Base_SetConfig+0x38>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a36      	ldr	r2, [pc, #216]	@ (8003e60 <TIM_Base_SetConfig+0x104>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_Base_SetConfig+0x38>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a35      	ldr	r2, [pc, #212]	@ (8003e64 <TIM_Base_SetConfig+0x108>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d108      	bne.n	8003da6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e58 <TIM_Base_SetConfig+0xfc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d01b      	beq.n	8003de6 <TIM_Base_SetConfig+0x8a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db4:	d017      	beq.n	8003de6 <TIM_Base_SetConfig+0x8a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a28      	ldr	r2, [pc, #160]	@ (8003e5c <TIM_Base_SetConfig+0x100>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <TIM_Base_SetConfig+0x8a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a27      	ldr	r2, [pc, #156]	@ (8003e60 <TIM_Base_SetConfig+0x104>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00f      	beq.n	8003de6 <TIM_Base_SetConfig+0x8a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a26      	ldr	r2, [pc, #152]	@ (8003e64 <TIM_Base_SetConfig+0x108>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <TIM_Base_SetConfig+0x8a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a25      	ldr	r2, [pc, #148]	@ (8003e68 <TIM_Base_SetConfig+0x10c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <TIM_Base_SetConfig+0x8a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a24      	ldr	r2, [pc, #144]	@ (8003e6c <TIM_Base_SetConfig+0x110>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d003      	beq.n	8003de6 <TIM_Base_SetConfig+0x8a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a23      	ldr	r2, [pc, #140]	@ (8003e70 <TIM_Base_SetConfig+0x114>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d108      	bne.n	8003df8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e58 <TIM_Base_SetConfig+0xfc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800
 8003e64:	40000c00 	.word	0x40000c00
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	40014400 	.word	0x40014400
 8003e70:	40014800 	.word	0x40014800

08003e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f023 0201 	bic.w	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0303 	bic.w	r3, r3, #3
 8003eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f023 0302 	bic.w	r3, r3, #2
 8003ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a1c      	ldr	r2, [pc, #112]	@ (8003f3c <TIM_OC1_SetConfig+0xc8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d10c      	bne.n	8003eea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f023 0308 	bic.w	r3, r3, #8
 8003ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f023 0304 	bic.w	r3, r3, #4
 8003ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a13      	ldr	r2, [pc, #76]	@ (8003f3c <TIM_OC1_SetConfig+0xc8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d111      	bne.n	8003f16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	621a      	str	r2, [r3, #32]
}
 8003f30:	bf00      	nop
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40010000 	.word	0x40010000

08003f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f023 0210 	bic.w	r2, r3, #16
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f023 0320 	bic.w	r3, r3, #32
 8003f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004014 <TIM_OC2_SetConfig+0xd4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d10d      	bne.n	8003fbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <TIM_OC2_SetConfig+0xd4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d113      	bne.n	8003fec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40010000 	.word	0x40010000

08004018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1d      	ldr	r2, [pc, #116]	@ (80040e8 <TIM_OC3_SetConfig+0xd0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10d      	bne.n	8004092 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800407c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <TIM_OC3_SetConfig+0xd0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d113      	bne.n	80040c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40010000 	.word	0x40010000

080040ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	031b      	lsls	r3, r3, #12
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a10      	ldr	r2, [pc, #64]	@ (8004188 <TIM_OC4_SetConfig+0x9c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d109      	bne.n	8004160 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	019b      	lsls	r3, r3, #6
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40010000 	.word	0x40010000

0800418c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0201 	bic.w	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 030a 	bic.w	r3, r3, #10
 80041c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b087      	sub	sp, #28
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f023 0210 	bic.w	r2, r3, #16
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004226:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	f043 0307 	orr.w	r3, r3, #7
 800426c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	609a      	str	r2, [r3, #8]
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800429a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	021a      	lsls	r2, r3, #8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	609a      	str	r2, [r3, #8]
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	2201      	movs	r2, #1
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1a      	ldr	r2, [r3, #32]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1a      	ldr	r2, [r3, #32]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	431a      	orrs	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	621a      	str	r2, [r3, #32]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004320:	2302      	movs	r3, #2
 8004322:	e050      	b.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1c      	ldr	r2, [pc, #112]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d018      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004370:	d013      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a18      	ldr	r2, [pc, #96]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00e      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a16      	ldr	r2, [pc, #88]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a13      	ldr	r2, [pc, #76]	@ (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10c      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40014000 	.word	0x40014000

080043e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004400:	2302      	movs	r3, #2
 8004402:	e03d      	b.n	8004480 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e042      	b.n	8004524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc fdd6 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	@ 0x24
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f973 	bl	80047bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b20      	cmp	r3, #32
 800454a:	d175      	bne.n	8004638 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_UART_Transmit+0x2c>
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e06e      	b.n	800463a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2221      	movs	r2, #33	@ 0x21
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800456a:	f7fc fe53 	bl	8001214 <HAL_GetTick>
 800456e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	88fa      	ldrh	r2, [r7, #6]
 8004574:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004584:	d108      	bne.n	8004598 <HAL_UART_Transmit+0x6c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e003      	b.n	80045a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800459c:	2300      	movs	r3, #0
 800459e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045a0:	e02e      	b.n	8004600 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	@ 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f848 	bl	8004642 <UART_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e03a      	b.n	800463a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	3302      	adds	r3, #2
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	e007      	b.n	80045f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	3301      	adds	r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1cb      	bne.n	80045a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	2140      	movs	r1, #64	@ 0x40
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f814 	bl	8004642 <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e006      	b.n	800463a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004652:	e03b      	b.n	80046cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	d037      	beq.n	80046cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465c:	f7fc fdda 	bl	8001214 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	6a3a      	ldr	r2, [r7, #32]
 8004668:	429a      	cmp	r2, r3
 800466a:	d302      	bcc.n	8004672 <UART_WaitOnFlagUntilTimeout+0x30>
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e03a      	b.n	80046ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d023      	beq.n	80046cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b80      	cmp	r3, #128	@ 0x80
 8004688:	d020      	beq.n	80046cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b40      	cmp	r3, #64	@ 0x40
 800468e:	d01d      	beq.n	80046cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b08      	cmp	r3, #8
 800469c:	d116      	bne.n	80046cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f81d 	bl	80046f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2208      	movs	r2, #8
 80046be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e00f      	b.n	80046ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4013      	ands	r3, r2
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	429a      	cmp	r2, r3
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d0b4      	beq.n	8004654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b095      	sub	sp, #84	@ 0x54
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800471c:	643a      	str	r2, [r7, #64]	@ 0x40
 800471e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800472a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e5      	bne.n	80046fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3314      	adds	r3, #20
 8004736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004750:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e5      	bne.n	8004730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004768:	2b01      	cmp	r3, #1
 800476a:	d119      	bne.n	80047a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	60bb      	str	r3, [r7, #8]
   return(result);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f023 0310 	bic.w	r3, r3, #16
 8004782:	647b      	str	r3, [r7, #68]	@ 0x44
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800478c:	61ba      	str	r2, [r7, #24]
 800478e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6979      	ldr	r1, [r7, #20]
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	613b      	str	r3, [r7, #16]
   return(result);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e5      	bne.n	800476c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047ae:	bf00      	nop
 80047b0:	3754      	adds	r7, #84	@ 0x54
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c0:	b0c0      	sub	sp, #256	@ 0x100
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d8:	68d9      	ldr	r1, [r3, #12]
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	ea40 0301 	orr.w	r3, r0, r1
 80047e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004814:	f021 010c 	bic.w	r1, r1, #12
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004822:	430b      	orrs	r3, r1
 8004824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004836:	6999      	ldr	r1, [r3, #24]
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	ea40 0301 	orr.w	r3, r0, r1
 8004842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a88 <UART_SetConfig+0x2cc>)
 800484c:	429a      	cmp	r2, r3
 800484e:	d005      	beq.n	800485c <UART_SetConfig+0xa0>
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b8d      	ldr	r3, [pc, #564]	@ (8004a8c <UART_SetConfig+0x2d0>)
 8004858:	429a      	cmp	r2, r3
 800485a:	d104      	bne.n	8004866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800485c:	f7fe fd20 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 8004860:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004864:	e003      	b.n	800486e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004866:	f7fe fd07 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 800486a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004878:	f040 810c 	bne.w	8004a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800487c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004880:	2200      	movs	r2, #0
 8004882:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004886:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800488a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800488e:	4622      	mov	r2, r4
 8004890:	462b      	mov	r3, r5
 8004892:	1891      	adds	r1, r2, r2
 8004894:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004896:	415b      	adcs	r3, r3
 8004898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800489a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800489e:	4621      	mov	r1, r4
 80048a0:	eb12 0801 	adds.w	r8, r2, r1
 80048a4:	4629      	mov	r1, r5
 80048a6:	eb43 0901 	adc.w	r9, r3, r1
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048be:	4690      	mov	r8, r2
 80048c0:	4699      	mov	r9, r3
 80048c2:	4623      	mov	r3, r4
 80048c4:	eb18 0303 	adds.w	r3, r8, r3
 80048c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048cc:	462b      	mov	r3, r5
 80048ce:	eb49 0303 	adc.w	r3, r9, r3
 80048d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048ea:	460b      	mov	r3, r1
 80048ec:	18db      	adds	r3, r3, r3
 80048ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f0:	4613      	mov	r3, r2
 80048f2:	eb42 0303 	adc.w	r3, r2, r3
 80048f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80048f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004900:	f7fb fc6a 	bl	80001d8 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4b61      	ldr	r3, [pc, #388]	@ (8004a90 <UART_SetConfig+0x2d4>)
 800490a:	fba3 2302 	umull	r2, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	011c      	lsls	r4, r3, #4
 8004912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004916:	2200      	movs	r2, #0
 8004918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800491c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004924:	4642      	mov	r2, r8
 8004926:	464b      	mov	r3, r9
 8004928:	1891      	adds	r1, r2, r2
 800492a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800492c:	415b      	adcs	r3, r3
 800492e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004934:	4641      	mov	r1, r8
 8004936:	eb12 0a01 	adds.w	sl, r2, r1
 800493a:	4649      	mov	r1, r9
 800493c:	eb43 0b01 	adc.w	fp, r3, r1
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800494c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004954:	4692      	mov	sl, r2
 8004956:	469b      	mov	fp, r3
 8004958:	4643      	mov	r3, r8
 800495a:	eb1a 0303 	adds.w	r3, sl, r3
 800495e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004962:	464b      	mov	r3, r9
 8004964:	eb4b 0303 	adc.w	r3, fp, r3
 8004968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004978:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800497c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004980:	460b      	mov	r3, r1
 8004982:	18db      	adds	r3, r3, r3
 8004984:	643b      	str	r3, [r7, #64]	@ 0x40
 8004986:	4613      	mov	r3, r2
 8004988:	eb42 0303 	adc.w	r3, r2, r3
 800498c:	647b      	str	r3, [r7, #68]	@ 0x44
 800498e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004996:	f7fb fc1f 	bl	80001d8 <__aeabi_uldivmod>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004a90 <UART_SetConfig+0x2d4>)
 80049a2:	fba3 2301 	umull	r2, r3, r3, r1
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2264      	movs	r2, #100	@ 0x64
 80049aa:	fb02 f303 	mul.w	r3, r2, r3
 80049ae:	1acb      	subs	r3, r1, r3
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049b6:	4b36      	ldr	r3, [pc, #216]	@ (8004a90 <UART_SetConfig+0x2d4>)
 80049b8:	fba3 2302 	umull	r2, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049c4:	441c      	add	r4, r3
 80049c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049d8:	4642      	mov	r2, r8
 80049da:	464b      	mov	r3, r9
 80049dc:	1891      	adds	r1, r2, r2
 80049de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049e0:	415b      	adcs	r3, r3
 80049e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049e8:	4641      	mov	r1, r8
 80049ea:	1851      	adds	r1, r2, r1
 80049ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80049ee:	4649      	mov	r1, r9
 80049f0:	414b      	adcs	r3, r1
 80049f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a00:	4659      	mov	r1, fp
 8004a02:	00cb      	lsls	r3, r1, #3
 8004a04:	4651      	mov	r1, sl
 8004a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0a:	4651      	mov	r1, sl
 8004a0c:	00ca      	lsls	r2, r1, #3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	4642      	mov	r2, r8
 8004a16:	189b      	adds	r3, r3, r2
 8004a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	460a      	mov	r2, r1
 8004a20:	eb42 0303 	adc.w	r3, r2, r3
 8004a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	18db      	adds	r3, r3, r3
 8004a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a42:	4613      	mov	r3, r2
 8004a44:	eb42 0303 	adc.w	r3, r2, r3
 8004a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a52:	f7fb fbc1 	bl	80001d8 <__aeabi_uldivmod>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a90 <UART_SetConfig+0x2d4>)
 8004a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	2164      	movs	r1, #100	@ 0x64
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	3332      	adds	r3, #50	@ 0x32
 8004a6e:	4a08      	ldr	r2, [pc, #32]	@ (8004a90 <UART_SetConfig+0x2d4>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	f003 0207 	and.w	r2, r3, #7
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4422      	add	r2, r4
 8004a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a84:	e106      	b.n	8004c94 <UART_SetConfig+0x4d8>
 8004a86:	bf00      	nop
 8004a88:	40011000 	.word	0x40011000
 8004a8c:	40011400 	.word	0x40011400
 8004a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004aa6:	4642      	mov	r2, r8
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	1891      	adds	r1, r2, r2
 8004aac:	6239      	str	r1, [r7, #32]
 8004aae:	415b      	adcs	r3, r3
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ab6:	4641      	mov	r1, r8
 8004ab8:	1854      	adds	r4, r2, r1
 8004aba:	4649      	mov	r1, r9
 8004abc:	eb43 0501 	adc.w	r5, r3, r1
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	00eb      	lsls	r3, r5, #3
 8004aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ace:	00e2      	lsls	r2, r4, #3
 8004ad0:	4614      	mov	r4, r2
 8004ad2:	461d      	mov	r5, r3
 8004ad4:	4643      	mov	r3, r8
 8004ad6:	18e3      	adds	r3, r4, r3
 8004ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004adc:	464b      	mov	r3, r9
 8004ade:	eb45 0303 	adc.w	r3, r5, r3
 8004ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b02:	4629      	mov	r1, r5
 8004b04:	008b      	lsls	r3, r1, #2
 8004b06:	4621      	mov	r1, r4
 8004b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	008a      	lsls	r2, r1, #2
 8004b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b14:	f7fb fb60 	bl	80001d8 <__aeabi_uldivmod>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4b60      	ldr	r3, [pc, #384]	@ (8004ca0 <UART_SetConfig+0x4e4>)
 8004b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	011c      	lsls	r4, r3, #4
 8004b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	1891      	adds	r1, r2, r2
 8004b3e:	61b9      	str	r1, [r7, #24]
 8004b40:	415b      	adcs	r3, r3
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b48:	4641      	mov	r1, r8
 8004b4a:	1851      	adds	r1, r2, r1
 8004b4c:	6139      	str	r1, [r7, #16]
 8004b4e:	4649      	mov	r1, r9
 8004b50:	414b      	adcs	r3, r1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b60:	4659      	mov	r1, fp
 8004b62:	00cb      	lsls	r3, r1, #3
 8004b64:	4651      	mov	r1, sl
 8004b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6a:	4651      	mov	r1, sl
 8004b6c:	00ca      	lsls	r2, r1, #3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	4642      	mov	r2, r8
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b7c:	464b      	mov	r3, r9
 8004b7e:	460a      	mov	r2, r1
 8004b80:	eb42 0303 	adc.w	r3, r2, r3
 8004b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	008b      	lsls	r3, r1, #2
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004baa:	4641      	mov	r1, r8
 8004bac:	008a      	lsls	r2, r1, #2
 8004bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bb2:	f7fb fb11 	bl	80001d8 <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4b38      	ldr	r3, [pc, #224]	@ (8004ca0 <UART_SetConfig+0x4e4>)
 8004bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2264      	movs	r2, #100	@ 0x64
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	1acb      	subs	r3, r1, r3
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	3332      	adds	r3, #50	@ 0x32
 8004bd0:	4a33      	ldr	r2, [pc, #204]	@ (8004ca0 <UART_SetConfig+0x4e4>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bdc:	441c      	add	r4, r3
 8004bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be2:	2200      	movs	r2, #0
 8004be4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004be6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004be8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	1891      	adds	r1, r2, r2
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	1851      	adds	r1, r2, r1
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	4649      	mov	r1, r9
 8004c04:	414b      	adcs	r3, r1
 8004c06:	607b      	str	r3, [r7, #4]
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c14:	4659      	mov	r1, fp
 8004c16:	00cb      	lsls	r3, r1, #3
 8004c18:	4651      	mov	r1, sl
 8004c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1e:	4651      	mov	r1, sl
 8004c20:	00ca      	lsls	r2, r1, #3
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	4642      	mov	r2, r8
 8004c2a:	189b      	adds	r3, r3, r2
 8004c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c2e:	464b      	mov	r3, r9
 8004c30:	460a      	mov	r2, r1
 8004c32:	eb42 0303 	adc.w	r3, r2, r3
 8004c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c42:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c50:	4649      	mov	r1, r9
 8004c52:	008b      	lsls	r3, r1, #2
 8004c54:	4641      	mov	r1, r8
 8004c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	008a      	lsls	r2, r1, #2
 8004c5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c62:	f7fb fab9 	bl	80001d8 <__aeabi_uldivmod>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <UART_SetConfig+0x4e4>)
 8004c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	2164      	movs	r1, #100	@ 0x64
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	3332      	adds	r3, #50	@ 0x32
 8004c7e:	4a08      	ldr	r2, [pc, #32]	@ (8004ca0 <UART_SetConfig+0x4e4>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	f003 020f 	and.w	r2, r3, #15
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4422      	add	r2, r4
 8004c92:	609a      	str	r2, [r3, #8]
}
 8004c94:	bf00      	nop
 8004c96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca0:	51eb851f 	.word	0x51eb851f

08004ca4 <fastFlow_run>:
void _i2cWrite(uint8_t address, uint8_t* data,uint8_t len);
void _i2cRead(uint8_t address, uint8_t* data,uint8_t len);


void fastFlow_run()
{
 8004ca4:	b5b0      	push	{r4, r5, r7, lr}
 8004ca6:	b0aa      	sub	sp, #168	@ 0xa8
 8004ca8:	af02      	add	r7, sp, #8
	uint8_t helloWorld_msg[] = "Hello, World!\n\r";
 8004caa:	4b4f      	ldr	r3, [pc, #316]	@ (8004de8 <fastFlow_run+0x144>)
 8004cac:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8004cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t turnedRight_msg[] = "Turned Right!\n\r";
 8004cb6:	4b4d      	ldr	r3, [pc, #308]	@ (8004dec <fastFlow_run+0x148>)
 8004cb8:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8004cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t turnedLeft_msg[] = "Turned Left!\n\r";
 8004cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8004df0 <fastFlow_run+0x14c>)
 8004cc4:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8004cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cca:	c407      	stmia	r4!, {r0, r1, r2}
 8004ccc:	8023      	strh	r3, [r4, #0]
 8004cce:	3402      	adds	r4, #2
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	7023      	strb	r3, [r4, #0]
	uint8_t turnedRightFast_msg[] = "Turned Right Fast!\n\r";
 8004cd4:	4b47      	ldr	r3, [pc, #284]	@ (8004df4 <fastFlow_run+0x150>)
 8004cd6:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8004cda:	461d      	mov	r5, r3
 8004cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ce0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ce4:	6020      	str	r0, [r4, #0]
 8004ce6:	3404      	adds	r4, #4
 8004ce8:	7021      	strb	r1, [r4, #0]
	uint8_t turnedLeftFast_msg[] = "Turned Left Fast!\n\r";
 8004cea:	4b43      	ldr	r3, [pc, #268]	@ (8004df8 <fastFlow_run+0x154>)
 8004cec:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8004cf0:	461d      	mov	r5, r3
 8004cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	6023      	str	r3, [r4, #0]
	uint8_t buttonPressed_msg[] = "Button pressed!\n\r";
 8004cfa:	4b40      	ldr	r3, [pc, #256]	@ (8004dfc <fastFlow_run+0x158>)
 8004cfc:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8004d00:	461d      	mov	r5, r3
 8004d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d06:	682b      	ldr	r3, [r5, #0]
 8004d08:	8023      	strh	r3, [r4, #0]

	uint8_t data_0[2] = {0xFF,0xFF};
 8004d0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d0e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint8_t data_1[2] = {0x00,0x00};
 8004d10:	2300      	movs	r3, #0
 8004d12:	853b      	strh	r3, [r7, #40]	@ 0x28

	uint8_t dump[2] = {0};
 8004d14:	2300      	movs	r3, #0
 8004d16:	84bb      	strh	r3, [r7, #36]	@ 0x24

	pcf8575_t ioexpander;

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d18:	463b      	mov	r3, r7
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
 8004d20:	609a      	str	r2, [r3, #8]
 8004d22:	60da      	str	r2, [r3, #12]
 8004d24:	611a      	str	r2, [r3, #16]

	pcf8575_init(&ioexpander, 0x00, _i2cRead, _i2cWrite, 0x00, 0x00);
 8004d26:	f107 0014 	add.w	r0, r7, #20
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	4b33      	ldr	r3, [pc, #204]	@ (8004e00 <fastFlow_run+0x15c>)
 8004d34:	4a33      	ldr	r2, [pc, #204]	@ (8004e04 <fastFlow_run+0x160>)
 8004d36:	2100      	movs	r1, #0
 8004d38:	f000 f992 	bl	8005060 <pcf8575_init>

	init_hardware();
 8004d3c:	f000 f986 	bl	800504c <init_hardware>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004d40:	2100      	movs	r1, #0
 8004d42:	4831      	ldr	r0, [pc, #196]	@ (8004e08 <fastFlow_run+0x164>)
 8004d44:	f7fe fc40 	bl	80035c8 <HAL_TIM_PWM_Start>

	HAL_UART_Transmit(&huart2, helloWorld_msg, sizeof(helloWorld_msg) - 1, 1000);
 8004d48:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8004d4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d50:	220f      	movs	r2, #15
 8004d52:	482e      	ldr	r0, [pc, #184]	@ (8004e0c <fastFlow_run+0x168>)
 8004d54:	f7ff fbea 	bl	800452c <HAL_UART_Transmit>


	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8;
 8004d58:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004d5c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; // Open-Drain Alternate Function
 8004d5e:	2312      	movs	r3, #18
 8004d60:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // AF4 for I2C1
 8004d6a:	2304      	movs	r3, #4
 8004d6c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d6e:	463b      	mov	r3, r7
 8004d70:	4619      	mov	r1, r3
 8004d72:	4827      	ldr	r0, [pc, #156]	@ (8004e10 <fastFlow_run+0x16c>)
 8004d74:	f7fc fb64 	bl	8001440 <HAL_GPIO_Init>

	//HAL_I2C_Master_Receive(&hi2c1, 0x02 << 1, dump, 2, 0);


	// Reset I2C1 Peripheral
	__HAL_RCC_I2C1_FORCE_RESET();
 8004d78:	4b26      	ldr	r3, [pc, #152]	@ (8004e14 <fastFlow_run+0x170>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	4a25      	ldr	r2, [pc, #148]	@ (8004e14 <fastFlow_run+0x170>)
 8004d7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d82:	6213      	str	r3, [r2, #32]
	__HAL_RCC_I2C1_RELEASE_RESET();
 8004d84:	4b23      	ldr	r3, [pc, #140]	@ (8004e14 <fastFlow_run+0x170>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	4a22      	ldr	r2, [pc, #136]	@ (8004e14 <fastFlow_run+0x170>)
 8004d8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d8e:	6213      	str	r3, [r2, #32]

	// Re-initialize I2C1
	HAL_I2C_DeInit(&hi2c1);
 8004d90:	4821      	ldr	r0, [pc, #132]	@ (8004e18 <fastFlow_run+0x174>)
 8004d92:	f7fc ff1b 	bl	8001bcc <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 8004d96:	4820      	ldr	r0, [pc, #128]	@ (8004e18 <fastFlow_run+0x174>)
 8004d98:	f7fc fdd4 	bl	8001944 <HAL_I2C_Init>

		//display_updateRoutine();
		HAL_Delay(100);
		*/
		//pcf8575_togglePin(&ioexpander, PCF8575_IOPORT_1, 0);
		if(HAL_I2C_Master_Transmit(&hi2c1, 0x20 << 1, data_0, 2, 0)!=HAL_OK){
 8004d9c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004da0:	2300      	movs	r3, #0
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	2302      	movs	r3, #2
 8004da6:	2140      	movs	r1, #64	@ 0x40
 8004da8:	481b      	ldr	r0, [pc, #108]	@ (8004e18 <fastFlow_run+0x174>)
 8004daa:	f7fc ff3f 	bl	8001c2c <HAL_I2C_Master_Transmit>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <fastFlow_run+0x114>
			while(1);
 8004db4:	bf00      	nop
 8004db6:	e7fd      	b.n	8004db4 <fastFlow_run+0x110>
		}
		HAL_Delay(1000);
 8004db8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004dbc:	f7fc fa36 	bl	800122c <HAL_Delay>
		if(HAL_I2C_Master_Transmit(&hi2c1, 0x20 << 1, data_1, 2, 0)!=HAL_OK){
 8004dc0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	2302      	movs	r3, #2
 8004dca:	2140      	movs	r1, #64	@ 0x40
 8004dcc:	4812      	ldr	r0, [pc, #72]	@ (8004e18 <fastFlow_run+0x174>)
 8004dce:	f7fc ff2d 	bl	8001c2c <HAL_I2C_Master_Transmit>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <fastFlow_run+0x138>
			while(1);
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <fastFlow_run+0x134>
		}
		HAL_Delay(1000);
 8004ddc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004de0:	f7fc fa24 	bl	800122c <HAL_Delay>
		if(HAL_I2C_Master_Transmit(&hi2c1, 0x20 << 1, data_0, 2, 0)!=HAL_OK){
 8004de4:	e7da      	b.n	8004d9c <fastFlow_run+0xf8>
 8004de6:	bf00      	nop
 8004de8:	0800516c 	.word	0x0800516c
 8004dec:	0800517c 	.word	0x0800517c
 8004df0:	0800518c 	.word	0x0800518c
 8004df4:	0800519c 	.word	0x0800519c
 8004df8:	080051b4 	.word	0x080051b4
 8004dfc:	080051c8 	.word	0x080051c8
 8004e00:	08004e1d 	.word	0x08004e1d
 8004e04:	08004e4d 	.word	0x08004e4d
 8004e08:	2000011c 	.word	0x2000011c
 8004e0c:	200001f4 	.word	0x200001f4
 8004e10:	40020400 	.word	0x40020400
 8004e14:	40023800 	.word	0x40023800
 8004e18:	20000028 	.word	0x20000028

08004e1c <_i2cWrite>:
	}
}

void _i2cWrite(uint8_t address, uint8_t* data,uint8_t len)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	4603      	mov	r3, r0
 8004e24:	6039      	str	r1, [r7, #0]
 8004e26:	71fb      	strb	r3, [r7, #7]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, address, data, len, 0);
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	b299      	uxth	r1, r3
 8004e30:	79bb      	ldrb	r3, [r7, #6]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2200      	movs	r2, #0
 8004e36:	9200      	str	r2, [sp, #0]
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	4803      	ldr	r0, [pc, #12]	@ (8004e48 <_i2cWrite+0x2c>)
 8004e3c:	f7fc fef6 	bl	8001c2c <HAL_I2C_Master_Transmit>
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000028 	.word	0x20000028

08004e4c <_i2cRead>:

void _i2cRead(uint8_t address, uint8_t* data, uint8_t len)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	4603      	mov	r3, r0
 8004e54:	6039      	str	r1, [r7, #0]
 8004e56:	71fb      	strb	r3, [r7, #7]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Receive(&hi2c1, address, data, len, 0);
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	b299      	uxth	r1, r3
 8004e60:	79bb      	ldrb	r3, [r7, #6]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2200      	movs	r2, #0
 8004e66:	9200      	str	r2, [sp, #0]
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	4803      	ldr	r0, [pc, #12]	@ (8004e78 <_i2cRead+0x2c>)
 8004e6c:	f7fc ffdc 	bl	8001e28 <HAL_I2C_Master_Receive>
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000028 	.word	0x20000028

08004e7c <buzzer_init>:

#include "main.h"
#include "tim.h"

void buzzer_init()
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
	//HAL_TIM_Stop(&htim4);
}
 8004e80:	bf00      	nop
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <display_init>:
void _writeToDisplay();
void _updateDisplayArray();


void display_init()
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
	_displayCursorRow = 0;
 8004e90:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <display_init+0x3c>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	701a      	strb	r2, [r3, #0]
	_displayCursorIndex = 0;
 8004e96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ecc <display_init+0x40>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]

	display_request(SET_FUNCTION, 0, 0);
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	f000 f815 	bl	8004ed0 <display_request>
	//display_request(SET_CURSOR_MODE,INVISIBLE,0);
	display_request(SET_CURSOR_MODE,BLINK,0);
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	2002      	movs	r0, #2
 8004eac:	f000 f810 	bl	8004ed0 <display_request>
	display_request(SET_CURSOR_MODE,AUTO_INCREMENT,0);
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2104      	movs	r1, #4
 8004eb4:	2002      	movs	r0, #2
 8004eb6:	f000 f80b 	bl	8004ed0 <display_request>
	display_request(UPDATE_DISPLAY,0,0);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	f000 f806 	bl	8004ed0 <display_request>
}
 8004ec4:	bf00      	nop
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000240 	.word	0x20000240
 8004ecc:	20000241 	.word	0x20000241

08004ed0 <display_request>:

void display_request(
		display_cmd_t cmd,
		uint8_t var1,
		uint8_t var2)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
 8004eda:	460b      	mov	r3, r1
 8004edc:	71bb      	strb	r3, [r7, #6]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	717b      	strb	r3, [r7, #5]
	if(cmd == UPDATE_DISPLAY) {
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d111      	bne.n	8004f0c <display_request+0x3c>
		_updateDisplayArray();
 8004ee8:	f000 f850 	bl	8004f8c <_updateDisplayArray>
		_placeRequest(SET_CURSOR_POSITION, 0, 0);
 8004eec:	2200      	movs	r2, #0
 8004eee:	2100      	movs	r1, #0
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f000 f815 	bl	8004f20 <_placeRequest>
		_placeRequest(UPDATE_DISPLAY, 0, 0);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2100      	movs	r1, #0
 8004efa:	2001      	movs	r0, #1
 8004efc:	f000 f810 	bl	8004f20 <_placeRequest>
		_placeRequest(SET_CURSOR_POSITION, 0, 15);
 8004f00:	220f      	movs	r2, #15
 8004f02:	2100      	movs	r1, #0
 8004f04:	2000      	movs	r0, #0
 8004f06:	f000 f80b 	bl	8004f20 <_placeRequest>
	} else {
		_placeRequest(cmd,var1,var2);
	}
}
 8004f0a:	e005      	b.n	8004f18 <display_request+0x48>
		_placeRequest(cmd,var1,var2);
 8004f0c:	797a      	ldrb	r2, [r7, #5]
 8004f0e:	79b9      	ldrb	r1, [r7, #6]
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f804 	bl	8004f20 <_placeRequest>
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_placeRequest>:
	_workIndex++;
	_workIndex &= 0x1F;
}

void _placeRequest(uint8_t mode, uint8_t var1, uint8_t var2)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	71fb      	strb	r3, [r7, #7]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	71bb      	strb	r3, [r7, #6]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	717b      	strb	r3, [r7, #5]
	_writeIndex++;
 8004f32:	4b14      	ldr	r3, [pc, #80]	@ (8004f84 <_placeRequest+0x64>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	3301      	adds	r3, #1
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4b12      	ldr	r3, [pc, #72]	@ (8004f84 <_placeRequest+0x64>)
 8004f3c:	701a      	strb	r2, [r3, #0]
	_writeIndex &= 0x1F;	//overflow reset
 8004f3e:	4b11      	ldr	r3, [pc, #68]	@ (8004f84 <_placeRequest+0x64>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	4b0e      	ldr	r3, [pc, #56]	@ (8004f84 <_placeRequest+0x64>)
 8004f4a:	701a      	strb	r2, [r3, #0]

	_requestPipeline[0][_writeIndex] = mode;
 8004f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <_placeRequest+0x64>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	4619      	mov	r1, r3
 8004f52:	4a0d      	ldr	r2, [pc, #52]	@ (8004f88 <_placeRequest+0x68>)
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	5453      	strb	r3, [r2, r1]
	_requestPipeline[1][_writeIndex] = var1;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <_placeRequest+0x64>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <_placeRequest+0x68>)
 8004f60:	4413      	add	r3, r2
 8004f62:	79ba      	ldrb	r2, [r7, #6]
 8004f64:	f883 2020 	strb.w	r2, [r3, #32]
	_requestPipeline[2][_writeIndex] = var2;
 8004f68:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <_placeRequest+0x64>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <_placeRequest+0x68>)
 8004f70:	4413      	add	r3, r2
 8004f72:	797a      	ldrb	r2, [r7, #5]
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	200002c4 	.word	0x200002c4
 8004f88:	200002c8 	.word	0x200002c8

08004f8c <_updateDisplayArray>:
			break;
	}
}

void _updateDisplayArray()
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
	uint8_t i  = 0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	71fb      	strb	r3, [r7, #7]

	for(i = 0; i<16; i++) {
 8004f96:	2300      	movs	r3, #0
 8004f98:	71fb      	strb	r3, [r7, #7]
 8004f9a:	e008      	b.n	8004fae <_updateDisplayArray+0x22>
		_displayOutputArray[i] = _displayOutputArrayMirror[i];
 8004f9c:	79fa      	ldrb	r2, [r7, #7]
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	4923      	ldr	r1, [pc, #140]	@ (8005030 <_updateDisplayArray+0xa4>)
 8004fa2:	5c89      	ldrb	r1, [r1, r2]
 8004fa4:	4a23      	ldr	r2, [pc, #140]	@ (8005034 <_updateDisplayArray+0xa8>)
 8004fa6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<16; i++) {
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	3301      	adds	r3, #1
 8004fac:	71fb      	strb	r3, [r7, #7]
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	2b0f      	cmp	r3, #15
 8004fb2:	d9f3      	bls.n	8004f9c <_updateDisplayArray+0x10>
	}
	for(i = 0; i<16; i++) {
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	71fb      	strb	r3, [r7, #7]
 8004fb8:	e00b      	b.n	8004fd2 <_updateDisplayArray+0x46>
		_displayOutputArray[i+32] = _displayOutputArrayMirror[i+16];
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	f103 0210 	add.w	r2, r3, #16
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	3320      	adds	r3, #32
 8004fc4:	491a      	ldr	r1, [pc, #104]	@ (8005030 <_updateDisplayArray+0xa4>)
 8004fc6:	5c89      	ldrb	r1, [r1, r2]
 8004fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005034 <_updateDisplayArray+0xa8>)
 8004fca:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<16; i++) {
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	71fb      	strb	r3, [r7, #7]
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2b0f      	cmp	r3, #15
 8004fd6:	d9f0      	bls.n	8004fba <_updateDisplayArray+0x2e>
	}
	for(i = 0; i<16; i++) {
 8004fd8:	2300      	movs	r3, #0
 8004fda:	71fb      	strb	r3, [r7, #7]
 8004fdc:	e00b      	b.n	8004ff6 <_updateDisplayArray+0x6a>
		_displayOutputArray[i+16] = _displayOutputArrayMirror[i+32];
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	f103 0220 	add.w	r2, r3, #32
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	3310      	adds	r3, #16
 8004fe8:	4911      	ldr	r1, [pc, #68]	@ (8005030 <_updateDisplayArray+0xa4>)
 8004fea:	5c89      	ldrb	r1, [r1, r2]
 8004fec:	4a11      	ldr	r2, [pc, #68]	@ (8005034 <_updateDisplayArray+0xa8>)
 8004fee:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<16; i++) {
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	71fb      	strb	r3, [r7, #7]
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	2b0f      	cmp	r3, #15
 8004ffa:	d9f0      	bls.n	8004fde <_updateDisplayArray+0x52>
	}
	for(i = 0; i<16; i++) {
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	71fb      	strb	r3, [r7, #7]
 8005000:	e00b      	b.n	800501a <_updateDisplayArray+0x8e>
		_displayOutputArray[i+48] = _displayOutputArrayMirror[i+48];
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	3330      	adds	r3, #48	@ 0x30
 800500c:	4908      	ldr	r1, [pc, #32]	@ (8005030 <_updateDisplayArray+0xa4>)
 800500e:	5c89      	ldrb	r1, [r1, r2]
 8005010:	4a08      	ldr	r2, [pc, #32]	@ (8005034 <_updateDisplayArray+0xa8>)
 8005012:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<16; i++) {
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	3301      	adds	r3, #1
 8005018:	71fb      	strb	r3, [r7, #7]
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	2b0f      	cmp	r3, #15
 800501e:	d9f0      	bls.n	8005002 <_updateDisplayArray+0x76>
	}
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000244 	.word	0x20000244
 8005034:	20000284 	.word	0x20000284

08005038 <encoder_init>:
#include <stdint.h>

const uint32_t _c_debounce_tick_delay = 10;

void encoder_init()
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800503c:	213c      	movs	r1, #60	@ 0x3c
 800503e:	4802      	ldr	r0, [pc, #8]	@ (8005048 <encoder_init+0x10>)
 8005040:	f7fe fc18 	bl	8003874 <HAL_TIM_Encoder_Start>
}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000164 	.word	0x20000164

0800504c <init_hardware>:
#include "buzzer.h"
#include "encoder.h"
#include "display.h"

void init_hardware()
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
	encoder_init();
 8005050:	f7ff fff2 	bl	8005038 <encoder_init>
	buzzer_init();
 8005054:	f7ff ff12 	bl	8004e7c <buzzer_init>
	display_init();
 8005058:	f7ff ff18 	bl	8004e8c <display_init>
}
 800505c:	bf00      	nop
 800505e:	bd80      	pop	{r7, pc}

08005060 <pcf8575_init>:
		uint8_t i2cAddress,
		i2c_read_t i2cRead,
		i2c_write_t i2cWrite,
		uint8_t port0,
		uint8_t port1)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	460b      	mov	r3, r1
 800506e:	72fb      	strb	r3, [r7, #11]
	// init objects
	object->address = (pcf8575_I2CaddrBase | (pcf8575_I2CaddrMask & i2cAddress)) << 1;
 8005070:	2207      	movs	r2, #7
 8005072:	7afb      	ldrb	r3, [r7, #11]
 8005074:	4013      	ands	r3, r2
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2220      	movs	r2, #32
 800507a:	4313      	orrs	r3, r2
 800507c:	b2db      	uxtb	r3, r3
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	701a      	strb	r2, [r3, #0]
	object->_i2cRead = i2cRead;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	605a      	str	r2, [r3, #4]
	object->_i2cWrite = i2cWrite;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	609a      	str	r2, [r3, #8]
	object->_port0Buf = port0;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	7e3a      	ldrb	r2, [r7, #24]
 8005096:	731a      	strb	r2, [r3, #12]
	object->_port1Buf = port1;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	7f3a      	ldrb	r2, [r7, #28]
 800509c:	735a      	strb	r2, [r3, #13]

	// init hardware
	_updatePorts(object);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f816 	bl	80050d0 <_updatePorts>
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <_write>:
{
	object->_i2cRead(object->address, data, len);
}

void _write(pcf8575_t *object, uint8_t *data, uint8_t len)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	71fb      	strb	r3, [r7, #7]
	object->_i2cWrite(object->address, data, len);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	7810      	ldrb	r0, [r2, #0]
 80050c2:	79fa      	ldrb	r2, [r7, #7]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	4798      	blx	r3
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <_updatePorts>:

void _updatePorts(pcf8575_t *object)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {object->_port0Buf, object->_port1Buf};
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	7b1b      	ldrb	r3, [r3, #12]
 80050dc:	733b      	strb	r3, [r7, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	7b5b      	ldrb	r3, [r3, #13]
 80050e2:	737b      	strb	r3, [r7, #13]
	_write(object, data, 2);
 80050e4:	f107 030c 	add.w	r3, r7, #12
 80050e8:	2202      	movs	r2, #2
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ffdd 	bl	80050ac <_write>
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <memset>:
 80050fa:	4402      	add	r2, r0
 80050fc:	4603      	mov	r3, r0
 80050fe:	4293      	cmp	r3, r2
 8005100:	d100      	bne.n	8005104 <memset+0xa>
 8005102:	4770      	bx	lr
 8005104:	f803 1b01 	strb.w	r1, [r3], #1
 8005108:	e7f9      	b.n	80050fe <memset+0x4>
	...

0800510c <__libc_init_array>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	4d0d      	ldr	r5, [pc, #52]	@ (8005144 <__libc_init_array+0x38>)
 8005110:	4c0d      	ldr	r4, [pc, #52]	@ (8005148 <__libc_init_array+0x3c>)
 8005112:	1b64      	subs	r4, r4, r5
 8005114:	10a4      	asrs	r4, r4, #2
 8005116:	2600      	movs	r6, #0
 8005118:	42a6      	cmp	r6, r4
 800511a:	d109      	bne.n	8005130 <__libc_init_array+0x24>
 800511c:	4d0b      	ldr	r5, [pc, #44]	@ (800514c <__libc_init_array+0x40>)
 800511e:	4c0c      	ldr	r4, [pc, #48]	@ (8005150 <__libc_init_array+0x44>)
 8005120:	f000 f818 	bl	8005154 <_init>
 8005124:	1b64      	subs	r4, r4, r5
 8005126:	10a4      	asrs	r4, r4, #2
 8005128:	2600      	movs	r6, #0
 800512a:	42a6      	cmp	r6, r4
 800512c:	d105      	bne.n	800513a <__libc_init_array+0x2e>
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	f855 3b04 	ldr.w	r3, [r5], #4
 8005134:	4798      	blx	r3
 8005136:	3601      	adds	r6, #1
 8005138:	e7ee      	b.n	8005118 <__libc_init_array+0xc>
 800513a:	f855 3b04 	ldr.w	r3, [r5], #4
 800513e:	4798      	blx	r3
 8005140:	3601      	adds	r6, #1
 8005142:	e7f2      	b.n	800512a <__libc_init_array+0x1e>
 8005144:	080051fc 	.word	0x080051fc
 8005148:	080051fc 	.word	0x080051fc
 800514c:	080051fc 	.word	0x080051fc
 8005150:	08005200 	.word	0x08005200

08005154 <_init>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr

08005160 <_fini>:
 8005160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005162:	bf00      	nop
 8005164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005166:	bc08      	pop	{r3}
 8005168:	469e      	mov	lr, r3
 800516a:	4770      	bx	lr
