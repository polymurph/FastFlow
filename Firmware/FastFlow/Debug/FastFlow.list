
FastFlow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000985c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08009a00  08009a00  0000aa00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de0  08009de0  0000b220  2**0
                  CONTENTS
  4 .ARM          00000008  08009de0  08009de0  0000ade0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de8  08009de8  0000b220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de8  08009de8  0000ade8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009dec  08009dec  0000adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  08009df0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000220  0800a010  0000b220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800a010  0000b754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016904  00000000  00000000  0000b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c94  00000000  00000000  00021b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  000257e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b0  00000000  00000000  00026d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197fe  00000000  00000000  00027e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b074  00000000  00000000  0004162e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000957aa  00000000  00000000  0005c6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1e4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069a0  00000000  00000000  000f1e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f8830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099e4 	.word	0x080099e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	080099e4 	.word	0x080099e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b35      	ldr	r3, [pc, #212]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a34      	ldr	r2, [pc, #208]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a26      	ldr	r2, [pc, #152]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_GPIO_Init+0xf0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_MAX31865_GPIO_Port, SPI3_CS_MAX31865_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f34:	4819      	ldr	r0, [pc, #100]	@ (8000f9c <MX_GPIO_Init+0xf4>)
 8000f36:	f001 f947 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4813      	ldr	r0, [pc, #76]	@ (8000fa0 <MX_GPIO_Init+0xf8>)
 8000f52:	f000 ffb5 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_BUTTON_Pin DOOR_CLOSED_Pin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin|DOOR_CLOSED_Pin;
 8000f56:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_GPIO_Init+0xf8>)
 8000f6c:	f000 ffa8 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_MAX31865_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_MAX31865_Pin;
 8000f70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_MAX31865_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <MX_GPIO_Init+0xf4>)
 8000f8a:	f000 ff99 	bl	8001ec0 <HAL_GPIO_Init>

}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	@ 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020800 	.word	0x40020800

08000fa4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000faa:	4a13      	ldr	r2, [pc, #76]	@ (8000ff8 <MX_I2C1_Init+0x54>)
 8000fac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fb0:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <MX_I2C1_Init+0x58>)
 8000fb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fe2:	f001 f90b 	bl	80021fc <HAL_I2C_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fec:	f000 f8e6 	bl	80011bc <Error_Handler>
  /* USER CODE BEGIN I2C1_Init 2 */


  /* USER CODE END I2C1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000023c 	.word	0x2000023c
 8000ff8:	40005400 	.word	0x40005400
 8000ffc:	000186a0 	.word	0x000186a0

08001000 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a21      	ldr	r2, [pc, #132]	@ (80010a4 <HAL_I2C_MspInit+0xa4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d13b      	bne.n	800109a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <HAL_I2C_MspInit+0xa8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <HAL_I2C_MspInit+0xa8>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_I2C_MspInit+0xa8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800103e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001044:	2312      	movs	r3, #18
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001050:	2304      	movs	r3, #4
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4814      	ldr	r0, [pc, #80]	@ (80010ac <HAL_I2C_MspInit+0xac>)
 800105c:	f000 ff30 	bl	8001ec0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <HAL_I2C_MspInit+0xa8>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <HAL_I2C_MspInit+0xa8>)
 800106a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001070:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <HAL_I2C_MspInit+0xa8>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_I2C_MspInit+0xa8>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <HAL_I2C_MspInit+0xa8>)
 8001082:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001086:	6213      	str	r3, [r2, #32]
    HAL_Delay(100);
 8001088:	2064      	movs	r0, #100	@ 0x64
 800108a:	f000 fe0f 	bl	8001cac <HAL_Delay>
    __HAL_RCC_I2C1_RELEASE_RESET();
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_I2C_MspInit+0xa8>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <HAL_I2C_MspInit+0xa8>)
 8001094:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001098:	6213      	str	r3, [r2, #32]
    // https://community.st.com/t5/stm32-mcus-products/stm32f4-i2c-issues-solved/td-p/526774
    // https://github.com/wokwi/wokwi-features/issues/744

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	@ 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40005400 	.word	0x40005400
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b4:	f000 fd88 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b8:	f000 f816 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010bc:	f7ff fef4 	bl	8000ea8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010c0:	f000 fce6 	bl	8001a90 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80010c4:	f000 f880 	bl	80011c8 <MX_SPI3_Init>
  MX_TIM1_Init();
 80010c8:	f000 f9f2 	bl	80014b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010cc:	f000 faec 	bl	80016a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010d0:	f000 fb3e 	bl	8001750 <MX_TIM4_Init>
  MX_TIM2_Init();
 80010d4:	f000 fa70 	bl	80015b8 <MX_TIM2_Init>
  MX_I2C1_Init();
 80010d8:	f7ff ff64 	bl	8000fa4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  fastFlow_init();
 80010dc:	f004 fc94 	bl	8005a08 <fastFlow_init>
  fastFlow_run();
 80010e0:	f004 fca4 	bl	8005a2c <fastFlow_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <main+0x34>

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	@ 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	@ 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 fbab 	bl	8007852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <SystemClock_Config+0xcc>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <SystemClock_Config+0xcc>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	@ 0x40
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <SystemClock_Config+0xcc>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <SystemClock_Config+0xd0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a21      	ldr	r2, [pc, #132]	@ (80011b8 <SystemClock_Config+0xd0>)
 8001132:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <SystemClock_Config+0xd0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114c:	2310      	movs	r3, #16
 800114e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001150:	2302      	movs	r3, #2
 8001152:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001154:	2300      	movs	r3, #0
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001158:	2310      	movs	r3, #16
 800115a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800115c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001160:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001162:	2304      	movs	r3, #4
 8001164:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001166:	2304      	movs	r3, #4
 8001168:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	4618      	mov	r0, r3
 8001170:	f002 f83e 	bl	80031f0 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800117a:	f000 f81f 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2102      	movs	r1, #2
 800119a:	4618      	mov	r0, r3
 800119c:	f002 faa0 	bl	80036e0 <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011a6:	f000 f809 	bl	80011bc <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3750      	adds	r7, #80	@ 0x50
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <Error_Handler+0x8>

080011c8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80011cc:	4b17      	ldr	r3, [pc, #92]	@ (800122c <MX_SPI3_Init+0x64>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	@ (8001230 <MX_SPI3_Init+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011d2:	4b16      	ldr	r3, [pc, #88]	@ (800122c <MX_SPI3_Init+0x64>)
 80011d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <MX_SPI3_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <MX_SPI3_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_SPI3_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <MX_SPI3_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <MX_SPI3_Init+0x64>)
 80011f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <MX_SPI3_Init+0x64>)
 80011fc:	2230      	movs	r2, #48	@ 0x30
 80011fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <MX_SPI3_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <MX_SPI3_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <MX_SPI3_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <MX_SPI3_Init+0x64>)
 8001214:	220a      	movs	r2, #10
 8001216:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	@ (800122c <MX_SPI3_Init+0x64>)
 800121a:	f002 fc81 	bl	8003b20 <HAL_SPI_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001224:	f7ff ffca 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000290 	.word	0x20000290
 8001230:	40003c00 	.word	0x40003c00

08001234 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a19      	ldr	r2, [pc, #100]	@ (80012b8 <HAL_SPI_MspInit+0x84>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d12c      	bne.n	80012b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <HAL_SPI_MspInit+0x88>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a17      	ldr	r2, [pc, #92]	@ (80012bc <HAL_SPI_MspInit+0x88>)
 8001260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_SPI_MspInit+0x88>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <HAL_SPI_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a10      	ldr	r2, [pc, #64]	@ (80012bc <HAL_SPI_MspInit+0x88>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <HAL_SPI_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800128e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012a0:	2306      	movs	r3, #6
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <HAL_SPI_MspInit+0x8c>)
 80012ac:	f000 fe08 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40003c00 	.word	0x40003c00
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001310 <HAL_MspInit+0x4c>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <HAL_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <HAL_MspInit+0x4c>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001302:	2007      	movs	r0, #7
 8001304:	f000 fda8 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <NMI_Handler+0x4>

0800131c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <MemManage_Handler+0x4>

0800132c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <UsageFault_Handler+0x4>

0800133c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136a:	f000 fc7f 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}

08001372 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  return 1;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_kill>:

int _kill(int pid, int sig)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800138c:	f006 fab4 	bl	80078f8 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	2216      	movs	r2, #22
 8001394:	601a      	str	r2, [r3, #0]
  return -1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_exit>:

void _exit (int status)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013aa:	f04f 31ff 	mov.w	r1, #4294967295
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffe7 	bl	8001382 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <_exit+0x12>

080013b8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013e0:	605a      	str	r2, [r3, #4]
  return 0;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_isatty>:

int _isatty(int file)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f8:	2301      	movs	r3, #1
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001428:	4a14      	ldr	r2, [pc, #80]	@ (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001450:	f006 fa52 	bl	80078f8 <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20020000 	.word	0x20020000
 8001480:	00000400 	.word	0x00000400
 8001484:	200002e8 	.word	0x200002e8
 8001488:	20000758 	.word	0x20000758

0800148c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b092      	sub	sp, #72	@ 0x48
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2220      	movs	r2, #32
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f006 f9b9 	bl	8007852 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014e0:	4b33      	ldr	r3, [pc, #204]	@ (80015b0 <MX_TIM1_Init+0x100>)
 80014e2:	4a34      	ldr	r2, [pc, #208]	@ (80015b4 <MX_TIM1_Init+0x104>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014e6:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <MX_TIM1_Init+0x100>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <MX_TIM1_Init+0x100>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014f2:	4b2f      	ldr	r3, [pc, #188]	@ (80015b0 <MX_TIM1_Init+0x100>)
 80014f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fa:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <MX_TIM1_Init+0x100>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001500:	4b2b      	ldr	r3, [pc, #172]	@ (80015b0 <MX_TIM1_Init+0x100>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <MX_TIM1_Init+0x100>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800150c:	4828      	ldr	r0, [pc, #160]	@ (80015b0 <MX_TIM1_Init+0x100>)
 800150e:	f002 fe64 	bl	80041da <HAL_TIM_OC_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001518:	f7ff fe50 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001524:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001528:	4619      	mov	r1, r3
 800152a:	4821      	ldr	r0, [pc, #132]	@ (80015b0 <MX_TIM1_Init+0x100>)
 800152c:	f003 fda0 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001536:	f7ff fe41 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4814      	ldr	r0, [pc, #80]	@ (80015b0 <MX_TIM1_Init+0x100>)
 8001560:	f003 f8c8 	bl	80046f4 <HAL_TIM_OC_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800156a:	f7ff fe27 	bl	80011bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001582:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001586:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <MX_TIM1_Init+0x100>)
 8001592:	f003 fddb 	bl	800514c <HAL_TIMEx_ConfigBreakDeadTime>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800159c:	f7ff fe0e 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015a0:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <MX_TIM1_Init+0x100>)
 80015a2:	f000 f9ef 	bl	8001984 <HAL_TIM_MspPostInit>

}
 80015a6:	bf00      	nop
 80015a8:	3748      	adds	r7, #72	@ 0x48
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002ec 	.word	0x200002ec
 80015b4:	40010000 	.word	0x40010000

080015b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08e      	sub	sp, #56	@ 0x38
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	f107 0320 	add.w	r3, r7, #32
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
 80015e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e8:	4b2e      	ldr	r3, [pc, #184]	@ (80016a4 <MX_TIM2_Init+0xec>)
 80015ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0x0A04;
 80015f0:	4b2c      	ldr	r3, [pc, #176]	@ (80016a4 <MX_TIM2_Init+0xec>)
 80015f2:	f640 2204 	movw	r2, #2564	@ 0xa04
 80015f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <MX_TIM2_Init+0xec>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 80015fe:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <MX_TIM2_Init+0xec>)
 8001600:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001604:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001606:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <MX_TIM2_Init+0xec>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800160c:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <MX_TIM2_Init+0xec>)
 800160e:	2280      	movs	r2, #128	@ 0x80
 8001610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001612:	4824      	ldr	r0, [pc, #144]	@ (80016a4 <MX_TIM2_Init+0xec>)
 8001614:	f002 fd92 	bl	800413c <HAL_TIM_Base_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800161e:	f7ff fdcd 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001628:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800162c:	4619      	mov	r1, r3
 800162e:	481d      	ldr	r0, [pc, #116]	@ (80016a4 <MX_TIM2_Init+0xec>)
 8001630:	f003 f97e 	bl	8004930 <HAL_TIM_ConfigClockSource>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800163a:	f7ff fdbf 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800163e:	4819      	ldr	r0, [pc, #100]	@ (80016a4 <MX_TIM2_Init+0xec>)
 8001640:	f002 fe1a 	bl	8004278 <HAL_TIM_PWM_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800164a:	f7ff fdb7 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	4619      	mov	r1, r3
 800165c:	4811      	ldr	r0, [pc, #68]	@ (80016a4 <MX_TIM2_Init+0xec>)
 800165e:	f003 fd07 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001668:	f7ff fda8 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166c:	2360      	movs	r3, #96	@ 0x60
 800166e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0x0FFF;
 8001670:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <MX_TIM2_Init+0xec>)
 8001686:	f003 f891 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001690:	f7ff fd94 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <MX_TIM2_Init+0xec>)
 8001696:	f000 f975 	bl	8001984 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3738      	adds	r7, #56	@ 0x38
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000334 	.word	0x20000334

080016a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	@ 0x30
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	2224      	movs	r2, #36	@ 0x24
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f006 f8cb 	bl	8007852 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c4:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <MX_TIM3_Init+0xa0>)
 80016c6:	4a21      	ldr	r2, [pc, #132]	@ (800174c <MX_TIM3_Init+0xa4>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <MX_TIM3_Init+0xa0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <MX_TIM3_Init+0xa0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <MX_TIM3_Init+0xa0>)
 80016d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <MX_TIM3_Init+0xa0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <MX_TIM3_Init+0xa0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ea:	2303      	movs	r3, #3
 80016ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016f2:	2301      	movs	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80016fa:	230f      	movs	r3, #15
 80016fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001702:	2301      	movs	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800170a:	230f      	movs	r3, #15
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4619      	mov	r1, r3
 8001714:	480c      	ldr	r0, [pc, #48]	@ (8001748 <MX_TIM3_Init+0xa0>)
 8001716:	f002 feb9 	bl	800448c <HAL_TIM_Encoder_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001720:	f7ff fd4c 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	@ (8001748 <MX_TIM3_Init+0xa0>)
 8001732:	f003 fc9d 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800173c:	f7ff fd3e 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	3730      	adds	r7, #48	@ 0x30
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000037c 	.word	0x2000037c
 800174c:	40000400 	.word	0x40000400

08001750 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08e      	sub	sp, #56	@ 0x38
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	f107 0320 	add.w	r3, r7, #32
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
 800177c:	615a      	str	r2, [r3, #20]
 800177e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001780:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <MX_TIM4_Init+0xec>)
 8001782:	4a2f      	ldr	r2, [pc, #188]	@ (8001840 <MX_TIM4_Init+0xf0>)
 8001784:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20000;
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <MX_TIM4_Init+0xec>)
 8001788:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800178c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <MX_TIM4_Init+0xec>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 8001794:	4b29      	ldr	r3, [pc, #164]	@ (800183c <MX_TIM4_Init+0xec>)
 8001796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800179a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800179c:	4b27      	ldr	r3, [pc, #156]	@ (800183c <MX_TIM4_Init+0xec>)
 800179e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b25      	ldr	r3, [pc, #148]	@ (800183c <MX_TIM4_Init+0xec>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017aa:	4824      	ldr	r0, [pc, #144]	@ (800183c <MX_TIM4_Init+0xec>)
 80017ac:	f002 fcc6 	bl	800413c <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80017b6:	f7ff fd01 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c4:	4619      	mov	r1, r3
 80017c6:	481d      	ldr	r0, [pc, #116]	@ (800183c <MX_TIM4_Init+0xec>)
 80017c8:	f003 f8b2 	bl	8004930 <HAL_TIM_ConfigClockSource>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80017d2:	f7ff fcf3 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80017d6:	4819      	ldr	r0, [pc, #100]	@ (800183c <MX_TIM4_Init+0xec>)
 80017d8:	f002 fcff 	bl	80041da <HAL_TIM_OC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80017e2:	f7ff fceb 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	4619      	mov	r1, r3
 80017f4:	4811      	ldr	r0, [pc, #68]	@ (800183c <MX_TIM4_Init+0xec>)
 80017f6:	f003 fc3b 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001800:	f7ff fcdc 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0x7FFF;
 8001808:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800180c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2200      	movs	r2, #0
 800181a:	4619      	mov	r1, r3
 800181c:	4807      	ldr	r0, [pc, #28]	@ (800183c <MX_TIM4_Init+0xec>)
 800181e:	f002 ff69 	bl	80046f4 <HAL_TIM_OC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001828:	f7ff fcc8 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800182c:	4803      	ldr	r0, [pc, #12]	@ (800183c <MX_TIM4_Init+0xec>)
 800182e:	f000 f8a9 	bl	8001984 <HAL_TIM_MspPostInit>

}
 8001832:	bf00      	nop
 8001834:	3738      	adds	r7, #56	@ 0x38
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200003c4 	.word	0x200003c4
 8001840:	40000800 	.word	0x40000800

08001844 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0b      	ldr	r2, [pc, #44]	@ (8001880 <HAL_TIM_OC_MspInit+0x3c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10d      	bne.n	8001872 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_TIM_OC_MspInit+0x40>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <HAL_TIM_OC_MspInit+0x40>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6453      	str	r3, [r2, #68]	@ 0x44
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <HAL_TIM_OC_MspInit+0x40>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40010000 	.word	0x40010000
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001898:	d10e      	bne.n	80018b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <HAL_TIM_Base_MspInit+0x64>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <HAL_TIM_Base_MspInit+0x64>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <HAL_TIM_Base_MspInit+0x64>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018b6:	e012      	b.n	80018de <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0c      	ldr	r2, [pc, #48]	@ (80018f0 <HAL_TIM_Base_MspInit+0x68>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d10d      	bne.n	80018de <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_TIM_Base_MspInit+0x64>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_TIM_Base_MspInit+0x64>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_TIM_Base_MspInit+0x64>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40000800 	.word	0x40000800

080018f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	@ (8001978 <HAL_TIM_Encoder_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12b      	bne.n	800196e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <HAL_TIM_Encoder_MspInit+0x88>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	4a17      	ldr	r2, [pc, #92]	@ (800197c <HAL_TIM_Encoder_MspInit+0x88>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6413      	str	r3, [r2, #64]	@ 0x40
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_TIM_Encoder_MspInit+0x88>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <HAL_TIM_Encoder_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a10      	ldr	r2, [pc, #64]	@ (800197c <HAL_TIM_Encoder_MspInit+0x88>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_TIM_Encoder_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 800194e:	23c0      	movs	r3, #192	@ 0xc0
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800195e:	2302      	movs	r3, #2
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	@ (8001980 <HAL_TIM_Encoder_MspInit+0x8c>)
 800196a:	f000 faa9 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	@ 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40000400 	.word	0x40000400
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a36      	ldr	r2, [pc, #216]	@ (8001a7c <HAL_TIM_MspPostInit+0xf8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d11f      	bne.n	80019e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b35      	ldr	r3, [pc, #212]	@ (8001a80 <HAL_TIM_MspPostInit+0xfc>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a34      	ldr	r2, [pc, #208]	@ (8001a80 <HAL_TIM_MspPostInit+0xfc>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b32      	ldr	r3, [pc, #200]	@ (8001a80 <HAL_TIM_MspPostInit+0xfc>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 80019c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4829      	ldr	r0, [pc, #164]	@ (8001a84 <HAL_TIM_MspPostInit+0x100>)
 80019e0:	f000 fa6e 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019e4:	e046      	b.n	8001a74 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM2)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ee:	d11e      	bne.n	8001a2e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <HAL_TIM_MspPostInit+0xfc>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	4a21      	ldr	r2, [pc, #132]	@ (8001a80 <HAL_TIM_MspPostInit+0xfc>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <HAL_TIM_MspPostInit+0xfc>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4817      	ldr	r0, [pc, #92]	@ (8001a84 <HAL_TIM_MspPostInit+0x100>)
 8001a28:	f000 fa4a 	bl	8001ec0 <HAL_GPIO_Init>
}
 8001a2c:	e022      	b.n	8001a74 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a15      	ldr	r2, [pc, #84]	@ (8001a88 <HAL_TIM_MspPostInit+0x104>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d11d      	bne.n	8001a74 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <HAL_TIM_MspPostInit+0xfc>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a40:	4a0f      	ldr	r2, [pc, #60]	@ (8001a80 <HAL_TIM_MspPostInit+0xfc>)
 8001a42:	f043 0302 	orr.w	r3, r3, #2
 8001a46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a48:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <HAL_TIM_MspPostInit+0xfc>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8001a54:	2340      	movs	r3, #64	@ 0x40
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a64:	2302      	movs	r3, #2
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4807      	ldr	r0, [pc, #28]	@ (8001a8c <HAL_TIM_MspPostInit+0x108>)
 8001a70:	f000 fa26 	bl	8001ec0 <HAL_GPIO_Init>
}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	@ 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40000800 	.word	0x40000800
 8001a8c:	40020400 	.word	0x40020400

08001a90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <MX_USART2_UART_Init+0x4c>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <MX_USART2_UART_Init+0x50>)
 8001a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <MX_USART2_UART_Init+0x4c>)
 8001a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <MX_USART2_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ac8:	f003 fb92 	bl	80051f0 <HAL_UART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ad2:	f7ff fb73 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000040c 	.word	0x2000040c
 8001ae0:	40004400 	.word	0x40004400

08001ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	@ (8001b68 <HAL_UART_MspInit+0x84>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12b      	bne.n	8001b5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a10      	ldr	r2, [pc, #64]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <HAL_UART_MspInit+0x8c>)
 8001b5a:	f000 f9b1 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	@ 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b78:	f7ff fc88 	bl	800148c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	@ (8001bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f005 feaf 	bl	8007904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba6:	f7ff fa83 	bl	80010b0 <main>
  bx  lr    
 8001baa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001bb8:	08009df0 	.word	0x08009df0
  ldr r2, =_sbss
 8001bbc:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001bc0:	20000754 	.word	0x20000754

08001bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <HAL_Init+0x40>)
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <HAL_Init+0x40>)
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a07      	ldr	r2, [pc, #28]	@ (8001c08 <HAL_Init+0x40>)
 8001bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f931 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f808 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfc:	f7ff fb62 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_InitTick+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_InitTick+0x58>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f93b 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 f911 	bl	8001e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	@ (8001c68 <HAL_InitTick+0x5c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20000454 	.word	0x20000454

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000454 	.word	0x20000454

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff ffee 	bl	8001c94 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	@ (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	@ (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	@ 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e24:	d301      	bcc.n	8001e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <SysTick_Config+0x40>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e32:	210f      	movs	r1, #15
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f7ff ff8e 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <SysTick_Config+0x40>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <SysTick_Config+0x40>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff47 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff5c 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff8e 	bl	8001dac <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff5d 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffb0 	bl	8001e14 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	@ 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e159      	b.n	8002190 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001edc:	2201      	movs	r2, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 8148 	bne.w	800218a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d005      	beq.n	8001f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d130      	bne.n	8001f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 0201 	and.w	r2, r3, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d017      	beq.n	8001fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d123      	bne.n	8002004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	69b9      	ldr	r1, [r7, #24]
 8002000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0203 	and.w	r2, r3, #3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80a2 	beq.w	800218a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b57      	ldr	r3, [pc, #348]	@ (80021a8 <HAL_GPIO_Init+0x2e8>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	4a56      	ldr	r2, [pc, #344]	@ (80021a8 <HAL_GPIO_Init+0x2e8>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002054:	6453      	str	r3, [r2, #68]	@ 0x44
 8002056:	4b54      	ldr	r3, [pc, #336]	@ (80021a8 <HAL_GPIO_Init+0x2e8>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002062:	4a52      	ldr	r2, [pc, #328]	@ (80021ac <HAL_GPIO_Init+0x2ec>)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a49      	ldr	r2, [pc, #292]	@ (80021b0 <HAL_GPIO_Init+0x2f0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d019      	beq.n	80020c2 <HAL_GPIO_Init+0x202>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a48      	ldr	r2, [pc, #288]	@ (80021b4 <HAL_GPIO_Init+0x2f4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x1fe>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a47      	ldr	r2, [pc, #284]	@ (80021b8 <HAL_GPIO_Init+0x2f8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x1fa>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a46      	ldr	r2, [pc, #280]	@ (80021bc <HAL_GPIO_Init+0x2fc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x1f6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a45      	ldr	r2, [pc, #276]	@ (80021c0 <HAL_GPIO_Init+0x300>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x1f2>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e008      	b.n	80020c4 <HAL_GPIO_Init+0x204>
 80020b2:	2307      	movs	r3, #7
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x204>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e004      	b.n	80020c4 <HAL_GPIO_Init+0x204>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_Init+0x204>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x204>
 80020c2:	2300      	movs	r3, #0
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f002 0203 	and.w	r2, r2, #3
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4093      	lsls	r3, r2
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d4:	4935      	ldr	r1, [pc, #212]	@ (80021ac <HAL_GPIO_Init+0x2ec>)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e2:	4b38      	ldr	r3, [pc, #224]	@ (80021c4 <HAL_GPIO_Init+0x304>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002106:	4a2f      	ldr	r2, [pc, #188]	@ (80021c4 <HAL_GPIO_Init+0x304>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210c:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <HAL_GPIO_Init+0x304>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002130:	4a24      	ldr	r2, [pc, #144]	@ (80021c4 <HAL_GPIO_Init+0x304>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002136:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <HAL_GPIO_Init+0x304>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215a:	4a1a      	ldr	r2, [pc, #104]	@ (80021c4 <HAL_GPIO_Init+0x304>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002160:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <HAL_GPIO_Init+0x304>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002184:	4a0f      	ldr	r2, [pc, #60]	@ (80021c4 <HAL_GPIO_Init+0x304>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3301      	adds	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	f67f aea2 	bls.w	8001edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3724      	adds	r7, #36	@ 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40013800 	.word	0x40013800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e12b      	b.n	8002466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe feec 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	@ 0x24
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800224e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800225e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002260:	f001 fc36 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8002264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a81      	ldr	r2, [pc, #516]	@ (8002470 <HAL_I2C_Init+0x274>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d807      	bhi.n	8002280 <HAL_I2C_Init+0x84>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a80      	ldr	r2, [pc, #512]	@ (8002474 <HAL_I2C_Init+0x278>)
 8002274:	4293      	cmp	r3, r2
 8002276:	bf94      	ite	ls
 8002278:	2301      	movls	r3, #1
 800227a:	2300      	movhi	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e006      	b.n	800228e <HAL_I2C_Init+0x92>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a7d      	ldr	r2, [pc, #500]	@ (8002478 <HAL_I2C_Init+0x27c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	bf94      	ite	ls
 8002288:	2301      	movls	r3, #1
 800228a:	2300      	movhi	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0e7      	b.n	8002466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a78      	ldr	r2, [pc, #480]	@ (800247c <HAL_I2C_Init+0x280>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002470 <HAL_I2C_Init+0x274>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d802      	bhi.n	80022d0 <HAL_I2C_Init+0xd4>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	e009      	b.n	80022e4 <HAL_I2C_Init+0xe8>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	4a69      	ldr	r2, [pc, #420]	@ (8002480 <HAL_I2C_Init+0x284>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	3301      	adds	r3, #1
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	495c      	ldr	r1, [pc, #368]	@ (8002470 <HAL_I2C_Init+0x274>)
 8002300:	428b      	cmp	r3, r1
 8002302:	d819      	bhi.n	8002338 <HAL_I2C_Init+0x13c>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e59      	subs	r1, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002312:	1c59      	adds	r1, r3, #1
 8002314:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002318:	400b      	ands	r3, r1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_I2C_Init+0x138>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e59      	subs	r1, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fbb1 f3f3 	udiv	r3, r1, r3
 800232c:	3301      	adds	r3, #1
 800232e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002332:	e051      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002334:	2304      	movs	r3, #4
 8002336:	e04f      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d111      	bne.n	8002364 <HAL_I2C_Init+0x168>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	e012      	b.n	800238a <HAL_I2C_Init+0x18e>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e58      	subs	r0, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	0099      	lsls	r1, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	fbb0 f3f3 	udiv	r3, r0, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Init+0x196>
 800238e:	2301      	movs	r3, #1
 8002390:	e022      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10e      	bne.n	80023b8 <HAL_I2C_Init+0x1bc>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1e58      	subs	r0, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	440b      	add	r3, r1
 80023a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023b6:	e00f      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	0099      	lsls	r1, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	6809      	ldr	r1, [r1, #0]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002406:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6911      	ldr	r1, [r2, #16]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68d2      	ldr	r2, [r2, #12]
 8002412:	4311      	orrs	r1, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	430b      	orrs	r3, r1
 800241a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	000186a0 	.word	0x000186a0
 8002474:	001e847f 	.word	0x001e847f
 8002478:	003d08ff 	.word	0x003d08ff
 800247c:	431bde83 	.word	0x431bde83
 8002480:	10624dd3 	.word	0x10624dd3

08002484 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	461a      	mov	r2, r3
 8002490:	460b      	mov	r3, r1
 8002492:	817b      	strh	r3, [r7, #10]
 8002494:	4613      	mov	r3, r2
 8002496:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff fbfc 	bl	8001c94 <HAL_GetTick>
 800249c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	f040 80e0 	bne.w	800266c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2319      	movs	r3, #25
 80024b2:	2201      	movs	r2, #1
 80024b4:	4970      	ldr	r1, [pc, #448]	@ (8002678 <HAL_I2C_Master_Transmit+0x1f4>)
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fc64 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
 80024c4:	e0d3      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_I2C_Master_Transmit+0x50>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0cc      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d007      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002508:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2221      	movs	r2, #33	@ 0x21
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2210      	movs	r2, #16
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4a50      	ldr	r2, [pc, #320]	@ (800267c <HAL_I2C_Master_Transmit+0x1f8>)
 800253a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800253c:	8979      	ldrh	r1, [r7, #10]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 face 	bl	8002ae4 <I2C_MasterRequestWrite>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e08d      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002568:	e066      	b.n	8002638 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fd22 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00d      	beq.n	8002596 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	2b04      	cmp	r3, #4
 8002580:	d107      	bne.n	8002592 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002590:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06b      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d11b      	bne.n	800260c <HAL_I2C_Master_Transmit+0x188>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d017      	beq.n	800260c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	6a39      	ldr	r1, [r7, #32]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fd19 	bl	8003048 <I2C_WaitOnBTFFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002620:	2b04      	cmp	r3, #4
 8002622:	d107      	bne.n	8002634 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002632:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e01a      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d194      	bne.n	800256a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800264e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	00100002 	.word	0x00100002
 800267c:	ffff0000 	.word	0xffff0000

08002680 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	@ 0x30
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	461a      	mov	r2, r3
 800268c:	460b      	mov	r3, r1
 800268e:	817b      	strh	r3, [r7, #10]
 8002690:	4613      	mov	r3, r2
 8002692:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002694:	f7ff fafe 	bl	8001c94 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	f040 8217 	bne.w	8002ad6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2319      	movs	r3, #25
 80026ae:	2201      	movs	r2, #1
 80026b0:	497c      	ldr	r1, [pc, #496]	@ (80028a4 <HAL_I2C_Master_Receive+0x224>)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fb66 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
 80026c0:	e20a      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_I2C_Master_Receive+0x50>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e203      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x458>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d007      	beq.n	80026f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002704:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2222      	movs	r2, #34	@ 0x22
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2210      	movs	r2, #16
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	893a      	ldrh	r2, [r7, #8]
 8002726:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a5c      	ldr	r2, [pc, #368]	@ (80028a8 <HAL_I2C_Master_Receive+0x228>)
 8002736:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002738:	8979      	ldrh	r1, [r7, #10]
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fa52 	bl	8002be8 <I2C_MasterRequestRead>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e1c4      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002752:	2b00      	cmp	r3, #0
 8002754:	d113      	bne.n	800277e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	623b      	str	r3, [r7, #32]
 800276a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e198      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	2b01      	cmp	r3, #1
 8002784:	d11b      	bne.n	80027be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e178      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d11b      	bne.n	80027fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	e158      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800280c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002824:	e144      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	2b03      	cmp	r3, #3
 800282c:	f200 80f1 	bhi.w	8002a12 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	2b01      	cmp	r3, #1
 8002836:	d123      	bne.n	8002880 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800283a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fc4b 	bl	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e145      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800287e:	e117      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002884:	2b02      	cmp	r3, #2
 8002886:	d14e      	bne.n	8002926 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288e:	2200      	movs	r2, #0
 8002890:	4906      	ldr	r1, [pc, #24]	@ (80028ac <HAL_I2C_Master_Receive+0x22c>)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fa76 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e11a      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x458>
 80028a2:	bf00      	nop
 80028a4:	00100002 	.word	0x00100002
 80028a8:	ffff0000 	.word	0xffff0000
 80028ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002924:	e0c4      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292c:	2200      	movs	r2, #0
 800292e:	496c      	ldr	r1, [pc, #432]	@ (8002ae0 <HAL_I2C_Master_Receive+0x460>)
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fa27 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0cb      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800294e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	2200      	movs	r2, #0
 800298a:	4955      	ldr	r1, [pc, #340]	@ (8002ae0 <HAL_I2C_Master_Receive+0x460>)
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f9f9 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e09d      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a10:	e04e      	b.n	8002ab0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fb5e 	bl	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e058      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d124      	bne.n	8002ab0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d107      	bne.n	8002a7e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a7c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f47f aeb6 	bne.w	8002826 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3728      	adds	r7, #40	@ 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	00010004 	.word	0x00010004

08002ae4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	460b      	mov	r3, r1
 8002af2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d006      	beq.n	8002b0e <I2C_MasterRequestWrite+0x2a>
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d003      	beq.n	8002b0e <I2C_MasterRequestWrite+0x2a>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b0c:	d108      	bne.n	8002b20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e00b      	b.n	8002b38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b24:	2b12      	cmp	r3, #18
 8002b26:	d107      	bne.n	8002b38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f91d 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b5e:	d103      	bne.n	8002b68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e035      	b.n	8002bd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b74:	d108      	bne.n	8002b88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	e01b      	b.n	8002bc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b88:	897b      	ldrh	r3, [r7, #10]
 8002b8a:	11db      	asrs	r3, r3, #7
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f003 0306 	and.w	r3, r3, #6
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f063 030f 	orn	r3, r3, #15
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	490e      	ldr	r1, [pc, #56]	@ (8002be0 <I2C_MasterRequestWrite+0xfc>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f966 	bl	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e010      	b.n	8002bd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4907      	ldr	r1, [pc, #28]	@ (8002be4 <I2C_MasterRequestWrite+0x100>)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f956 	bl	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	00010008 	.word	0x00010008
 8002be4:	00010002 	.word	0x00010002

08002be8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d006      	beq.n	8002c22 <I2C_MasterRequestRead+0x3a>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d003      	beq.n	8002c22 <I2C_MasterRequestRead+0x3a>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c20:	d108      	bne.n	8002c34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e00b      	b.n	8002c4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	2b11      	cmp	r3, #17
 8002c3a:	d107      	bne.n	8002c4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f893 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c72:	d103      	bne.n	8002c7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e079      	b.n	8002d74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c88:	d108      	bne.n	8002c9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c8a:	897b      	ldrh	r3, [r7, #10]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	611a      	str	r2, [r3, #16]
 8002c9a:	e05f      	b.n	8002d5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c9c:	897b      	ldrh	r3, [r7, #10]
 8002c9e:	11db      	asrs	r3, r3, #7
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 0306 	and.w	r3, r3, #6
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f063 030f 	orn	r3, r3, #15
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4930      	ldr	r1, [pc, #192]	@ (8002d7c <I2C_MasterRequestRead+0x194>)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f8dc 	bl	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e054      	b.n	8002d74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cca:	897b      	ldrh	r3, [r7, #10]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4929      	ldr	r1, [pc, #164]	@ (8002d80 <I2C_MasterRequestRead+0x198>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8cc 	bl	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e044      	b.n	8002d74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f831 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d36:	d103      	bne.n	8002d40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e017      	b.n	8002d74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d44:	897b      	ldrh	r3, [r7, #10]
 8002d46:	11db      	asrs	r3, r3, #7
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f003 0306 	and.w	r3, r3, #6
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f063 030e 	orn	r3, r3, #14
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4907      	ldr	r1, [pc, #28]	@ (8002d80 <I2C_MasterRequestRead+0x198>)
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f888 	bl	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	00010008 	.word	0x00010008
 8002d80:	00010002 	.word	0x00010002

08002d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d94:	e048      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d044      	beq.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7fe ff79 	bl	8001c94 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d139      	bne.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d10d      	bne.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	e00c      	b.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	43da      	mvns	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4013      	ands	r3, r2
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d116      	bne.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e023      	b.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10d      	bne.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	e00c      	b.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	43da      	mvns	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d093      	beq.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e86:	e071      	b.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e96:	d123      	bne.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	f043 0204 	orr.w	r2, r3, #4
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e067      	b.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d041      	beq.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee8:	f7fe fed4 	bl	8001c94 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d302      	bcc.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d136      	bne.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10c      	bne.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e00b      	b.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d016      	beq.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e021      	b.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10c      	bne.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf14      	ite	ne
 8002f88:	2301      	movne	r3, #1
 8002f8a:	2300      	moveq	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e00b      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f47f af6d 	bne.w	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc4:	e034      	b.n	8003030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f8e3 	bl	8003192 <I2C_IsAcknowledgeFailed>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e034      	b.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d028      	beq.n	8003030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7fe fe59 	bl	8001c94 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d11d      	bne.n	8003030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffe:	2b80      	cmp	r3, #128	@ 0x80
 8003000:	d016      	beq.n	8003030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e007      	b.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303a:	2b80      	cmp	r3, #128	@ 0x80
 800303c:	d1c3      	bne.n	8002fc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003054:	e034      	b.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f89b 	bl	8003192 <I2C_IsAcknowledgeFailed>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e034      	b.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d028      	beq.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe fe11 	bl	8001c94 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11d      	bne.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d016      	beq.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e007      	b.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d1c3      	bne.n	8003056 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e4:	e049      	b.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d119      	bne.n	8003128 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0210 	mvn.w	r2, #16
 80030fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e030      	b.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003128:	f7fe fdb4 	bl	8001c94 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	429a      	cmp	r2, r3
 8003136:	d302      	bcc.n	800313e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d11d      	bne.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003148:	2b40      	cmp	r3, #64	@ 0x40
 800314a:	d016      	beq.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e007      	b.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003184:	2b40      	cmp	r3, #64	@ 0x40
 8003186:	d1ae      	bne.n	80030e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a8:	d11b      	bne.n	80031e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f043 0204 	orr.w	r2, r3, #4
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e267      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d075      	beq.n	80032fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800320e:	4b88      	ldr	r3, [pc, #544]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b04      	cmp	r3, #4
 8003218:	d00c      	beq.n	8003234 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321a:	4b85      	ldr	r3, [pc, #532]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003222:	2b08      	cmp	r3, #8
 8003224:	d112      	bne.n	800324c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003226:	4b82      	ldr	r3, [pc, #520]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800322e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003232:	d10b      	bne.n	800324c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	4b7e      	ldr	r3, [pc, #504]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d05b      	beq.n	80032f8 <HAL_RCC_OscConfig+0x108>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d157      	bne.n	80032f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e242      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003254:	d106      	bne.n	8003264 <HAL_RCC_OscConfig+0x74>
 8003256:	4b76      	ldr	r3, [pc, #472]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a75      	ldr	r2, [pc, #468]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e01d      	b.n	80032a0 <HAL_RCC_OscConfig+0xb0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0x98>
 800326e:	4b70      	ldr	r3, [pc, #448]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a6f      	ldr	r2, [pc, #444]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b6d      	ldr	r3, [pc, #436]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6c      	ldr	r2, [pc, #432]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0xb0>
 8003288:	4b69      	ldr	r3, [pc, #420]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a68      	ldr	r2, [pc, #416]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b66      	ldr	r3, [pc, #408]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a65      	ldr	r2, [pc, #404]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800329e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fcf4 	bl	8001c94 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fe fcf0 	bl	8001c94 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	@ 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e207      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0xc0>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fce0 	bl	8001c94 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe fcdc 	bl	8001c94 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	@ 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1f3      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	4b51      	ldr	r3, [pc, #324]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0xe8>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d063      	beq.n	80033ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003306:	4b4a      	ldr	r3, [pc, #296]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003312:	4b47      	ldr	r3, [pc, #284]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800331a:	2b08      	cmp	r3, #8
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331e:	4b44      	ldr	r3, [pc, #272]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	4b41      	ldr	r3, [pc, #260]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x152>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e1c7      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b3b      	ldr	r3, [pc, #236]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4937      	ldr	r1, [pc, #220]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	e03a      	b.n	80033ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	4b34      	ldr	r3, [pc, #208]	@ (8003434 <HAL_RCC_OscConfig+0x244>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fe fc95 	bl	8001c94 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336e:	f7fe fc91 	bl	8001c94 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e1a8      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	4b2b      	ldr	r3, [pc, #172]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b28      	ldr	r3, [pc, #160]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4925      	ldr	r1, [pc, #148]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	e015      	b.n	80033ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b24      	ldr	r3, [pc, #144]	@ (8003434 <HAL_RCC_OscConfig+0x244>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe fc74 	bl	8001c94 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b0:	f7fe fc70 	bl	8001c94 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e187      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d036      	beq.n	8003448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e2:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <HAL_RCC_OscConfig+0x248>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fe fc54 	bl	8001c94 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fe fc50 	bl	8001c94 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e167      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	4b0b      	ldr	r3, [pc, #44]	@ (8003430 <HAL_RCC_OscConfig+0x240>)
 8003404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x200>
 800340e:	e01b      	b.n	8003448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003410:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <HAL_RCC_OscConfig+0x248>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003416:	f7fe fc3d 	bl	8001c94 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	e00e      	b.n	800343c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7fe fc39 	bl	8001c94 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d907      	bls.n	800343c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e150      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
 8003430:	40023800 	.word	0x40023800
 8003434:	42470000 	.word	0x42470000
 8003438:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343c:	4b88      	ldr	r3, [pc, #544]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 800343e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ea      	bne.n	800341e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8097 	beq.w	8003584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345a:	4b81      	ldr	r3, [pc, #516]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	4b7d      	ldr	r3, [pc, #500]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	4a7c      	ldr	r2, [pc, #496]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 8003470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003474:	6413      	str	r3, [r2, #64]	@ 0x40
 8003476:	4b7a      	ldr	r3, [pc, #488]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003482:	2301      	movs	r3, #1
 8003484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003486:	4b77      	ldr	r3, [pc, #476]	@ (8003664 <HAL_RCC_OscConfig+0x474>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d118      	bne.n	80034c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003492:	4b74      	ldr	r3, [pc, #464]	@ (8003664 <HAL_RCC_OscConfig+0x474>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a73      	ldr	r2, [pc, #460]	@ (8003664 <HAL_RCC_OscConfig+0x474>)
 8003498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349e:	f7fe fbf9 	bl	8001c94 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a6:	f7fe fbf5 	bl	8001c94 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e10c      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003664 <HAL_RCC_OscConfig+0x474>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x2ea>
 80034cc:	4b64      	ldr	r3, [pc, #400]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d0:	4a63      	ldr	r2, [pc, #396]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d8:	e01c      	b.n	8003514 <HAL_RCC_OscConfig+0x324>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b05      	cmp	r3, #5
 80034e0:	d10c      	bne.n	80034fc <HAL_RCC_OscConfig+0x30c>
 80034e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 80034e8:	f043 0304 	orr.w	r3, r3, #4
 80034ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fa:	e00b      	b.n	8003514 <HAL_RCC_OscConfig+0x324>
 80034fc:	4b58      	ldr	r3, [pc, #352]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003500:	4a57      	ldr	r2, [pc, #348]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	6713      	str	r3, [r2, #112]	@ 0x70
 8003508:	4b55      	ldr	r3, [pc, #340]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350c:	4a54      	ldr	r2, [pc, #336]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 800350e:	f023 0304 	bic.w	r3, r3, #4
 8003512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d015      	beq.n	8003548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe fbba 	bl	8001c94 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fe fbb6 	bl	8001c94 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0cb      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353a:	4b49      	ldr	r3, [pc, #292]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0ee      	beq.n	8003524 <HAL_RCC_OscConfig+0x334>
 8003546:	e014      	b.n	8003572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003548:	f7fe fba4 	bl	8001c94 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354e:	e00a      	b.n	8003566 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7fe fba0 	bl	8001c94 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e0b5      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003566:	4b3e      	ldr	r3, [pc, #248]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ee      	bne.n	8003550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d105      	bne.n	8003584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003578:	4b39      	ldr	r3, [pc, #228]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	4a38      	ldr	r2, [pc, #224]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 800357e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a1 	beq.w	80036d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800358e:	4b34      	ldr	r3, [pc, #208]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b08      	cmp	r3, #8
 8003598:	d05c      	beq.n	8003654 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d141      	bne.n	8003626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	4b31      	ldr	r3, [pc, #196]	@ (8003668 <HAL_RCC_OscConfig+0x478>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe fb74 	bl	8001c94 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe fb70 	bl	8001c94 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e087      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	4b27      	ldr	r3, [pc, #156]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	019b      	lsls	r3, r3, #6
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	3b01      	subs	r3, #1
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	491b      	ldr	r1, [pc, #108]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <HAL_RCC_OscConfig+0x478>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fb49 	bl	8001c94 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003606:	f7fe fb45 	bl	8001c94 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e05c      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003618:	4b11      	ldr	r3, [pc, #68]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x416>
 8003624:	e054      	b.n	80036d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <HAL_RCC_OscConfig+0x478>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fb32 	bl	8001c94 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe fb2e 	bl	8001c94 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e045      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_RCC_OscConfig+0x470>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x444>
 8003652:	e03d      	b.n	80036d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d107      	bne.n	800366c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e038      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
 8003660:	40023800 	.word	0x40023800
 8003664:	40007000 	.word	0x40007000
 8003668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800366c:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <HAL_RCC_OscConfig+0x4ec>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d028      	beq.n	80036cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d121      	bne.n	80036cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d11a      	bne.n	80036cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800369c:	4013      	ands	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d111      	bne.n	80036cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	3b01      	subs	r3, #1
 80036b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d107      	bne.n	80036cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800

080036e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0cc      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f4:	4b68      	ldr	r3, [pc, #416]	@ (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d90c      	bls.n	800371c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b65      	ldr	r3, [pc, #404]	@ (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b63      	ldr	r3, [pc, #396]	@ (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0b8      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d020      	beq.n	800376a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003734:	4b59      	ldr	r3, [pc, #356]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a58      	ldr	r2, [pc, #352]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800373e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800374c:	4b53      	ldr	r3, [pc, #332]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a52      	ldr	r2, [pc, #328]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003758:	4b50      	ldr	r3, [pc, #320]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	494d      	ldr	r1, [pc, #308]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d044      	beq.n	8003800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	4b47      	ldr	r3, [pc, #284]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d119      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e07f      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d003      	beq.n	800379e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379a:	2b03      	cmp	r3, #3
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379e:	4b3f      	ldr	r3, [pc, #252]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e06f      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	4b3b      	ldr	r3, [pc, #236]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e067      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037be:	4b37      	ldr	r3, [pc, #220]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4934      	ldr	r1, [pc, #208]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d0:	f7fe fa60 	bl	8001c94 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7fe fa5c 	bl	8001c94 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e04f      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 020c 	and.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1eb      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003800:	4b25      	ldr	r3, [pc, #148]	@ (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d20c      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b22      	ldr	r3, [pc, #136]	@ (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b20      	ldr	r3, [pc, #128]	@ (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e032      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003834:	4b19      	ldr	r3, [pc, #100]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4916      	ldr	r1, [pc, #88]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003852:	4b12      	ldr	r3, [pc, #72]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	490e      	ldr	r1, [pc, #56]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003866:	f000 f821 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 800386a:	4602      	mov	r2, r0
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	490a      	ldr	r1, [pc, #40]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	5ccb      	ldrb	r3, [r1, r3]
 800387a:	fa22 f303 	lsr.w	r3, r2, r3
 800387e:	4a09      	ldr	r2, [pc, #36]	@ (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003882:	4b09      	ldr	r3, [pc, #36]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe f9c0 	bl	8001c0c <HAL_InitTick>

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023c00 	.word	0x40023c00
 800389c:	40023800 	.word	0x40023800
 80038a0:	08009a58 	.word	0x08009a58
 80038a4:	20000000 	.word	0x20000000
 80038a8:	20000004 	.word	0x20000004

080038ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b0:	b094      	sub	sp, #80	@ 0x50
 80038b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c4:	4b79      	ldr	r3, [pc, #484]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x200>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d00d      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x40>
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	f200 80e1 	bhi.w	8003a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x34>
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038de:	e0db      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038e0:	4b73      	ldr	r3, [pc, #460]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038e4:	e0db      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038e6:	4b73      	ldr	r3, [pc, #460]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80038e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ea:	e0d8      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ec:	4b6f      	ldr	r3, [pc, #444]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x200>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038f6:	4b6d      	ldr	r3, [pc, #436]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x200>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d063      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003902:	4b6a      	ldr	r3, [pc, #424]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x200>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	2200      	movs	r2, #0
 800390a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800390c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800390e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003914:	633b      	str	r3, [r7, #48]	@ 0x30
 8003916:	2300      	movs	r3, #0
 8003918:	637b      	str	r3, [r7, #52]	@ 0x34
 800391a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800391e:	4622      	mov	r2, r4
 8003920:	462b      	mov	r3, r5
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f04f 0100 	mov.w	r1, #0
 800392a:	0159      	lsls	r1, r3, #5
 800392c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003930:	0150      	lsls	r0, r2, #5
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4621      	mov	r1, r4
 8003938:	1a51      	subs	r1, r2, r1
 800393a:	6139      	str	r1, [r7, #16]
 800393c:	4629      	mov	r1, r5
 800393e:	eb63 0301 	sbc.w	r3, r3, r1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003950:	4659      	mov	r1, fp
 8003952:	018b      	lsls	r3, r1, #6
 8003954:	4651      	mov	r1, sl
 8003956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800395a:	4651      	mov	r1, sl
 800395c:	018a      	lsls	r2, r1, #6
 800395e:	4651      	mov	r1, sl
 8003960:	ebb2 0801 	subs.w	r8, r2, r1
 8003964:	4659      	mov	r1, fp
 8003966:	eb63 0901 	sbc.w	r9, r3, r1
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800397a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800397e:	4690      	mov	r8, r2
 8003980:	4699      	mov	r9, r3
 8003982:	4623      	mov	r3, r4
 8003984:	eb18 0303 	adds.w	r3, r8, r3
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	462b      	mov	r3, r5
 800398c:	eb49 0303 	adc.w	r3, r9, r3
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800399e:	4629      	mov	r1, r5
 80039a0:	024b      	lsls	r3, r1, #9
 80039a2:	4621      	mov	r1, r4
 80039a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039a8:	4621      	mov	r1, r4
 80039aa:	024a      	lsls	r2, r1, #9
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b2:	2200      	movs	r2, #0
 80039b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039bc:	f7fd f8fc 	bl	8000bb8 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4613      	mov	r3, r2
 80039c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039c8:	e058      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ca:	4b38      	ldr	r3, [pc, #224]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x200>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	2200      	movs	r2, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	4611      	mov	r1, r2
 80039d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039e4:	4642      	mov	r2, r8
 80039e6:	464b      	mov	r3, r9
 80039e8:	f04f 0000 	mov.w	r0, #0
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f6:	0150      	lsls	r0, r2, #5
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4641      	mov	r1, r8
 80039fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a02:	4649      	mov	r1, r9
 8003a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a20:	eb63 050b 	sbc.w	r5, r3, fp
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	00eb      	lsls	r3, r5, #3
 8003a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a32:	00e2      	lsls	r2, r4, #3
 8003a34:	4614      	mov	r4, r2
 8003a36:	461d      	mov	r5, r3
 8003a38:	4643      	mov	r3, r8
 8003a3a:	18e3      	adds	r3, r4, r3
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	464b      	mov	r3, r9
 8003a40:	eb45 0303 	adc.w	r3, r5, r3
 8003a44:	607b      	str	r3, [r7, #4]
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a52:	4629      	mov	r1, r5
 8003a54:	028b      	lsls	r3, r1, #10
 8003a56:	4621      	mov	r1, r4
 8003a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	028a      	lsls	r2, r1, #10
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a66:	2200      	movs	r2, #0
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	61fa      	str	r2, [r7, #28]
 8003a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a70:	f7fd f8a2 	bl	8000bb8 <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	3301      	adds	r3, #1
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a96:	e002      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a98:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3750      	adds	r7, #80	@ 0x50
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	007a1200 	.word	0x007a1200

08003ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003abc:	4b03      	ldr	r3, [pc, #12]	@ (8003acc <HAL_RCC_GetHCLKFreq+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000000 	.word	0x20000000

08003ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad4:	f7ff fff0 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4903      	ldr	r1, [pc, #12]	@ (8003af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	08009a68 	.word	0x08009a68

08003af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003afc:	f7ff ffdc 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	0b5b      	lsrs	r3, r3, #13
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4903      	ldr	r1, [pc, #12]	@ (8003b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	08009a68 	.word	0x08009a68

08003b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e07b      	b.n	8003c2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b42:	d009      	beq.n	8003b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	61da      	str	r2, [r3, #28]
 8003b4a:	e005      	b.n	8003b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fb5e 	bl	8001234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bdc:	ea42 0103 	orr.w	r1, r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	f003 0104 	and.w	r1, r3, #4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	f003 0210 	and.w	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b08a      	sub	sp, #40	@ 0x28
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c40:	2301      	movs	r3, #1
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c44:	f7fe f826 	bl	8001c94 <HAL_GetTick>
 8003c48:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c50:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c5c:	7ffb      	ldrb	r3, [r7, #31]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d00c      	beq.n	8003c7c <HAL_SPI_TransmitReceive+0x4a>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c68:	d106      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x46>
 8003c72:	7ffb      	ldrb	r3, [r7, #31]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d001      	beq.n	8003c7c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e17f      	b.n	8003f7c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0x5c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0x5c>
 8003c88:	887b      	ldrh	r3, [r7, #2]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e174      	b.n	8003f7c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x6e>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e16d      	b.n	8003f7c <HAL_SPI_TransmitReceive+0x34a>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d003      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	887a      	ldrh	r2, [r7, #2]
 8003cd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	887a      	ldrh	r2, [r7, #2]
 8003cde:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfc:	2b40      	cmp	r3, #64	@ 0x40
 8003cfe:	d007      	beq.n	8003d10 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d18:	d17e      	bne.n	8003e18 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0xf6>
 8003d22:	8afb      	ldrh	r3, [r7, #22]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d16c      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	1c9a      	adds	r2, r3, #2
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d4c:	e059      	b.n	8003e02 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d11b      	bne.n	8003d94 <HAL_SPI_TransmitReceive+0x162>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x162>
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d113      	bne.n	8003d94 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d119      	bne.n	8003dd6 <HAL_SPI_TransmitReceive+0x1a4>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d014      	beq.n	8003dd6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	b292      	uxth	r2, r2
 8003db8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	1c9a      	adds	r2, r3, #2
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dd6:	f7fd ff5d 	bl	8001c94 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d80d      	bhi.n	8003e02 <HAL_SPI_TransmitReceive+0x1d0>
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d009      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0bc      	b.n	8003f7c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1a0      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x11c>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d19b      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x11c>
 8003e16:	e082      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x1f4>
 8003e20:	8afb      	ldrh	r3, [r7, #22]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d171      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e4c:	e05d      	b.n	8003f0a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d11c      	bne.n	8003e96 <HAL_SPI_TransmitReceive+0x264>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d017      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x264>
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d114      	bne.n	8003e96 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	7812      	ldrb	r2, [r2, #0]
 8003e78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d119      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x2a6>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d014      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ed8:	f7fd fedc 	bl	8001c94 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d803      	bhi.n	8003ef0 <HAL_SPI_TransmitReceive+0x2be>
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eee:	d102      	bne.n	8003ef6 <HAL_SPI_TransmitReceive+0x2c4>
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e038      	b.n	8003f7c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d19c      	bne.n	8003e4e <HAL_SPI_TransmitReceive+0x21c>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d197      	bne.n	8003e4e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f1e:	6a3a      	ldr	r2, [r7, #32]
 8003f20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f8b6 	bl	8004094 <SPI_EndRxTxTransaction>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e01d      	b.n	8003f7c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3728      	adds	r7, #40	@ 0x28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f94:	f7fd fe7e 	bl	8001c94 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fa4:	f7fd fe76 	bl	8001c94 <HAL_GetTick>
 8003fa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003faa:	4b39      	ldr	r3, [pc, #228]	@ (8004090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	015b      	lsls	r3, r3, #5
 8003fb0:	0d1b      	lsrs	r3, r3, #20
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	fb02 f303 	mul.w	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fba:	e054      	b.n	8004066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d050      	beq.n	8004066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fc4:	f7fd fe66 	bl	8001c94 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d902      	bls.n	8003fda <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d13d      	bne.n	8004056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ff2:	d111      	bne.n	8004018 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ffc:	d004      	beq.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004006:	d107      	bne.n	8004018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004020:	d10f      	bne.n	8004042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e017      	b.n	8004086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3b01      	subs	r3, #1
 8004064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	429a      	cmp	r2, r3
 8004082:	d19b      	bne.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000000 	.word	0x20000000

08004094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2201      	movs	r2, #1
 80040a8:	2102      	movs	r1, #2
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f7ff ff6a 	bl	8003f84 <SPI_WaitFlagStateUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ba:	f043 0220 	orr.w	r2, r3, #32
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e032      	b.n	800412c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004134 <SPI_EndRxTxTransaction+0xa0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004138 <SPI_EndRxTxTransaction+0xa4>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	0d5b      	lsrs	r3, r3, #21
 80040d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040e4:	d112      	bne.n	800410c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2180      	movs	r1, #128	@ 0x80
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff ff47 	bl	8003f84 <SPI_WaitFlagStateUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d016      	beq.n	800412a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e00f      	b.n	800412c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3b01      	subs	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004122:	2b80      	cmp	r3, #128	@ 0x80
 8004124:	d0f2      	beq.n	800410c <SPI_EndRxTxTransaction+0x78>
 8004126:	e000      	b.n	800412a <SPI_EndRxTxTransaction+0x96>
        break;
 8004128:	bf00      	nop
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000000 	.word	0x20000000
 8004138:	165e9f81 	.word	0x165e9f81

0800413c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e041      	b.n	80041d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd fb90 	bl	8001888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f000 fca0 	bl	8004ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e041      	b.n	8004270 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fd fb1f 	bl	8001844 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f000 fc51 	bl	8004ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e041      	b.n	800430e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f839 	bl	8004316 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f000 fc02 	bl	8004ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <HAL_TIM_PWM_Start+0x24>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e022      	b.n	8004396 <HAL_TIM_PWM_Start+0x6a>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b04      	cmp	r3, #4
 8004354:	d109      	bne.n	800436a <HAL_TIM_PWM_Start+0x3e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	bf14      	ite	ne
 8004362:	2301      	movne	r3, #1
 8004364:	2300      	moveq	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	e015      	b.n	8004396 <HAL_TIM_PWM_Start+0x6a>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b08      	cmp	r3, #8
 800436e:	d109      	bne.n	8004384 <HAL_TIM_PWM_Start+0x58>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e008      	b.n	8004396 <HAL_TIM_PWM_Start+0x6a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e068      	b.n	8004470 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_PWM_Start+0x82>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ac:	e013      	b.n	80043d6 <HAL_TIM_PWM_Start+0xaa>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d104      	bne.n	80043be <HAL_TIM_PWM_Start+0x92>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043bc:	e00b      	b.n	80043d6 <HAL_TIM_PWM_Start+0xaa>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_PWM_Start+0xa2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043cc:	e003      	b.n	80043d6 <HAL_TIM_PWM_Start+0xaa>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2201      	movs	r2, #1
 80043dc:	6839      	ldr	r1, [r7, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fe20 	bl	8005024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a23      	ldr	r2, [pc, #140]	@ (8004478 <HAL_TIM_PWM_Start+0x14c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d107      	bne.n	80043fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1d      	ldr	r2, [pc, #116]	@ (8004478 <HAL_TIM_PWM_Start+0x14c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d018      	beq.n	800443a <HAL_TIM_PWM_Start+0x10e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004410:	d013      	beq.n	800443a <HAL_TIM_PWM_Start+0x10e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a19      	ldr	r2, [pc, #100]	@ (800447c <HAL_TIM_PWM_Start+0x150>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00e      	beq.n	800443a <HAL_TIM_PWM_Start+0x10e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a17      	ldr	r2, [pc, #92]	@ (8004480 <HAL_TIM_PWM_Start+0x154>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d009      	beq.n	800443a <HAL_TIM_PWM_Start+0x10e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a16      	ldr	r2, [pc, #88]	@ (8004484 <HAL_TIM_PWM_Start+0x158>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d004      	beq.n	800443a <HAL_TIM_PWM_Start+0x10e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a14      	ldr	r2, [pc, #80]	@ (8004488 <HAL_TIM_PWM_Start+0x15c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d111      	bne.n	800445e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b06      	cmp	r3, #6
 800444a:	d010      	beq.n	800446e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	e007      	b.n	800446e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40014000 	.word	0x40014000

0800448c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e097      	b.n	80045d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fd fa1d 	bl	80018f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044d0:	f023 0307 	bic.w	r3, r3, #7
 80044d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f000 faed 	bl	8004ac0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	4313      	orrs	r3, r2
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800452c:	f023 030c 	bic.w	r3, r3, #12
 8004530:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004538:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800453c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	4313      	orrs	r3, r2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	011a      	lsls	r2, r3, #4
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	031b      	lsls	r3, r3, #12
 800455c:	4313      	orrs	r3, r2
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800456a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004572:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	4313      	orrs	r3, r2
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004600:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d110      	bne.n	800462a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d102      	bne.n	8004614 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800460e:	7b7b      	ldrb	r3, [r7, #13]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d001      	beq.n	8004618 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e069      	b.n	80046ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004628:	e031      	b.n	800468e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d110      	bne.n	8004652 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004630:	7bbb      	ldrb	r3, [r7, #14]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d102      	bne.n	800463c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004636:	7b3b      	ldrb	r3, [r7, #12]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d001      	beq.n	8004640 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e055      	b.n	80046ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004650:	e01d      	b.n	800468e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d108      	bne.n	800466a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004658:	7bbb      	ldrb	r3, [r7, #14]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d105      	bne.n	800466a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800465e:	7b7b      	ldrb	r3, [r7, #13]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d102      	bne.n	800466a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004664:	7b3b      	ldrb	r3, [r7, #12]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d001      	beq.n	800466e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e03e      	b.n	80046ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2202      	movs	r2, #2
 800468a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_TIM_Encoder_Start+0xc4>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b04      	cmp	r3, #4
 8004698:	d008      	beq.n	80046ac <HAL_TIM_Encoder_Start+0xd4>
 800469a:	e00f      	b.n	80046bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2201      	movs	r2, #1
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fcbd 	bl	8005024 <TIM_CCxChannelCmd>
      break;
 80046aa:	e016      	b.n	80046da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2201      	movs	r2, #1
 80046b2:	2104      	movs	r1, #4
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fcb5 	bl	8005024 <TIM_CCxChannelCmd>
      break;
 80046ba:	e00e      	b.n	80046da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2201      	movs	r2, #1
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fcad 	bl	8005024 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	2104      	movs	r1, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fca6 	bl	8005024 <TIM_CCxChannelCmd>
      break;
 80046d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_TIM_OC_ConfigChannel+0x1e>
 800470e:	2302      	movs	r3, #2
 8004710:	e048      	b.n	80047a4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	d839      	bhi.n	8004794 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004720:	a201      	add	r2, pc, #4	@ (adr r2, 8004728 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	0800475d 	.word	0x0800475d
 800472c:	08004795 	.word	0x08004795
 8004730:	08004795 	.word	0x08004795
 8004734:	08004795 	.word	0x08004795
 8004738:	0800476b 	.word	0x0800476b
 800473c:	08004795 	.word	0x08004795
 8004740:	08004795 	.word	0x08004795
 8004744:	08004795 	.word	0x08004795
 8004748:	08004779 	.word	0x08004779
 800474c:	08004795 	.word	0x08004795
 8004750:	08004795 	.word	0x08004795
 8004754:	08004795 	.word	0x08004795
 8004758:	08004787 	.word	0x08004787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fa38 	bl	8004bd8 <TIM_OC1_SetConfig>
      break;
 8004768:	e017      	b.n	800479a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fa97 	bl	8004ca4 <TIM_OC2_SetConfig>
      break;
 8004776:	e010      	b.n	800479a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68b9      	ldr	r1, [r7, #8]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fafc 	bl	8004d7c <TIM_OC3_SetConfig>
      break;
 8004784:	e009      	b.n	800479a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fb5f 	bl	8004e50 <TIM_OC4_SetConfig>
      break;
 8004792:	e002      	b.n	800479a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
      break;
 8004798:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0ae      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	f200 809f 	bhi.w	8004918 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047da:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004815 	.word	0x08004815
 80047e4:	08004919 	.word	0x08004919
 80047e8:	08004919 	.word	0x08004919
 80047ec:	08004919 	.word	0x08004919
 80047f0:	08004855 	.word	0x08004855
 80047f4:	08004919 	.word	0x08004919
 80047f8:	08004919 	.word	0x08004919
 80047fc:	08004919 	.word	0x08004919
 8004800:	08004897 	.word	0x08004897
 8004804:	08004919 	.word	0x08004919
 8004808:	08004919 	.word	0x08004919
 800480c:	08004919 	.word	0x08004919
 8004810:	080048d7 	.word	0x080048d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f9dc 	bl	8004bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0208 	orr.w	r2, r2, #8
 800482e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6999      	ldr	r1, [r3, #24]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	619a      	str	r2, [r3, #24]
      break;
 8004852:	e064      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fa22 	bl	8004ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800486e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800487e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6999      	ldr	r1, [r3, #24]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	021a      	lsls	r2, r3, #8
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	619a      	str	r2, [r3, #24]
      break;
 8004894:	e043      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fa6d 	bl	8004d7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0208 	orr.w	r2, r2, #8
 80048b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0204 	bic.w	r2, r2, #4
 80048c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	61da      	str	r2, [r3, #28]
      break;
 80048d4:	e023      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fab7 	bl	8004e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69d9      	ldr	r1, [r3, #28]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	021a      	lsls	r2, r3, #8
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	61da      	str	r2, [r3, #28]
      break;
 8004916:	e002      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	75fb      	strb	r3, [r7, #23]
      break;
 800491c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004926:	7dfb      	ldrb	r3, [r7, #23]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_TIM_ConfigClockSource+0x1c>
 8004948:	2302      	movs	r3, #2
 800494a:	e0b4      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x186>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800496a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004984:	d03e      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0xd4>
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498a:	f200 8087 	bhi.w	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004992:	f000 8086 	beq.w	8004aa2 <HAL_TIM_ConfigClockSource+0x172>
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499a:	d87f      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b70      	cmp	r3, #112	@ 0x70
 800499e:	d01a      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0xa6>
 80049a0:	2b70      	cmp	r3, #112	@ 0x70
 80049a2:	d87b      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b60      	cmp	r3, #96	@ 0x60
 80049a6:	d050      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x11a>
 80049a8:	2b60      	cmp	r3, #96	@ 0x60
 80049aa:	d877      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049ac:	2b50      	cmp	r3, #80	@ 0x50
 80049ae:	d03c      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0xfa>
 80049b0:	2b50      	cmp	r3, #80	@ 0x50
 80049b2:	d873      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049b4:	2b40      	cmp	r3, #64	@ 0x40
 80049b6:	d058      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x13a>
 80049b8:	2b40      	cmp	r3, #64	@ 0x40
 80049ba:	d86f      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049bc:	2b30      	cmp	r3, #48	@ 0x30
 80049be:	d064      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049c0:	2b30      	cmp	r3, #48	@ 0x30
 80049c2:	d86b      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d060      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d867      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d05c      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d05a      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049d4:	e062      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049e6:	f000 fafd 	bl	8004fe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	609a      	str	r2, [r3, #8]
      break;
 8004a02:	e04f      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a14:	f000 fae6 	bl	8004fe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a26:	609a      	str	r2, [r3, #8]
      break;
 8004a28:	e03c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 fa5a 	bl	8004ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2150      	movs	r1, #80	@ 0x50
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fab3 	bl	8004fae <TIM_ITRx_SetConfig>
      break;
 8004a48:	e02c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a56:	461a      	mov	r2, r3
 8004a58:	f000 fa79 	bl	8004f4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2160      	movs	r1, #96	@ 0x60
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 faa3 	bl	8004fae <TIM_ITRx_SetConfig>
      break;
 8004a68:	e01c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a76:	461a      	mov	r2, r3
 8004a78:	f000 fa3a 	bl	8004ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2140      	movs	r1, #64	@ 0x40
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fa93 	bl	8004fae <TIM_ITRx_SetConfig>
      break;
 8004a88:	e00c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f000 fa8a 	bl	8004fae <TIM_ITRx_SetConfig>
      break;
 8004a9a:	e003      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa0:	e000      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004aa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a3a      	ldr	r2, [pc, #232]	@ (8004bbc <TIM_Base_SetConfig+0xfc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00f      	beq.n	8004af8 <TIM_Base_SetConfig+0x38>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ade:	d00b      	beq.n	8004af8 <TIM_Base_SetConfig+0x38>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a37      	ldr	r2, [pc, #220]	@ (8004bc0 <TIM_Base_SetConfig+0x100>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d007      	beq.n	8004af8 <TIM_Base_SetConfig+0x38>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a36      	ldr	r2, [pc, #216]	@ (8004bc4 <TIM_Base_SetConfig+0x104>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_Base_SetConfig+0x38>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a35      	ldr	r2, [pc, #212]	@ (8004bc8 <TIM_Base_SetConfig+0x108>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d108      	bne.n	8004b0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004bbc <TIM_Base_SetConfig+0xfc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01b      	beq.n	8004b4a <TIM_Base_SetConfig+0x8a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b18:	d017      	beq.n	8004b4a <TIM_Base_SetConfig+0x8a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a28      	ldr	r2, [pc, #160]	@ (8004bc0 <TIM_Base_SetConfig+0x100>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <TIM_Base_SetConfig+0x8a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a27      	ldr	r2, [pc, #156]	@ (8004bc4 <TIM_Base_SetConfig+0x104>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00f      	beq.n	8004b4a <TIM_Base_SetConfig+0x8a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a26      	ldr	r2, [pc, #152]	@ (8004bc8 <TIM_Base_SetConfig+0x108>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00b      	beq.n	8004b4a <TIM_Base_SetConfig+0x8a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a25      	ldr	r2, [pc, #148]	@ (8004bcc <TIM_Base_SetConfig+0x10c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d007      	beq.n	8004b4a <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a24      	ldr	r2, [pc, #144]	@ (8004bd0 <TIM_Base_SetConfig+0x110>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a23      	ldr	r2, [pc, #140]	@ (8004bd4 <TIM_Base_SetConfig+0x114>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d108      	bne.n	8004b5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a0e      	ldr	r2, [pc, #56]	@ (8004bbc <TIM_Base_SetConfig+0xfc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d103      	bne.n	8004b90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d105      	bne.n	8004bae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f023 0201 	bic.w	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	611a      	str	r2, [r3, #16]
  }
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800

08004bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f023 0201 	bic.w	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0303 	bic.w	r3, r3, #3
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f023 0302 	bic.w	r3, r3, #2
 8004c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca0 <TIM_OC1_SetConfig+0xc8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d10c      	bne.n	8004c4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f023 0308 	bic.w	r3, r3, #8
 8004c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f023 0304 	bic.w	r3, r3, #4
 8004c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a13      	ldr	r2, [pc, #76]	@ (8004ca0 <TIM_OC1_SetConfig+0xc8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d111      	bne.n	8004c7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	40010000 	.word	0x40010000

08004ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f023 0210 	bic.w	r2, r3, #16
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0320 	bic.w	r3, r3, #32
 8004cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <TIM_OC2_SetConfig+0xd4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10d      	bne.n	8004d20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a15      	ldr	r2, [pc, #84]	@ (8004d78 <TIM_OC2_SetConfig+0xd4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d113      	bne.n	8004d50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	621a      	str	r2, [r3, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000

08004d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e4c <TIM_OC3_SetConfig+0xd0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d10d      	bne.n	8004df6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a14      	ldr	r2, [pc, #80]	@ (8004e4c <TIM_OC3_SetConfig+0xd0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d113      	bne.n	8004e26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	621a      	str	r2, [r3, #32]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40010000 	.word	0x40010000

08004e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	031b      	lsls	r3, r3, #12
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a10      	ldr	r2, [pc, #64]	@ (8004eec <TIM_OC4_SetConfig+0x9c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d109      	bne.n	8004ec4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	019b      	lsls	r3, r3, #6
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000

08004ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 0201 	bic.w	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f023 030a 	bic.w	r3, r3, #10
 8004f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b087      	sub	sp, #28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f023 0210 	bic.w	r2, r3, #16
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	031b      	lsls	r3, r3, #12
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f043 0307 	orr.w	r3, r3, #7
 8004fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	609a      	str	r2, [r3, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	021a      	lsls	r2, r3, #8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	431a      	orrs	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2201      	movs	r2, #1
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	431a      	orrs	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e050      	b.n	800512a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d4:	d013      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a18      	ldr	r2, [pc, #96]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a15      	ldr	r2, [pc, #84]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a13      	ldr	r2, [pc, #76]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d10c      	bne.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	4313      	orrs	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40014000 	.word	0x40014000

0800514c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005164:	2302      	movs	r3, #2
 8005166:	e03d      	b.n	80051e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e042      	b.n	8005288 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc fc64 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2224      	movs	r2, #36	@ 0x24
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f973 	bl	8005520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	@ 0x28
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d175      	bne.n	800539c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_UART_Transmit+0x2c>
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e06e      	b.n	800539e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2221      	movs	r2, #33	@ 0x21
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ce:	f7fc fce1 	bl	8001c94 <HAL_GetTick>
 80052d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	88fa      	ldrh	r2, [r7, #6]
 80052d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	88fa      	ldrh	r2, [r7, #6]
 80052de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e8:	d108      	bne.n	80052fc <HAL_UART_Transmit+0x6c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e003      	b.n	8005304 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005304:	e02e      	b.n	8005364 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	2180      	movs	r1, #128	@ 0x80
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f848 	bl	80053a6 <UART_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e03a      	b.n	800539e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800533c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	3302      	adds	r3, #2
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	e007      	b.n	8005356 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	781a      	ldrb	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	3301      	adds	r3, #1
 8005354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1cb      	bne.n	8005306 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2200      	movs	r2, #0
 8005376:	2140      	movs	r1, #64	@ 0x40
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f814 	bl	80053a6 <UART_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e006      	b.n	800539e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e000      	b.n	800539e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800539c:	2302      	movs	r3, #2
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b086      	sub	sp, #24
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	4613      	mov	r3, r2
 80053b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b6:	e03b      	b.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d037      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c0:	f7fc fc68 	bl	8001c94 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	6a3a      	ldr	r2, [r7, #32]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d302      	bcc.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e03a      	b.n	8005450 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d023      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b80      	cmp	r3, #128	@ 0x80
 80053ec:	d020      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	d01d      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d116      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f81d 	bl	8005458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2208      	movs	r2, #8
 8005422:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e00f      	b.n	8005450 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4013      	ands	r3, r2
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	429a      	cmp	r2, r3
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	429a      	cmp	r2, r3
 800544c:	d0b4      	beq.n	80053b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b095      	sub	sp, #84	@ 0x54
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005480:	643a      	str	r2, [r7, #64]	@ 0x40
 8005482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800548e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e5      	bne.n	8005460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3314      	adds	r3, #20
 800549a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d119      	bne.n	8005504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f023 0310 	bic.w	r3, r3, #16
 80054e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054f0:	61ba      	str	r2, [r7, #24]
 80054f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6979      	ldr	r1, [r7, #20]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	613b      	str	r3, [r7, #16]
   return(result);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005512:	bf00      	nop
 8005514:	3754      	adds	r7, #84	@ 0x54
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005524:	b0c0      	sub	sp, #256	@ 0x100
 8005526:	af00      	add	r7, sp, #0
 8005528:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553c:	68d9      	ldr	r1, [r3, #12]
 800553e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	ea40 0301 	orr.w	r3, r0, r1
 8005548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	431a      	orrs	r2, r3
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	431a      	orrs	r2, r3
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005578:	f021 010c 	bic.w	r1, r1, #12
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005586:	430b      	orrs	r3, r1
 8005588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559a:	6999      	ldr	r1, [r3, #24]
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	ea40 0301 	orr.w	r3, r0, r1
 80055a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b8f      	ldr	r3, [pc, #572]	@ (80057ec <UART_SetConfig+0x2cc>)
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d005      	beq.n	80055c0 <UART_SetConfig+0xa0>
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b8d      	ldr	r3, [pc, #564]	@ (80057f0 <UART_SetConfig+0x2d0>)
 80055bc:	429a      	cmp	r2, r3
 80055be:	d104      	bne.n	80055ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055c0:	f7fe fa9a 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 80055c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055c8:	e003      	b.n	80055d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055ca:	f7fe fa81 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 80055ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055dc:	f040 810c 	bne.w	80057f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055f2:	4622      	mov	r2, r4
 80055f4:	462b      	mov	r3, r5
 80055f6:	1891      	adds	r1, r2, r2
 80055f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055fa:	415b      	adcs	r3, r3
 80055fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005602:	4621      	mov	r1, r4
 8005604:	eb12 0801 	adds.w	r8, r2, r1
 8005608:	4629      	mov	r1, r5
 800560a:	eb43 0901 	adc.w	r9, r3, r1
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800561a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800561e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005622:	4690      	mov	r8, r2
 8005624:	4699      	mov	r9, r3
 8005626:	4623      	mov	r3, r4
 8005628:	eb18 0303 	adds.w	r3, r8, r3
 800562c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005630:	462b      	mov	r3, r5
 8005632:	eb49 0303 	adc.w	r3, r9, r3
 8005636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005646:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800564a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800564e:	460b      	mov	r3, r1
 8005650:	18db      	adds	r3, r3, r3
 8005652:	653b      	str	r3, [r7, #80]	@ 0x50
 8005654:	4613      	mov	r3, r2
 8005656:	eb42 0303 	adc.w	r3, r2, r3
 800565a:	657b      	str	r3, [r7, #84]	@ 0x54
 800565c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005664:	f7fb faa8 	bl	8000bb8 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4b61      	ldr	r3, [pc, #388]	@ (80057f4 <UART_SetConfig+0x2d4>)
 800566e:	fba3 2302 	umull	r2, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	011c      	lsls	r4, r3, #4
 8005676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005680:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005688:	4642      	mov	r2, r8
 800568a:	464b      	mov	r3, r9
 800568c:	1891      	adds	r1, r2, r2
 800568e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005690:	415b      	adcs	r3, r3
 8005692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005698:	4641      	mov	r1, r8
 800569a:	eb12 0a01 	adds.w	sl, r2, r1
 800569e:	4649      	mov	r1, r9
 80056a0:	eb43 0b01 	adc.w	fp, r3, r1
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b8:	4692      	mov	sl, r2
 80056ba:	469b      	mov	fp, r3
 80056bc:	4643      	mov	r3, r8
 80056be:	eb1a 0303 	adds.w	r3, sl, r3
 80056c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056c6:	464b      	mov	r3, r9
 80056c8:	eb4b 0303 	adc.w	r3, fp, r3
 80056cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056e4:	460b      	mov	r3, r1
 80056e6:	18db      	adds	r3, r3, r3
 80056e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ea:	4613      	mov	r3, r2
 80056ec:	eb42 0303 	adc.w	r3, r2, r3
 80056f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056fa:	f7fb fa5d 	bl	8000bb8 <__aeabi_uldivmod>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4611      	mov	r1, r2
 8005704:	4b3b      	ldr	r3, [pc, #236]	@ (80057f4 <UART_SetConfig+0x2d4>)
 8005706:	fba3 2301 	umull	r2, r3, r3, r1
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	2264      	movs	r2, #100	@ 0x64
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	1acb      	subs	r3, r1, r3
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800571a:	4b36      	ldr	r3, [pc, #216]	@ (80057f4 <UART_SetConfig+0x2d4>)
 800571c:	fba3 2302 	umull	r2, r3, r3, r2
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005728:	441c      	add	r4, r3
 800572a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005734:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	1891      	adds	r1, r2, r2
 8005742:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005744:	415b      	adcs	r3, r3
 8005746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800574c:	4641      	mov	r1, r8
 800574e:	1851      	adds	r1, r2, r1
 8005750:	6339      	str	r1, [r7, #48]	@ 0x30
 8005752:	4649      	mov	r1, r9
 8005754:	414b      	adcs	r3, r1
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005764:	4659      	mov	r1, fp
 8005766:	00cb      	lsls	r3, r1, #3
 8005768:	4651      	mov	r1, sl
 800576a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800576e:	4651      	mov	r1, sl
 8005770:	00ca      	lsls	r2, r1, #3
 8005772:	4610      	mov	r0, r2
 8005774:	4619      	mov	r1, r3
 8005776:	4603      	mov	r3, r0
 8005778:	4642      	mov	r2, r8
 800577a:	189b      	adds	r3, r3, r2
 800577c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005780:	464b      	mov	r3, r9
 8005782:	460a      	mov	r2, r1
 8005784:	eb42 0303 	adc.w	r3, r2, r3
 8005788:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005798:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800579c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057a0:	460b      	mov	r3, r1
 80057a2:	18db      	adds	r3, r3, r3
 80057a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057a6:	4613      	mov	r3, r2
 80057a8:	eb42 0303 	adc.w	r3, r2, r3
 80057ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057b6:	f7fb f9ff 	bl	8000bb8 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <UART_SetConfig+0x2d4>)
 80057c0:	fba3 1302 	umull	r1, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	2164      	movs	r1, #100	@ 0x64
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	3332      	adds	r3, #50	@ 0x32
 80057d2:	4a08      	ldr	r2, [pc, #32]	@ (80057f4 <UART_SetConfig+0x2d4>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f003 0207 	and.w	r2, r3, #7
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4422      	add	r2, r4
 80057e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057e8:	e106      	b.n	80059f8 <UART_SetConfig+0x4d8>
 80057ea:	bf00      	nop
 80057ec:	40011000 	.word	0x40011000
 80057f0:	40011400 	.word	0x40011400
 80057f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005802:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800580a:	4642      	mov	r2, r8
 800580c:	464b      	mov	r3, r9
 800580e:	1891      	adds	r1, r2, r2
 8005810:	6239      	str	r1, [r7, #32]
 8005812:	415b      	adcs	r3, r3
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
 8005816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800581a:	4641      	mov	r1, r8
 800581c:	1854      	adds	r4, r2, r1
 800581e:	4649      	mov	r1, r9
 8005820:	eb43 0501 	adc.w	r5, r3, r1
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	00eb      	lsls	r3, r5, #3
 800582e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005832:	00e2      	lsls	r2, r4, #3
 8005834:	4614      	mov	r4, r2
 8005836:	461d      	mov	r5, r3
 8005838:	4643      	mov	r3, r8
 800583a:	18e3      	adds	r3, r4, r3
 800583c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005840:	464b      	mov	r3, r9
 8005842:	eb45 0303 	adc.w	r3, r5, r3
 8005846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005866:	4629      	mov	r1, r5
 8005868:	008b      	lsls	r3, r1, #2
 800586a:	4621      	mov	r1, r4
 800586c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005870:	4621      	mov	r1, r4
 8005872:	008a      	lsls	r2, r1, #2
 8005874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005878:	f7fb f99e 	bl	8000bb8 <__aeabi_uldivmod>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4b60      	ldr	r3, [pc, #384]	@ (8005a04 <UART_SetConfig+0x4e4>)
 8005882:	fba3 2302 	umull	r2, r3, r3, r2
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	011c      	lsls	r4, r3, #4
 800588a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800588e:	2200      	movs	r2, #0
 8005890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005894:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	1891      	adds	r1, r2, r2
 80058a2:	61b9      	str	r1, [r7, #24]
 80058a4:	415b      	adcs	r3, r3
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ac:	4641      	mov	r1, r8
 80058ae:	1851      	adds	r1, r2, r1
 80058b0:	6139      	str	r1, [r7, #16]
 80058b2:	4649      	mov	r1, r9
 80058b4:	414b      	adcs	r3, r1
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058c4:	4659      	mov	r1, fp
 80058c6:	00cb      	lsls	r3, r1, #3
 80058c8:	4651      	mov	r1, sl
 80058ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ce:	4651      	mov	r1, sl
 80058d0:	00ca      	lsls	r2, r1, #3
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	4642      	mov	r2, r8
 80058da:	189b      	adds	r3, r3, r2
 80058dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058e0:	464b      	mov	r3, r9
 80058e2:	460a      	mov	r2, r1
 80058e4:	eb42 0303 	adc.w	r3, r2, r3
 80058e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005904:	4649      	mov	r1, r9
 8005906:	008b      	lsls	r3, r1, #2
 8005908:	4641      	mov	r1, r8
 800590a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590e:	4641      	mov	r1, r8
 8005910:	008a      	lsls	r2, r1, #2
 8005912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005916:	f7fb f94f 	bl	8000bb8 <__aeabi_uldivmod>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4611      	mov	r1, r2
 8005920:	4b38      	ldr	r3, [pc, #224]	@ (8005a04 <UART_SetConfig+0x4e4>)
 8005922:	fba3 2301 	umull	r2, r3, r3, r1
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	2264      	movs	r2, #100	@ 0x64
 800592a:	fb02 f303 	mul.w	r3, r2, r3
 800592e:	1acb      	subs	r3, r1, r3
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	3332      	adds	r3, #50	@ 0x32
 8005934:	4a33      	ldr	r2, [pc, #204]	@ (8005a04 <UART_SetConfig+0x4e4>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005940:	441c      	add	r4, r3
 8005942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005946:	2200      	movs	r2, #0
 8005948:	673b      	str	r3, [r7, #112]	@ 0x70
 800594a:	677a      	str	r2, [r7, #116]	@ 0x74
 800594c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	1891      	adds	r1, r2, r2
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	415b      	adcs	r3, r3
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005960:	4641      	mov	r1, r8
 8005962:	1851      	adds	r1, r2, r1
 8005964:	6039      	str	r1, [r7, #0]
 8005966:	4649      	mov	r1, r9
 8005968:	414b      	adcs	r3, r1
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005978:	4659      	mov	r1, fp
 800597a:	00cb      	lsls	r3, r1, #3
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005982:	4651      	mov	r1, sl
 8005984:	00ca      	lsls	r2, r1, #3
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	4603      	mov	r3, r0
 800598c:	4642      	mov	r2, r8
 800598e:	189b      	adds	r3, r3, r2
 8005990:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005992:	464b      	mov	r3, r9
 8005994:	460a      	mov	r2, r1
 8005996:	eb42 0303 	adc.w	r3, r2, r3
 800599a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80059a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059b4:	4649      	mov	r1, r9
 80059b6:	008b      	lsls	r3, r1, #2
 80059b8:	4641      	mov	r1, r8
 80059ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059be:	4641      	mov	r1, r8
 80059c0:	008a      	lsls	r2, r1, #2
 80059c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059c6:	f7fb f8f7 	bl	8000bb8 <__aeabi_uldivmod>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005a04 <UART_SetConfig+0x4e4>)
 80059d0:	fba3 1302 	umull	r1, r3, r3, r2
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	2164      	movs	r1, #100	@ 0x64
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	3332      	adds	r3, #50	@ 0x32
 80059e2:	4a08      	ldr	r2, [pc, #32]	@ (8005a04 <UART_SetConfig+0x4e4>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	f003 020f 	and.w	r2, r3, #15
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4422      	add	r2, r4
 80059f6:	609a      	str	r2, [r3, #8]
}
 80059f8:	bf00      	nop
 80059fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059fe:	46bd      	mov	sp, r7
 8005a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a04:	51eb851f 	.word	0x51eb851f

08005a08 <fastFlow_init>:
//void _i2cWrite(uint8_t address, uint8_t* data,uint8_t len);
//void _i2cRead(uint8_t address, uint8_t* data,uint8_t len);


void fastFlow_init()
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
	fsmInitSingleThreaded(&fastFlowFSM, _state_menu, _action_init, fsmNoAction);
 8005a0c:	4b03      	ldr	r3, [pc, #12]	@ (8005a1c <fastFlow_init+0x14>)
 8005a0e:	4a04      	ldr	r2, [pc, #16]	@ (8005a20 <fastFlow_init+0x18>)
 8005a10:	4904      	ldr	r1, [pc, #16]	@ (8005a24 <fastFlow_init+0x1c>)
 8005a12:	4805      	ldr	r0, [pc, #20]	@ (8005a28 <fastFlow_init+0x20>)
 8005a14:	f000 f896 	bl	8005b44 <fsmInitSingleThreaded>
}
 8005a18:	bf00      	nop
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	08005ca5 	.word	0x08005ca5
 8005a20:	08005ab5 	.word	0x08005ab5
 8005a24:	08005a3d 	.word	0x08005a3d
 8005a28:	20000458 	.word	0x20000458

08005a2c <fastFlow_run>:


void fastFlow_run()
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(&huart2, helloWorld_msg, sizeof(helloWorld_msg) - 1, 1000);




	while(1) fsmRun(&fastFlowFSM);
 8005a30:	4801      	ldr	r0, [pc, #4]	@ (8005a38 <fastFlow_run+0xc>)
 8005a32:	f000 f8bb 	bl	8005bac <fsmRun>
 8005a36:	e7fb      	b.n	8005a30 <fastFlow_run+0x4>
 8005a38:	20000458 	.word	0x20000458

08005a3c <_state_menu>:
}

// states implementation

void _state_menu()
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
	//const uint32_t c_uiRefreshRateNtick = 150;
	const uint32_t c_uiRefreshRateNtick = 500;
 8005a42:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005a46:	60fb      	str	r3, [r7, #12]

	const uint32_t c_LEDRefreshRateNtick = 500;
 8005a48:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005a4c:	60bb      	str	r3, [r7, #8]
	const uint32_t c_displayRefreshRateNtick = 1;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	607b      	str	r3, [r7, #4]

	static uint32_t uiLastTick = 0;
	static uint32_t LEDLastTick = 0;
	static uint32_t displayLastTick = 0;

	uint32_t tickNow = hw_getTick();
 8005a52:	f000 fdeb 	bl	800662c <hw_getTick>
 8005a56:	6038      	str	r0, [r7, #0]

	if(tickNow - uiLastTick > c_uiRefreshRateNtick){
 8005a58:	4b13      	ldr	r3, [pc, #76]	@ (8005aa8 <_state_menu+0x6c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d204      	bcs.n	8005a70 <_state_menu+0x34>
		uiLastTick = tickNow;
 8005a66:	4a10      	ldr	r2, [pc, #64]	@ (8005aa8 <_state_menu+0x6c>)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6013      	str	r3, [r2, #0]
		ui_updateRoutine();
 8005a6c:	f000 f944 	bl	8005cf8 <ui_updateRoutine>
	}


	if(tickNow - LEDLastTick > c_LEDRefreshRateNtick){
 8005a70:	4b0e      	ldr	r3, [pc, #56]	@ (8005aac <_state_menu+0x70>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d204      	bcs.n	8005a88 <_state_menu+0x4c>
		LEDLastTick = tickNow;
 8005a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8005aac <_state_menu+0x70>)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6013      	str	r3, [r2, #0]
		ui_toggleLED();
 8005a84:	f000 f94e 	bl	8005d24 <ui_toggleLED>
	}

	if(tickNow - displayLastTick > c_displayRefreshRateNtick){
 8005a88:	4b09      	ldr	r3, [pc, #36]	@ (8005ab0 <_state_menu+0x74>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d204      	bcs.n	8005aa0 <_state_menu+0x64>
		displayLastTick = tickNow;
 8005a96:	4a06      	ldr	r2, [pc, #24]	@ (8005ab0 <_state_menu+0x74>)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6013      	str	r3, [r2, #0]
		ui_displayUpdateRoutine();
 8005a9c:	f000 f936 	bl	8005d0c <ui_displayUpdateRoutine>
	}
}
 8005aa0:	bf00      	nop
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000488 	.word	0x20000488
 8005aac:	2000048c 	.word	0x2000048c
 8005ab0:	20000490 	.word	0x20000490

08005ab4 <_action_init>:

// actions implementation

void _action_init()
{
 8005ab4:	b5b0      	push	{r4, r5, r7, lr}
 8005ab6:	b08a      	sub	sp, #40	@ 0x28
 8005ab8:	af00      	add	r7, sp, #0
	char initMSG[] = "Initializing Fast Flow...\n\r";
 8005aba:	4b14      	ldr	r3, [pc, #80]	@ (8005b0c <_action_init+0x58>)
 8005abc:	f107 040c 	add.w	r4, r7, #12
 8005ac0:	461d      	mov	r5, r3
 8005ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ac6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char doneMSG[] = "...done!\n\r";
 8005ace:	4a10      	ldr	r2, [pc, #64]	@ (8005b10 <_action_init+0x5c>)
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ad4:	c303      	stmia	r3!, {r0, r1}
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	3302      	adds	r3, #2
 8005ada:	0c12      	lsrs	r2, r2, #16
 8005adc:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, initMSG, sizeof(initMSG) - 1, 1000);
 8005ade:	f107 010c 	add.w	r1, r7, #12
 8005ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ae6:	221b      	movs	r2, #27
 8005ae8:	480a      	ldr	r0, [pc, #40]	@ (8005b14 <_action_init+0x60>)
 8005aea:	f7ff fbd1 	bl	8005290 <HAL_UART_Transmit>

	hw_init();
 8005aee:	f000 fd39 	bl	8006564 <hw_init>

	ui_init();
 8005af2:	f000 f8df 	bl	8005cb4 <ui_init>
	HAL_UART_Transmit(&huart2, doneMSG, sizeof(doneMSG) - 1, 1000);
 8005af6:	4639      	mov	r1, r7
 8005af8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005afc:	220a      	movs	r2, #10
 8005afe:	4805      	ldr	r0, [pc, #20]	@ (8005b14 <_action_init+0x60>)
 8005b00:	f7ff fbc6 	bl	8005290 <HAL_UART_Transmit>
}
 8005b04:	bf00      	nop
 8005b06:	3728      	adds	r7, #40	@ 0x28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b0c:	08009a00 	.word	0x08009a00
 8005b10:	08009a1c 	.word	0x08009a1c
 8005b14:	2000040c 	.word	0x2000040c

08005b18 <_singleThreadedLock>:
 */

#include "tinyfsm.h"

// No-op lock function for single-threaded use
static unsigned int _singleThreadedLock(fsmMutex_t mutexObject) {
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
    return 0;  // Success
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <_singleThreadedUnlock>:

// No-op unlock function for single-threaded use
static unsigned int _singleThreadedUnlock(fsmMutex_t mutexObject) {
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
    return 0;  // Success
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <fsmInitSingleThreaded>:
void fsmInitSingleThreaded(
    fsm_t* fsmObject,
    fsmStateRoutine_t entryState,
    fsmAction_t entryAction,
    fsmAction_t fsmEndingAction)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
    static fsmMutexOps_t singleThreadedOps = {
        .lock = _singleThreadedLock,
        .unlock = _singleThreadedUnlock
    };

    fsmObject->entryState = entryState;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	601a      	str	r2, [r3, #0]
    fsmObject->previousState = entryState;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	60da      	str	r2, [r3, #12]
    fsmObject->currentState = entryState;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	611a      	str	r2, [r3, #16]
    fsmObject->nextState = entryState;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	615a      	str	r2, [r3, #20]
    fsmObject->entryAction = entryAction;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	605a      	str	r2, [r3, #4]
    fsmObject->fsmEndingAction = fsmEndingAction;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	609a      	str	r2, [r3, #8]
    fsmObject->action = entryAction;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	61da      	str	r2, [r3, #28]
    fsmObject->state = STATE_START;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	761a      	strb	r2, [r3, #24]
    fsmObject->mutexObject = 0;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	621a      	str	r2, [r3, #32]
    fsmObject->mutexOps = singleThreadedOps;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a07      	ldr	r2, [pc, #28]	@ (8005ba8 <fsmInitSingleThreaded+0x64>)
 8005b8c:	3324      	adds	r3, #36	@ 0x24
 8005b8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b92:	e883 0003 	stmia.w	r3, {r0, r1}
    fsmObject->initialized = 1;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	2000000c 	.word	0x2000000c

08005bac <fsmRun>:

fsmStatus_t fsmRun(fsm_t* fsmObject)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	// cease execution if not initialized
    if (fsmObject->initialized != 1) return FSM_NOT_INITIALIZED;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d001      	beq.n	8005bc0 <fsmRun+0x14>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e06c      	b.n	8005c9a <fsmRun+0xee>

    // mutex lock
    if (fsmObject->mutexOps.lock(fsmObject->mutexObject) != 0) return FSM_MUTEX_LOCKED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6a12      	ldr	r2, [r2, #32]
 8005bc8:	4610      	mov	r0, r2
 8005bca:	4798      	blx	r3
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <fsmRun+0x2a>
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e061      	b.n	8005c9a <fsmRun+0xee>

    switch (fsmObject->state) {
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	7e1b      	ldrb	r3, [r3, #24]
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d84e      	bhi.n	8005c7c <fsmRun+0xd0>
 8005bde:	a201      	add	r2, pc, #4	@ (adr r2, 8005be4 <fsmRun+0x38>)
 8005be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be4:	08005bf5 	.word	0x08005bf5
 8005be8:	08005c2b 	.word	0x08005c2b
 8005bec:	08005c03 	.word	0x08005c03
 8005bf0:	08005c49 	.word	0x08005c49
        case STATE_START:
            fsmObject->entryAction();
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4798      	blx	r3
            fsmObject->state = STATE_NO_CHANGE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	761a      	strb	r2, [r3, #24]
            break;
 8005c00:	e044      	b.n	8005c8c <fsmRun+0xe0>

        case STATE_NO_CHANGE:
        	fsmObject->mutexOps.unlock(fsmObject->mutexObject);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6a12      	ldr	r2, [r2, #32]
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4798      	blx	r3
            fsmObject->currentState();
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	4798      	blx	r3
        	// wait until mutex is unlocked and then lock it
        	while(fsmObject->mutexOps.lock(fsmObject->mutexObject) != 0);
 8005c14:	bf00      	nop
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6a12      	ldr	r2, [r2, #32]
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4798      	blx	r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f6      	bne.n	8005c16 <fsmRun+0x6a>
            break;
 8005c28:	e030      	b.n	8005c8c <fsmRun+0xe0>

        case STATE_TRANSITION:
            // Change state
            fsmObject->previousState = fsmObject->currentState;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60da      	str	r2, [r3, #12]
            fsmObject->currentState = fsmObject->nextState;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	611a      	str	r2, [r3, #16]
            fsmObject->action();
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	4798      	blx	r3
            fsmObject->state = STATE_NO_CHANGE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	761a      	strb	r2, [r3, #24]
            break;
 8005c46:	e021      	b.n	8005c8c <fsmRun+0xe0>

        case STATE_END_FSM:
            // End the finite state machine
            fsmObject->previousState = fsmObject->entryState;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60da      	str	r2, [r3, #12]
            fsmObject->currentState = fsmObject->entryState;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	611a      	str	r2, [r3, #16]
            fsmObject->nextState = fsmObject->entryState;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	615a      	str	r2, [r3, #20]
            fsmObject->fsmEndingAction();
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	4798      	blx	r3
            fsmObject->state = STATE_NO_CHANGE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	761a      	strb	r2, [r3, #24]

            // mutex unlock
            fsmObject->mutexOps.unlock(fsmObject->mutexObject);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6a12      	ldr	r2, [r2, #32]
 8005c74:	4610      	mov	r0, r2
 8005c76:	4798      	blx	r3
            return FSM_ENDED;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e00e      	b.n	8005c9a <fsmRun+0xee>

        default:
            // Invalid state
            fsmObject->mutexOps.unlock(fsmObject->mutexObject);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6a12      	ldr	r2, [r2, #32]
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
            return FSM_FAULT_UNKNOWN_STATE_RETURN;
 8005c88:	2304      	movs	r3, #4
 8005c8a:	e006      	b.n	8005c9a <fsmRun+0xee>
    }

    // mutex unlock
    fsmObject->mutexOps.unlock(fsmObject->mutexObject);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6a12      	ldr	r2, [r2, #32]
 8005c94:	4610      	mov	r0, r2
 8005c96:	4798      	blx	r3
    return FSM_RUNNING;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop

08005ca4 <fsmNoAction>:
    // mutex unlock
    fsmObject->mutexOps.unlock(fsmObject->mutexObject);
}

void fsmNoAction()
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
    // No action function
}
 8005ca8:	bf00      	nop
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <ui_init>:
bool _buttonPressed();
void _displayPrintNumber(display_t *displayObject, uint8_t number, uint8_t row, uint8_t column);
void _encoderUpdateparameter(display_t *displayObject, uint8_t *param, uint8_t row, uint8_t column);

void ui_init()
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0

	//encoder_init();
	displayPtr = hw_getDisplayobjectByPtr();
 8005cb8:	f000 fcae 	bl	8006618 <hw_getDisplayobjectByPtr>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005ce8 <ui_init+0x34>)
 8005cc0:	6013      	str	r3, [r2, #0]


	_action_clearDisplay();
 8005cc2:	f000 f875 	bl	8005db0 <_action_clearDisplay>
	//_action_printMenu();

	while(display_updateRoutine(displayPtr));
 8005cc6:	bf00      	nop
 8005cc8:	4b07      	ldr	r3, [pc, #28]	@ (8005ce8 <ui_init+0x34>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f971 	bl	8005fb4 <display_updateRoutine>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f7      	bne.n	8005cc8 <ui_init+0x14>




	//fsmInitSingleThreaded(&ui_fsm, _state_listMenu, _action_initSelectArrow, fsmNoAction);
	fsmInitSingleThreaded(&ui_fsm, _state_hwTest, fsmNoAction, fsmNoAction);
 8005cd8:	4b04      	ldr	r3, [pc, #16]	@ (8005cec <ui_init+0x38>)
 8005cda:	4a04      	ldr	r2, [pc, #16]	@ (8005cec <ui_init+0x38>)
 8005cdc:	4904      	ldr	r1, [pc, #16]	@ (8005cf0 <ui_init+0x3c>)
 8005cde:	4805      	ldr	r0, [pc, #20]	@ (8005cf4 <ui_init+0x40>)
 8005ce0:	f7ff ff30 	bl	8005b44 <fsmInitSingleThreaded>
}
 8005ce4:	bf00      	nop
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	200004c4 	.word	0x200004c4
 8005cec:	08005ca5 	.word	0x08005ca5
 8005cf0:	08005d31 	.word	0x08005d31
 8005cf4:	20000494 	.word	0x20000494

08005cf8 <ui_updateRoutine>:

void ui_updateRoutine()
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
	fsmRun(&ui_fsm);
 8005cfc:	4802      	ldr	r0, [pc, #8]	@ (8005d08 <ui_updateRoutine+0x10>)
 8005cfe:	f7ff ff55 	bl	8005bac <fsmRun>
}
 8005d02:	bf00      	nop
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000494 	.word	0x20000494

08005d0c <ui_displayUpdateRoutine>:
{
	eventBuffer = event;
}

void ui_displayUpdateRoutine()
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
	display_updateRoutine(displayPtr);
 8005d10:	4b03      	ldr	r3, [pc, #12]	@ (8005d20 <ui_displayUpdateRoutine+0x14>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f94d 	bl	8005fb4 <display_updateRoutine>
}
 8005d1a:	bf00      	nop
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200004c4 	.word	0x200004c4

08005d24 <ui_toggleLED>:

void ui_toggleLED()
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
	hw_toggleLED();
 8005d28:	f000 fc88 	bl	800663c <hw_toggleLED>
}
 8005d2c:	bf00      	nop
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <_state_hwTest>:


}

void _state_hwTest()
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af02      	add	r7, sp, #8
	static char buffer[7];
	float temperature;
	//= heaterGetTemp();
	// do a test here by just printing out the temperature from the MAX31865

	_displayPrintNumber(displayPtr, temp, 0, 4);
 8005d36:	4b19      	ldr	r3, [pc, #100]	@ (8005d9c <_state_hwTest+0x6c>)
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	4b19      	ldr	r3, [pc, #100]	@ (8005da0 <_state_hwTest+0x70>)
 8005d3c:	7819      	ldrb	r1, [r3, #0]
 8005d3e:	2304      	movs	r3, #4
 8005d40:	2200      	movs	r2, #0
 8005d42:	f000 f857 	bl	8005df4 <_displayPrintNumber>

	if(1){
		adc = tempSensor_ReadADC();
 8005d46:	f000 ff87 	bl	8006c58 <tempSensor_ReadADC>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	ee07 3a90 	vmov	s15, r3
 8005d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d54:	4b13      	ldr	r3, [pc, #76]	@ (8005da4 <_state_hwTest+0x74>)
 8005d56:	edc3 7a00 	vstr	s15, [r3]

		// buffer needs to be 6 chatracters long ecause of the '\0'
		snprintf(buffer,6,"%u",adc);
 8005d5a:	4b12      	ldr	r3, [pc, #72]	@ (8005da4 <_state_hwTest+0x74>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fa fbfa 	bl	8000558 <__aeabi_f2d>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	e9cd 2300 	strd	r2, r3, [sp]
 8005d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8005da8 <_state_hwTest+0x78>)
 8005d6e:	2106      	movs	r1, #6
 8005d70:	480e      	ldr	r0, [pc, #56]	@ (8005dac <_state_hwTest+0x7c>)
 8005d72:	f001 fcf7 	bl	8007764 <sniprintf>
		// only print 5 characters to exclude '\0'
		display_print(displayPtr, buffer, 5, 1, 2);
 8005d76:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <_state_hwTest+0x6c>)
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	2301      	movs	r3, #1
 8005d80:	2205      	movs	r2, #5
 8005d82:	490a      	ldr	r1, [pc, #40]	@ (8005dac <_state_hwTest+0x7c>)
 8005d84:	f000 f9d2 	bl	800612c <display_print>
		// only print 6 characters to exclude '\0'
		display_print(displayPtr, buffer, 6, 1, 2);
	}

	//_displayPrintNumber(displayPtr, (uint8_t)temperature, 1, 4);
	temp++;
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <_state_hwTest+0x70>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	4b03      	ldr	r3, [pc, #12]	@ (8005da0 <_state_hwTest+0x70>)
 8005d92:	701a      	strb	r2, [r3, #0]

}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	200004c4 	.word	0x200004c4
 8005da0:	200004ca 	.word	0x200004ca
 8005da4:	200004cc 	.word	0x200004cc
 8005da8:	08009a28 	.word	0x08009a28
 8005dac:	200004d0 	.word	0x200004d0

08005db0 <_action_clearDisplay>:

// action implementation

void _action_clearDisplay()
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af02      	add	r7, sp, #8
	display_print(displayPtr, clear, sizeof(clear), 0, 0);
 8005db6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dec <_action_clearDisplay+0x3c>)
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2241      	movs	r2, #65	@ 0x41
 8005dc2:	490b      	ldr	r1, [pc, #44]	@ (8005df0 <_action_clearDisplay+0x40>)
 8005dc4:	f000 f9b2 	bl	800612c <display_print>
	display_request(displayPtr, SET_CURSOR_POSITION, 0, 0);
 8005dc8:	4b08      	ldr	r3, [pc, #32]	@ (8005dec <_action_clearDisplay+0x3c>)
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	f000 f97b 	bl	80060cc <display_request>
	display_request(displayPtr, SET_CURSOR_MODE, INVISIBLE, 0);
 8005dd6:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <_action_clearDisplay+0x3c>)
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2102      	movs	r1, #2
 8005de0:	f000 f974 	bl	80060cc <display_request>
}
 8005de4:	bf00      	nop
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	200004c4 	.word	0x200004c4
 8005df0:	20000014 	.word	0x20000014

08005df4 <_displayPrintNumber>:
	buttonOldState = buttonState;
	return false;
}

void _displayPrintNumber(display_t *displayObject, uint8_t number, uint8_t row, uint8_t column)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	461a      	mov	r2, r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	70fb      	strb	r3, [r7, #3]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70bb      	strb	r3, [r7, #2]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	707b      	strb	r3, [r7, #1]
	uint8_t buf[3];

	if(number >=100){
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	2b63      	cmp	r3, #99	@ 0x63
 8005e12:	d935      	bls.n	8005e80 <_displayPrintNumber+0x8c>
			buf[0] = number / 100;
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	4a3e      	ldr	r2, [pc, #248]	@ (8005f10 <_displayPrintNumber+0x11c>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	733b      	strb	r3, [r7, #12]
			number -= 100 * buf[0];
 8005e22:	7b3b      	ldrb	r3, [r7, #12]
 8005e24:	461a      	mov	r2, r3
 8005e26:	0092      	lsls	r2, r2, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	00d2      	lsls	r2, r2, #3
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	78fb      	ldrb	r3, [r7, #3]
 8005e34:	4413      	add	r3, r2
 8005e36:	70fb      	strb	r3, [r7, #3]
			buf[1] = (number / 10);
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	4a36      	ldr	r2, [pc, #216]	@ (8005f14 <_displayPrintNumber+0x120>)
 8005e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e40:	08db      	lsrs	r3, r3, #3
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	737b      	strb	r3, [r7, #13]
			number -= 10 * buf[1];
 8005e46:	7b7b      	ldrb	r3, [r7, #13]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	0152      	lsls	r2, r2, #5
 8005e4c:	1ad2      	subs	r2, r2, r3
 8005e4e:	0092      	lsls	r2, r2, #2
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	4413      	add	r3, r2
 8005e5a:	70fb      	strb	r3, [r7, #3]
			buf[2] = number;
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	73bb      	strb	r3, [r7, #14]
			buf[0] |= 0x30;
 8005e60:	7b3b      	ldrb	r3, [r7, #12]
 8005e62:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	733b      	strb	r3, [r7, #12]
			buf[1] |= 0x30;
 8005e6a:	7b7b      	ldrb	r3, [r7, #13]
 8005e6c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	737b      	strb	r3, [r7, #13]
			buf[2] |= 0x30;
 8005e74:	7bbb      	ldrb	r3, [r7, #14]
 8005e76:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	73bb      	strb	r3, [r7, #14]
 8005e7e:	e02e      	b.n	8005ede <_displayPrintNumber+0xea>
		} else if(number >= 10){
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d920      	bls.n	8005ec8 <_displayPrintNumber+0xd4>
			buf[1] = number / 10;
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	4a22      	ldr	r2, [pc, #136]	@ (8005f14 <_displayPrintNumber+0x120>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	08db      	lsrs	r3, r3, #3
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	737b      	strb	r3, [r7, #13]
			number -= 10 * buf[1];
 8005e94:	7b7b      	ldrb	r3, [r7, #13]
 8005e96:	461a      	mov	r2, r3
 8005e98:	0152      	lsls	r2, r2, #5
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	0092      	lsls	r2, r2, #2
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	70fb      	strb	r3, [r7, #3]
			buf[2] = number;
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	73bb      	strb	r3, [r7, #14]
			buf[0] = ' ';
 8005eae:	2320      	movs	r3, #32
 8005eb0:	733b      	strb	r3, [r7, #12]
			buf[1] |= 0x30;
 8005eb2:	7b7b      	ldrb	r3, [r7, #13]
 8005eb4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	737b      	strb	r3, [r7, #13]
			buf[2] |= 0x30;
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	73bb      	strb	r3, [r7, #14]
 8005ec6:	e00a      	b.n	8005ede <_displayPrintNumber+0xea>
		} else {
			buf[2] = number;
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	73bb      	strb	r3, [r7, #14]
			buf[0] = ' ';
 8005ecc:	2320      	movs	r3, #32
 8005ece:	733b      	strb	r3, [r7, #12]
			buf[1] = ' ';
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	737b      	strb	r3, [r7, #13]
			buf[2] |= 0x30;
 8005ed4:	7bbb      	ldrb	r3, [r7, #14]
 8005ed6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	73bb      	strb	r3, [r7, #14]
		}

	display_print(displayObject, buf, 3, row, column);
 8005ede:	78ba      	ldrb	r2, [r7, #2]
 8005ee0:	f107 010c 	add.w	r1, r7, #12
 8005ee4:	787b      	ldrb	r3, [r7, #1]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	2203      	movs	r2, #3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f91d 	bl	800612c <display_print>
	// put back curset at original position where the index is
	display_request(displayObject, SET_CURSOR_POSITION, rowIndex & 0x03, columnIndex);
 8005ef2:	4b09      	ldr	r3, [pc, #36]	@ (8005f18 <_displayPrintNumber+0x124>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <_displayPrintNumber+0x128>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2100      	movs	r1, #0
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8e2 	bl	80060cc <display_request>
}
 8005f08:	bf00      	nop
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	51eb851f 	.word	0x51eb851f
 8005f14:	cccccccd 	.word	0xcccccccd
 8005f18:	200004c8 	.word	0x200004c8
 8005f1c:	200004c9 	.word	0x200004c9

08005f20 <buzzer_init>:

#include "main.h"
#include "tim.h"

void buzzer_init()
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
	//HAL_TIM_Stop(&htim4);
}
 8005f24:	bf00      	nop
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <display_init>:
		display_delay delay,
		display_writePort writePort,
		display_readWrite readWrite,
		display_enable enable,
		display_regSelect regSelect)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	603b      	str	r3, [r7, #0]
	_regSelect = regSelect;

	_displayCursorRow = 0;
	_displayCursorIndex = 0;
*/
	object->delay = delay;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	601a      	str	r2, [r3, #0]
	object->writePort = writePort;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	605a      	str	r2, [r3, #4]
	object->readWrite =readWrite;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	609a      	str	r2, [r3, #8]
	object->enable = enable;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	60da      	str	r2, [r3, #12]
	object->regSelect = regSelect;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	611a      	str	r2, [r3, #16]

	object->cursorRow = 0;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	object->cursorIndex = 0;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

	object->writeIndex = 0;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 20f7 	strb.w	r2, [r3, #247]	@ 0xf7
	object->workIndex = 0;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8

	display_request(object,SET_FUNCTION, 0, 0);
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2103      	movs	r1, #3
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f8a3 	bl	80060cc <display_request>
	//display_request(SET_CURSOR_MODE,INVISIBLE,0);
	display_request(object,SET_CURSOR_MODE,BLINK,0);
 8005f86:	2300      	movs	r3, #0
 8005f88:	2202      	movs	r2, #2
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f89d 	bl	80060cc <display_request>
	display_request(object,SET_CURSOR_MODE,AUTO_INCREMENT,0);
 8005f92:	2300      	movs	r3, #0
 8005f94:	2204      	movs	r2, #4
 8005f96:	2102      	movs	r1, #2
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f897 	bl	80060cc <display_request>
	display_request(object,UPDATE_DISPLAY,0,0);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f891 	bl	80060cc <display_request>
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <display_updateRoutine>:

bool display_updateRoutine(display_t *object)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
	uint8_t _wIndex;
	// check for new job
	if(!(object->workIndex != object->writeIndex)) return false;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 20f8 	ldrb.w	r2, [r3, #248]	@ 0xf8
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 30f7 	ldrb.w	r3, [r3, #247]	@ 0xf7
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d101      	bne.n	8005fd0 <display_updateRoutine+0x1c>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e078      	b.n	80060c2 <display_updateRoutine+0x10e>

	_wIndex = object->workIndex+1;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	73fb      	strb	r3, [r7, #15]

	switch (object->requestPipeline[0][_wIndex]) {
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d86a      	bhi.n	80060be <display_updateRoutine+0x10a>
 8005fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff0 <display_updateRoutine+0x3c>)
 8005fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fee:	bf00      	nop
 8005ff0:	08006001 	.word	0x08006001
 8005ff4:	08006025 	.word	0x08006025
 8005ff8:	0800602d 	.word	0x0800602d
 8005ffc:	080060af 	.word	0x080060af

		case SET_CURSOR_POSITION:
			_setCursorPosition(object, object->requestPipeline[1][_wIndex], object->requestPipeline[2][_wIndex]);
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	4413      	add	r3, r2
 8006006:	f893 10b7 	ldrb.w	r1, [r3, #183]	@ 0xb7
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	4413      	add	r3, r2
 8006010:	f893 30d7 	ldrb.w	r3, [r3, #215]	@ 0xd7
 8006014:	461a      	mov	r2, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f8d4 	bl	80061c4 <_setCursorPosition>
			_requestHandled(object);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f909 	bl	8006234 <_requestHandled>
			break;
 8006022:	e04d      	b.n	80060c0 <display_updateRoutine+0x10c>

		case UPDATE_DISPLAY:
			_writeToDisplay(object);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f9b3 	bl	8006390 <_writeToDisplay>
			break;
 800602a:	e049      	b.n	80060c0 <display_updateRoutine+0x10c>

		case SET_CURSOR_MODE:
			switch (object->requestPipeline[1][_wIndex])
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4413      	add	r3, r2
 8006032:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 8006036:	2b04      	cmp	r3, #4
 8006038:	d834      	bhi.n	80060a4 <display_updateRoutine+0xf0>
 800603a:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <display_updateRoutine+0x8c>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006055 	.word	0x08006055
 8006044:	08006065 	.word	0x08006065
 8006048:	08006075 	.word	0x08006075
 800604c:	08006085 	.word	0x08006085
 8006050:	08006095 	.word	0x08006095
			{
				case INVISIBLE:
					_writeCommandToDisplay(object, CURSOR_MODE_INVISIBLE);
 8006054:	210c      	movs	r1, #12
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f941 	bl	80062de <_writeCommandToDisplay>
					_requestHandled(object);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8e9 	bl	8006234 <_requestHandled>
					break;
 8006062:	e023      	b.n	80060ac <display_updateRoutine+0xf8>

				case VISIBLE:
					_writeCommandToDisplay(object, CURSOR_MODE_VISIBLE);
 8006064:	210e      	movs	r1, #14
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f939 	bl	80062de <_writeCommandToDisplay>
					_requestHandled(object);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f8e1 	bl	8006234 <_requestHandled>
					break;
 8006072:	e01b      	b.n	80060ac <display_updateRoutine+0xf8>

				case BLINK:
					_writeCommandToDisplay(object,CURSOR_MODE_BLINK);
 8006074:	210d      	movs	r1, #13
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f931 	bl	80062de <_writeCommandToDisplay>
					_requestHandled(object);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f8d9 	bl	8006234 <_requestHandled>
					break;
 8006082:	e013      	b.n	80060ac <display_updateRoutine+0xf8>

				case VISIBLE_BLINK:
					_writeCommandToDisplay(object,CURSOR_MODE_BLINK | CURSOR_MODE_INVISIBLE);
 8006084:	210d      	movs	r1, #13
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f929 	bl	80062de <_writeCommandToDisplay>
					_requestHandled(object);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f8d1 	bl	8006234 <_requestHandled>
					break;
 8006092:	e00b      	b.n	80060ac <display_updateRoutine+0xf8>

				case AUTO_INCREMENT:
					_writeCommandToDisplay(object, CURSOR_MODE_AUTO_INCREMENT);
 8006094:	2106      	movs	r1, #6
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f921 	bl	80062de <_writeCommandToDisplay>
					_requestHandled(object);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f8c9 	bl	8006234 <_requestHandled>
					break;
 80060a2:	e003      	b.n	80060ac <display_updateRoutine+0xf8>

				default:
					_requestHandled(object);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f8c5 	bl	8006234 <_requestHandled>
					break;
 80060aa:	bf00      	nop
			}
			break;
 80060ac:	e008      	b.n	80060c0 <display_updateRoutine+0x10c>

		case SET_FUNCTION:
			_writeCommandToDisplay(object, DISPLAY_FUNCTION_SET);
 80060ae:	2138      	movs	r1, #56	@ 0x38
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f914 	bl	80062de <_writeCommandToDisplay>
			_requestHandled(object);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f8bc 	bl	8006234 <_requestHandled>
			break;
 80060bc:	e000      	b.n	80060c0 <display_updateRoutine+0x10c>

		default:
		break;
 80060be:	bf00      	nop
	};
	return true;
 80060c0:	2301      	movs	r3, #1
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop

080060cc <display_request>:
void display_request(
		display_t *object,
		display_cmd_t cmd,
		uint8_t var1,
		uint8_t var2)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	4608      	mov	r0, r1
 80060d6:	4611      	mov	r1, r2
 80060d8:	461a      	mov	r2, r3
 80060da:	4603      	mov	r3, r0
 80060dc:	70fb      	strb	r3, [r7, #3]
 80060de:	460b      	mov	r3, r1
 80060e0:	70bb      	strb	r3, [r7, #2]
 80060e2:	4613      	mov	r3, r2
 80060e4:	707b      	strb	r3, [r7, #1]
	if(cmd == UPDATE_DISPLAY) {
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d115      	bne.n	8006118 <display_request+0x4c>
		_updateDisplayArray(object);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f9cd 	bl	800648c <_updateDisplayArray>
		_placeRequest(object, SET_CURSOR_POSITION, 0, 0);
 80060f2:	2300      	movs	r3, #0
 80060f4:	2200      	movs	r2, #0
 80060f6:	2100      	movs	r1, #0
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f8b6 	bl	800626a <_placeRequest>
		_placeRequest(object, UPDATE_DISPLAY, 0, 0);
 80060fe:	2300      	movs	r3, #0
 8006100:	2200      	movs	r2, #0
 8006102:	2101      	movs	r1, #1
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f8b0 	bl	800626a <_placeRequest>
		_placeRequest(object, SET_CURSOR_POSITION, 0, 15);
 800610a:	230f      	movs	r3, #15
 800610c:	2200      	movs	r2, #0
 800610e:	2100      	movs	r1, #0
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f8aa 	bl	800626a <_placeRequest>
	} else {
		_placeRequest(object, cmd,var1,var2);
	}
}
 8006116:	e005      	b.n	8006124 <display_request+0x58>
		_placeRequest(object, cmd,var1,var2);
 8006118:	787b      	ldrb	r3, [r7, #1]
 800611a:	78ba      	ldrb	r2, [r7, #2]
 800611c:	78f9      	ldrb	r1, [r7, #3]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f8a3 	bl	800626a <_placeRequest>
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <display_print>:
		display_t *object,
		char* text,
		uint8_t len,
		uint8_t row,
		uint8_t column)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	4611      	mov	r1, r2
 8006138:	461a      	mov	r2, r3
 800613a:	460b      	mov	r3, r1
 800613c:	71fb      	strb	r3, [r7, #7]
 800613e:	4613      	mov	r3, r2
 8006140:	71bb      	strb	r3, [r7, #6]
	uint8_t index = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	75fb      	strb	r3, [r7, #23]

	switch (row){
 8006146:	79bb      	ldrb	r3, [r7, #6]
 8006148:	2b03      	cmp	r3, #3
 800614a:	d81e      	bhi.n	800618a <display_print+0x5e>
 800614c:	a201      	add	r2, pc, #4	@ (adr r2, 8006154 <display_print+0x28>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	08006165 	.word	0x08006165
 8006158:	0800616d 	.word	0x0800616d
 800615c:	08006177 	.word	0x08006177
 8006160:	08006181 	.word	0x08006181
		case 0:
			index = column;
 8006164:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006168:	75fb      	strb	r3, [r7, #23]
			break;
 800616a:	e00f      	b.n	800618c <display_print+0x60>

		case 1:
			index = column + 16;
 800616c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006170:	3310      	adds	r3, #16
 8006172:	75fb      	strb	r3, [r7, #23]
			break;
 8006174:	e00a      	b.n	800618c <display_print+0x60>

		case 2:
			index = column + 32;
 8006176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800617a:	3320      	adds	r3, #32
 800617c:	75fb      	strb	r3, [r7, #23]
			break;
 800617e:	e005      	b.n	800618c <display_print+0x60>

		case 3:
			index = column + 48;
 8006180:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006184:	3330      	adds	r3, #48	@ 0x30
 8006186:	75fb      	strb	r3, [r7, #23]
			break;
 8006188:	e000      	b.n	800618c <display_print+0x60>

		default:
			break;
 800618a:	bf00      	nop
	}

	memcpy(&(object->outputArrayMirror[index]),text,len);
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	3310      	adds	r3, #16
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	3304      	adds	r3, #4
 8006196:	79fa      	ldrb	r2, [r7, #7]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	4618      	mov	r0, r3
 800619c:	f001 fbd9 	bl	8007952 <memcpy>

	display_request(object, SET_CURSOR_POSITION,row,column);
 80061a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80061a4:	79ba      	ldrb	r2, [r7, #6]
 80061a6:	2100      	movs	r1, #0
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff ff8f 	bl	80060cc <display_request>
	display_request(object, UPDATE_DISPLAY,0,0);
 80061ae:	2300      	movs	r3, #0
 80061b0:	2200      	movs	r2, #0
 80061b2:	2101      	movs	r1, #1
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff ff89 	bl	80060cc <display_request>
}
 80061ba:	bf00      	nop
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop

080061c4 <_setCursorPosition>:

void _setCursorPosition(display_t *object, uint8_t row, uint8_t column)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
 80061d0:	4613      	mov	r3, r2
 80061d2:	70bb      	strb	r3, [r7, #2]
	uint8_t position = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	73fb      	strb	r3, [r7, #15]

	//this sets up the upper nibble of  the display DD-RAM according to row
	switch(row)
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d816      	bhi.n	800620c <_setCursorPosition+0x48>
 80061de:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <_setCursorPosition+0x20>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	080061fb 	.word	0x080061fb
 80061ec:	08006201 	.word	0x08006201
 80061f0:	08006207 	.word	0x08006207
	{
		case 0:
			position = 0x00;
 80061f4:	2300      	movs	r3, #0
 80061f6:	73fb      	strb	r3, [r7, #15]
			break;
 80061f8:	e00b      	b.n	8006212 <_setCursorPosition+0x4e>
		case 1:
			position = 0x40;
 80061fa:	2340      	movs	r3, #64	@ 0x40
 80061fc:	73fb      	strb	r3, [r7, #15]
			break;
 80061fe:	e008      	b.n	8006212 <_setCursorPosition+0x4e>
		case 2:
			position = 0x10;
 8006200:	2310      	movs	r3, #16
 8006202:	73fb      	strb	r3, [r7, #15]
			break;
 8006204:	e005      	b.n	8006212 <_setCursorPosition+0x4e>
		case 3:
			position = 0x50;
 8006206:	2350      	movs	r3, #80	@ 0x50
 8006208:	73fb      	strb	r3, [r7, #15]
			break;
 800620a:	e002      	b.n	8006212 <_setCursorPosition+0x4e>
		//when row exceeds the limit of minimum one row or four rows
		default:
			position = 0x00;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
			break;
 8006210:	bf00      	nop
	}

	//this sets up the lower nibble of  the display DD-RAM according to column
	if(column <= 15 || column >= 0){
		position |= column;
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	78bb      	ldrb	r3, [r7, #2]
 8006216:	4313      	orrs	r3, r2
 8006218:	73fb      	strb	r3, [r7, #15]
	}else{
		//when column is greater than 16 or smaller then one, it is set to one
		position |= 0;
	}
	_writeCommandToDisplay(object, (position | DD_RAM_ADDR_SET));
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006220:	b2db      	uxtb	r3, r3
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f85a 	bl	80062de <_writeCommandToDisplay>
}
 800622a:	bf00      	nop
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop

08006234 <_requestHandled>:

void _requestHandled(display_t *object)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	object->workIndex++;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8006242:	3301      	adds	r3, #1
 8006244:	b2da      	uxtb	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
	object->workIndex &= 0x1F;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	b2da      	uxtb	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <_placeRequest>:

void _placeRequest(display_t *object, uint8_t mode, uint8_t var1, uint8_t var2)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	4608      	mov	r0, r1
 8006274:	4611      	mov	r1, r2
 8006276:	461a      	mov	r2, r3
 8006278:	4603      	mov	r3, r0
 800627a:	70fb      	strb	r3, [r7, #3]
 800627c:	460b      	mov	r3, r1
 800627e:	70bb      	strb	r3, [r7, #2]
 8006280:	4613      	mov	r3, r2
 8006282:	707b      	strb	r3, [r7, #1]
	uint8_t _wIndex;
	object->writeIndex++;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 30f7 	ldrb.w	r3, [r3, #247]	@ 0xf7
 800628a:	3301      	adds	r3, #1
 800628c:	b2da      	uxtb	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f883 20f7 	strb.w	r2, [r3, #247]	@ 0xf7
	object->writeIndex &= 0x1F;	//overflow reset
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 30f7 	ldrb.w	r3, [r3, #247]	@ 0xf7
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f883 20f7 	strb.w	r2, [r3, #247]	@ 0xf7

	_wIndex = object->writeIndex;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 30f7 	ldrb.w	r3, [r3, #247]	@ 0xf7
 80062ac:	73fb      	strb	r3, [r7, #15]

	object->requestPipeline[0][_wIndex] = mode;
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4413      	add	r3, r2
 80062b4:	78fa      	ldrb	r2, [r7, #3]
 80062b6:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
	object->requestPipeline[1][_wIndex] = var1;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	78ba      	ldrb	r2, [r7, #2]
 80062c2:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
	object->requestPipeline[2][_wIndex] = var2;
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4413      	add	r3, r2
 80062cc:	787a      	ldrb	r2, [r7, #1]
 80062ce:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
}
 80062d2:	bf00      	nop
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <_writeCommandToDisplay>:

void _writeCommandToDisplay(display_t *object, uint8_t cmd)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	460b      	mov	r3, r1
 80062e8:	70fb      	strb	r3, [r7, #3]
	//while(read_busy_pin() & PIN_BUSY);

	//clear register select pin
	//HAL_GPIO_WritePin(DISPLAY_REGISTER_SELECT_GPIO_Port, DISPLAY_REGISTER_SELECT_Pin, 0);
	object->regSelect(false);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2000      	movs	r0, #0
 80062f0:	4798      	blx	r3

	//set mode write to display
	//HAL_GPIO_WritePin(DISPLAY_READ_WRITE_GPIO_Port, DISPLAY_READ_WRITE_Pin, 0);
	object->readWrite(false);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2000      	movs	r0, #0
 80062f8:	4798      	blx	r3

	//set enable pin
	//HAL_GPIO_WritePin(DISPLAY_ENABLE_GPIO_Port, DISPLAY_ENABLE_Pin, 1);
	object->enable(true);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2001      	movs	r0, #1
 8006300:	4798      	blx	r3

	//for(i=0 ; i< 100/*42,43,44,45*/;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4798      	blx	r3

	//GPIOB->ODR &= 0xF403;
	//GPIOB->ODR |= (cmd & 0x07) | ((cmd & 0x08) << 10) | ((cmd & 0xF0) << 12);
	object->writePort(cmd);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	4610      	mov	r0, r2
 8006310:	4798      	blx	r3

	//for(i=0 ; i< 100/*42,43,44,45*/;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4798      	blx	r3

	//clear enable pin
	//HAL_GPIO_WritePin(DISPLAY_ENABLE_GPIO_Port, DISPLAY_ENABLE_Pin, 0);
	object->enable(false);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2000      	movs	r0, #0
 800631e:	4798      	blx	r3

	//for(i=0 ; i< 50/*42,43,44,45*/;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4798      	blx	r3

	//set resgister select pin
	//HAL_GPIO_WritePin(DISPLAY_REGISTER_SELECT_GPIO_Port, DISPLAY_REGISTER_SELECT_Pin, 1);
	object->regSelect(true);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2001      	movs	r0, #1
 800632c:	4798      	blx	r3

	//for(i=0 ; i< 50/*42,43,44,45*/;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4798      	blx	r3
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <_writeCharToDisplay>:

void _writeCharToDisplay(display_t *object, char data)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]

	//while(read_busy_pin() & PIN_BUSY);
	uint8_t i=0;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]

	//set enable pin
	//HAL_GPIO_WritePin(DISPLAY_ENABLE_GPIO_Port, DISPLAY_ENABLE_Pin, 1);
	object->enable(true);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	2001      	movs	r0, #1
 8006352:	4798      	blx	r3


	//for(i=0 ; i< 50;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4798      	blx	r3

	//set mode write to display
	//HAL_GPIO_WritePin(DISPLAY_READ_WRITE_GPIO_Port, DISPLAY_READ_WRITE_Pin, 0);
	object->readWrite(false);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2000      	movs	r0, #0
 8006360:	4798      	blx	r3

	//asm volatile ("nop");

	//for(i=0 ; i< 100;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4798      	blx	r3

	//GPIOB->ODR &= 0xF403;
	//GPIOB->ODR |= (data & 0x07) | ((data & 0x08) << 10) | ((data & 0xF0) << 12);
	object->writePort(data);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	78fa      	ldrb	r2, [r7, #3]
 800636e:	4610      	mov	r0, r2
 8006370:	4798      	blx	r3

	//for(i=0 ; i< 100;i++){}
	//HAL_Delay(_delay_ms);
	object->delay();
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4798      	blx	r3

	//clear enable pin
	//HAL_GPIO_WritePin(DISPLAY_ENABLE_GPIO_Port, DISPLAY_ENABLE_Pin, 0);
	object->enable(false);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	2000      	movs	r0, #0
 800637e:	4798      	blx	r3

	//for(i=0 ; i< 50;i++){}
	//HAL_Delay(1);
	object->delay();
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4798      	blx	r3
}
 8006386:	bf00      	nop
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <_writeToDisplay>:

void _writeToDisplay(display_t *object)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	switch(object->state){
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d86b      	bhi.n	800647a <_writeToDisplay+0xea>
 80063a2:	a201      	add	r2, pc, #4	@ (adr r2, 80063a8 <_writeToDisplay+0x18>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	080063b9 	.word	0x080063b9
 80063ac:	080063d3 	.word	0x080063d3
 80063b0:	08006417 	.word	0x08006417
 80063b4:	08006429 	.word	0x08006429
		case setCursorToTop:
			//cursor set to the first position in row 0 (first position of the first display array)
			_writeCommandToDisplay(object, 0x00|DD_RAM_ADDR_SET);
 80063b8:	2180      	movs	r1, #128	@ 0x80
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff ff8f 	bl	80062de <_writeCommandToDisplay>

			//switch mode
			object->state = firstLines;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

			//reset display_cursor_index
			object->cursorIndex = 0;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
			break;
 80063d0:	e058      	b.n	8006484 <_writeToDisplay+0xf4>

		case firstLines:
			//write first display array
			_writeCharToDisplay(object, object->outputArray[object->cursorIndex]);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4413      	add	r3, r2
 80063e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff ffa8 	bl	800633c <_writeCharToDisplay>
			if (object->cursorIndex == 32){
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d104      	bne.n	8006402 <_writeToDisplay+0x72>
				 //switch mode when cursor has reached the end of the first display array
				object->state = setCursorToMiddle;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
			}else{
				object->cursorIndex++;
			}
			break;
 8006400:	e040      	b.n	8006484 <_writeToDisplay+0xf4>
				object->cursorIndex++;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006408:	b2db      	uxtb	r3, r3
 800640a:	3301      	adds	r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
			break;
 8006414:	e036      	b.n	8006484 <_writeToDisplay+0xf4>

		case setCursorToMiddle:
			//cursor set to the first position in row 1 (first position of the second display array)
			_writeCommandToDisplay(object, 0x40|DD_RAM_ADDR_SET);
 8006416:	21c0      	movs	r1, #192	@ 0xc0
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff ff60 	bl	80062de <_writeCommandToDisplay>

			//switch mode
			object->state = secondLines;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2203      	movs	r2, #3
 8006422:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
			break;
 8006426:	e02d      	b.n	8006484 <_writeToDisplay+0xf4>

		case secondLines:
			//write second display array
			_writeCharToDisplay(object, object->outputArray[object->cursorIndex]);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800642e:	b2db      	uxtb	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4413      	add	r3, r2
 8006436:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff ff7d 	bl	800633c <_writeCharToDisplay>
			if (object->cursorIndex == 63){
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b3f      	cmp	r3, #63	@ 0x3f
 800644c:	d10b      	bne.n	8006466 <_writeToDisplay+0xd6>
				object->cursorIndex = 0;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

				 //switch mode when cursor has reached the end of the second display array
				object->state = setCursorToTop;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
				_requestHandled(object);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fee8 	bl	8006234 <_requestHandled>
			}else{
				object->cursorIndex++;
			}
			break;
 8006464:	e00e      	b.n	8006484 <_writeToDisplay+0xf4>
				object->cursorIndex++;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800646c:	b2db      	uxtb	r3, r3
 800646e:	3301      	adds	r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
			break;
 8006478:	e004      	b.n	8006484 <_writeToDisplay+0xf4>

		default:
			//switch mode
			object->state = setCursorToTop;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
			break;
 8006482:	bf00      	nop
	}
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <_updateDisplayArray>:

void _updateDisplayArray(display_t *object)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	uint8_t i  = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i<16; i++) {
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]
 800649c:	e00c      	b.n	80064b8 <_updateDisplayArray+0x2c>
		object->outputArray[i] = object->outputArrayMirror[i];
 800649e:	7bfa      	ldrb	r2, [r7, #15]
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	440a      	add	r2, r1
 80064a6:	7d11      	ldrb	r1, [r2, #20]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	4413      	add	r3, r2
 80064ac:	460a      	mov	r2, r1
 80064ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	for(i = 0; i<16; i++) {
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	3301      	adds	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	2b0f      	cmp	r3, #15
 80064bc:	d9ef      	bls.n	800649e <_updateDisplayArray+0x12>
	}
	for(i = 0; i<16; i++) {
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
 80064c2:	e00f      	b.n	80064e4 <_updateDisplayArray+0x58>
		object->outputArray[i+32] = object->outputArrayMirror[i+16];
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	f103 0210 	add.w	r2, r3, #16
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	3320      	adds	r3, #32
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	440a      	add	r2, r1
 80064d2:	7d11      	ldrb	r1, [r2, #20]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	4413      	add	r3, r2
 80064d8:	460a      	mov	r2, r1
 80064da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	for(i = 0; i<16; i++) {
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	3301      	adds	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b0f      	cmp	r3, #15
 80064e8:	d9ec      	bls.n	80064c4 <_updateDisplayArray+0x38>
	}
	for(i = 0; i<16; i++) {
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]
 80064ee:	e00f      	b.n	8006510 <_updateDisplayArray+0x84>
		object->outputArray[i+16] = object->outputArrayMirror[i+32];
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	f103 0220 	add.w	r2, r3, #32
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	3310      	adds	r3, #16
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	440a      	add	r2, r1
 80064fe:	7d11      	ldrb	r1, [r2, #20]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	4413      	add	r3, r2
 8006504:	460a      	mov	r2, r1
 8006506:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	for(i = 0; i<16; i++) {
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	3301      	adds	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b0f      	cmp	r3, #15
 8006514:	d9ec      	bls.n	80064f0 <_updateDisplayArray+0x64>
	}
	for(i = 0; i<16; i++) {
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
 800651a:	e00f      	b.n	800653c <_updateDisplayArray+0xb0>
		object->outputArray[i+48] = object->outputArrayMirror[i+48];
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	3330      	adds	r3, #48	@ 0x30
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	440a      	add	r2, r1
 800652a:	7d11      	ldrb	r1, [r2, #20]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	4413      	add	r3, r2
 8006530:	460a      	mov	r2, r1
 8006532:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	for(i = 0; i<16; i++) {
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	3301      	adds	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b0f      	cmp	r3, #15
 8006540:	d9ec      	bls.n	800651c <_updateDisplayArray+0x90>
	}
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <encoder_init>:
#include <stdint.h>

const uint32_t _c_debounce_tick_delay = 10;

void encoder_init()
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8006554:	213c      	movs	r1, #60	@ 0x3c
 8006556:	4802      	ldr	r0, [pc, #8]	@ (8006560 <encoder_init+0x10>)
 8006558:	f7fe f83e 	bl	80045d8 <HAL_TIM_Encoder_Start>
}
 800655c:	bf00      	nop
 800655e:	bd80      	pop	{r7, pc}
 8006560:	2000037c 	.word	0x2000037c

08006564 <hw_init>:
void _disp_readWrite(bool state);
void _disp_regSelect(bool state);


void hw_init()
{
 8006564:	b590      	push	{r4, r7, lr}
 8006566:	b091      	sub	sp, #68	@ 0x44
 8006568:	af02      	add	r7, sp, #8
	uint8_t rowIndex = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t rowIndex_old = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint32_t tickNow = HAL_GetTick();
 8006576:	f7fb fb8d 	bl	8001c94 <HAL_GetTick>
 800657a:	6338      	str	r0, [r7, #48]	@ 0x30
	uint32_t displayLastTick = tickNow;
 800657c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t encoderLastTick = tickNow;
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t LEDLastTick = tickNow;
 8006584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006586:	627b      	str	r3, [r7, #36]	@ 0x24

	//char clear[] = "                                                                ";

	uint8_t turnedRight_msg[] = "Turned Right!\n\r";
 8006588:	4b17      	ldr	r3, [pc, #92]	@ (80065e8 <hw_init+0x84>)
 800658a:	f107 0414 	add.w	r4, r7, #20
 800658e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t turnedLeft_msg[] = "Turned Left!\n\r";
 8006594:	4b15      	ldr	r3, [pc, #84]	@ (80065ec <hw_init+0x88>)
 8006596:	1d3c      	adds	r4, r7, #4
 8006598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800659a:	c407      	stmia	r4!, {r0, r1, r2}
 800659c:	8023      	strh	r3, [r4, #0]
 800659e:	3402      	adds	r4, #2
 80065a0:	0c1b      	lsrs	r3, r3, #16
 80065a2:	7023      	strb	r3, [r4, #0]

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80065a4:	2100      	movs	r1, #0
 80065a6:	4812      	ldr	r0, [pc, #72]	@ (80065f0 <hw_init+0x8c>)
 80065a8:	f7fd fec0 	bl	800432c <HAL_TIM_PWM_Start>

	// seccond level
	pcf8575_init(&ioexpander, 0x20, _i2cRead, _i2cWrite, 0x00, 0x00);
 80065ac:	2300      	movs	r3, #0
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	2300      	movs	r3, #0
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4b0f      	ldr	r3, [pc, #60]	@ (80065f4 <hw_init+0x90>)
 80065b6:	4a10      	ldr	r2, [pc, #64]	@ (80065f8 <hw_init+0x94>)
 80065b8:	2120      	movs	r1, #32
 80065ba:	4810      	ldr	r0, [pc, #64]	@ (80065fc <hw_init+0x98>)
 80065bc:	f000 fa32 	bl	8006a24 <pcf8575_init>

	encoder_init();
 80065c0:	f7ff ffc6 	bl	8006550 <encoder_init>

	buzzer_init();
 80065c4:	f7ff fcac 	bl	8005f20 <buzzer_init>

	tempSensor_inti();
 80065c8:	f000 fb14 	bl	8006bf4 <tempSensor_inti>


	// third level

	display_init(
 80065cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006600 <hw_init+0x9c>)
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006604 <hw_init+0xa0>)
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006608 <hw_init+0xa4>)
 80065d6:	4a0d      	ldr	r2, [pc, #52]	@ (800660c <hw_init+0xa8>)
 80065d8:	490d      	ldr	r1, [pc, #52]	@ (8006610 <hw_init+0xac>)
 80065da:	480e      	ldr	r0, [pc, #56]	@ (8006614 <hw_init+0xb0>)
 80065dc:	f7ff fca7 	bl	8005f2e <display_init>
			displayLastTick = tickNow;
			display_updateRoutine(&display);
		}
	}
	*/
}
 80065e0:	bf00      	nop
 80065e2:	373c      	adds	r7, #60	@ 0x3c
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd90      	pop	{r4, r7, pc}
 80065e8:	08009a38 	.word	0x08009a38
 80065ec:	08009a48 	.word	0x08009a48
 80065f0:	20000334 	.word	0x20000334
 80065f4:	08006655 	.word	0x08006655
 80065f8:	08006689 	.word	0x08006689
 80065fc:	200004d8 	.word	0x200004d8
 8006600:	08006751 	.word	0x08006751
 8006604:	080066bd 	.word	0x080066bd
 8006608:	0800672d 	.word	0x0800672d
 800660c:	08006709 	.word	0x08006709
 8006610:	080066e1 	.word	0x080066e1
 8006614:	200004e8 	.word	0x200004e8

08006618 <hw_getDisplayobjectByPtr>:


display_t* hw_getDisplayobjectByPtr()
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
	return &display;
 800661c:	4b02      	ldr	r3, [pc, #8]	@ (8006628 <hw_getDisplayobjectByPtr+0x10>)
}
 800661e:	4618      	mov	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	200004e8 	.word	0x200004e8

0800662c <hw_getTick>:

uint32_t hw_getTick()
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8006630:	f7fb fb30 	bl	8001c94 <HAL_GetTick>
 8006634:	4603      	mov	r3, r0
}
 8006636:	4618      	mov	r0, r3
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <hw_toggleLED>:

void hw_toggleLED()
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
	pcf8575_togglePin(&ioexpander, PCF8575_IOPORT_0, 7);
 8006640:	2207      	movs	r2, #7
 8006642:	2100      	movs	r1, #0
 8006644:	4802      	ldr	r0, [pc, #8]	@ (8006650 <hw_toggleLED+0x14>)
 8006646:	f000 fa6f 	bl	8006b28 <pcf8575_togglePin>
}
 800664a:	bf00      	nop
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	200004d8 	.word	0x200004d8

08006654 <_i2cWrite>:

// interface functions pcf8575

void _i2cWrite(uint8_t address, uint8_t* data,uint8_t len)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af02      	add	r7, sp, #8
 800665a:	4603      	mov	r3, r0
 800665c:	6039      	str	r1, [r7, #0]
 800665e:	71fb      	strb	r3, [r7, #7]
 8006660:	4613      	mov	r3, r2
 8006662:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, address, data, len, 10000);
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	b299      	uxth	r1, r3
 8006668:	79bb      	ldrb	r3, [r7, #6]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006670:	9200      	str	r2, [sp, #0]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	4803      	ldr	r0, [pc, #12]	@ (8006684 <_i2cWrite+0x30>)
 8006676:	f7fb ff05 	bl	8002484 <HAL_I2C_Master_Transmit>
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	2000023c 	.word	0x2000023c

08006688 <_i2cRead>:

void _i2cRead(uint8_t address, uint8_t* data, uint8_t len)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af02      	add	r7, sp, #8
 800668e:	4603      	mov	r3, r0
 8006690:	6039      	str	r1, [r7, #0]
 8006692:	71fb      	strb	r3, [r7, #7]
 8006694:	4613      	mov	r3, r2
 8006696:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Receive(&hi2c1, address, data, len, 10000);
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	b299      	uxth	r1, r3
 800669c:	79bb      	ldrb	r3, [r7, #6]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066a4:	9200      	str	r2, [sp, #0]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	4803      	ldr	r0, [pc, #12]	@ (80066b8 <_i2cRead+0x30>)
 80066aa:	f7fb ffe9 	bl	8002680 <HAL_I2C_Master_Receive>
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	2000023c 	.word	0x2000023c

080066bc <_disp_enable>:

// interface functions display

void _disp_enable(bool state)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	71fb      	strb	r3, [r7, #7]
	pcf8575_writePin(&ioexpander, PCF8575_IOPORT_0, 2, state);
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	2202      	movs	r2, #2
 80066ca:	2100      	movs	r1, #0
 80066cc:	4803      	ldr	r0, [pc, #12]	@ (80066dc <_disp_enable+0x20>)
 80066ce:	f000 f9e8 	bl	8006aa2 <pcf8575_writePin>
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	200004d8 	.word	0x200004d8

080066e0 <_disp_delay>:

void _disp_delay()
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
	uint32_t i = 500;
 80066e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80066ea:	607b      	str	r3, [r7, #4]
	for(;i>0;i--);
 80066ec:	e002      	b.n	80066f4 <_disp_delay+0x14>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f9      	bne.n	80066ee <_disp_delay+0xe>
	//HAL_Delay(1);
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <_disp_writePort>:

void _disp_writePort(uint8_t data)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	4603      	mov	r3, r0
 8006710:	71fb      	strb	r3, [r7, #7]
	pcf8575_writePort(&ioexpander, PCF8575_IOPORT_1, data);
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	461a      	mov	r2, r3
 8006716:	2101      	movs	r1, #1
 8006718:	4803      	ldr	r0, [pc, #12]	@ (8006728 <_disp_writePort+0x20>)
 800671a:	f000 f9a9 	bl	8006a70 <pcf8575_writePort>
}
 800671e:	bf00      	nop
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	200004d8 	.word	0x200004d8

0800672c <_disp_readWrite>:

void _disp_readWrite(bool state)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	71fb      	strb	r3, [r7, #7]
	pcf8575_writePin(&ioexpander, PCF8575_IOPORT_0, 1, state);
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	2201      	movs	r2, #1
 800673a:	2100      	movs	r1, #0
 800673c:	4803      	ldr	r0, [pc, #12]	@ (800674c <_disp_readWrite+0x20>)
 800673e:	f000 f9b0 	bl	8006aa2 <pcf8575_writePin>
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	200004d8 	.word	0x200004d8

08006750 <_disp_regSelect>:

void _disp_regSelect(bool state)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	71fb      	strb	r3, [r7, #7]
	pcf8575_writePin(&ioexpander, PCF8575_IOPORT_0, 0, state);
 800675a:	79fb      	ldrb	r3, [r7, #7]
 800675c:	2200      	movs	r2, #0
 800675e:	2100      	movs	r1, #0
 8006760:	4803      	ldr	r0, [pc, #12]	@ (8006770 <_disp_regSelect+0x20>)
 8006762:	f000 f99e 	bl	8006aa2 <pcf8575_writePin>
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	200004d8 	.word	0x200004d8

08006774 <max31865_init>:
                   uint16_t     rref_ohm,
                   uint16_t     lowerFaulThreshold,
                   uint16_t     higherFaultThreshold,
                   bool         wire_3,
                   bool         filter_50Hz)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
    uint8_t buff[4];
    uint8_t temp = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	75fb      	strb	r3, [r7, #23]
    uint16_t temp_1 = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	83fb      	strh	r3, [r7, #30]

    // object setup
    device->chipselect = chipselect_cb;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	601a      	str	r2, [r3, #0]
    device->spi_trx = spi_trx_cb;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	605a      	str	r2, [r3, #4]
    device->charged_time_delay = charged_time_delay_cb;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	609a      	str	r2, [r3, #8]
    device->conversion_timer_deay = conversion_timer_deay_cb;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067a0:	60da      	str	r2, [r3, #12]
    device->highFaultThreshold_cb =  highFaultThreshold_callback;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a6:	611a      	str	r2, [r3, #16]
    device->lowFaultThreshold_cb = lowFaultThreshold_callback;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ac:	615a      	str	r2, [r3, #20]
    device->rtd = rtd_ohm;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80067b2:	831a      	strh	r2, [r3, #24]
    device->rref = rref_ohm;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80067b8:	835a      	strh	r2, [r3, #26]
    device->lowFaultThreshold = lowerFaulThreshold << 1;
 80067ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	839a      	strh	r2, [r3, #28]
    device->highFaultThreshold = higherFaultThreshold << 1;
 80067c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	83da      	strh	r2, [r3, #30]
    // settup configurations + set a fault status
    device->configReg = (uint8_t)((wire_3 << 4) | (filter_50Hz));
 80067d0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	b25a      	sxtb	r2, r3
 80067d8:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 80067dc:	4313      	orrs	r3, r2
 80067de:	b25b      	sxtb	r3, r3
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f883 2020 	strb.w	r2, [r3, #32]

    // low and high fault threshold setup
    temp_1 = device->highFaultThreshold;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8bdb      	ldrh	r3, [r3, #30]
 80067ec:	83fb      	strh	r3, [r7, #30]
    buff[0] = (uint8_t)(temp_1 >> 8);
 80067ee:	8bfb      	ldrh	r3, [r7, #30]
 80067f0:	0a1b      	lsrs	r3, r3, #8
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	763b      	strb	r3, [r7, #24]
    buff[1] = (uint8_t)(temp_1);
 80067f8:	8bfb      	ldrh	r3, [r7, #30]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	767b      	strb	r3, [r7, #25]
    temp_1 = device->lowFaultThreshold;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8b9b      	ldrh	r3, [r3, #28]
 8006802:	83fb      	strh	r3, [r7, #30]
    buff[2] = (uint8_t)(temp_1 >> 8);
 8006804:	8bfb      	ldrh	r3, [r7, #30]
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	b29b      	uxth	r3, r3
 800680a:	b2db      	uxtb	r3, r3
 800680c:	76bb      	strb	r3, [r7, #26]
    buff[3] = (uint8_t)(temp_1);
 800680e:	8bfb      	ldrh	r3, [r7, #30]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	76fb      	strb	r3, [r7, #27]

    temp = device->configReg;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800681a:	75fb      	strb	r3, [r7, #23]
    _write_n_reg(device, REG_WRITE_CONFIGURATION, &temp, 1);
 800681c:	f107 0217 	add.w	r2, r7, #23
 8006820:	2301      	movs	r3, #1
 8006822:	2180      	movs	r1, #128	@ 0x80
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f880 	bl	800692a <_write_n_reg>
    _write_n_reg(device, REG_WRITE_HIGH_FAULT_TH_MSB, buff, 4);
 800682a:	f107 0218 	add.w	r2, r7, #24
 800682e:	2304      	movs	r3, #4
 8006830:	2183      	movs	r1, #131	@ 0x83
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f879 	bl	800692a <_write_n_reg>
}
 8006838:	bf00      	nop
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <max31865_readADC>:

uint16_t max31865_readADC(const max31865_t* device)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
    uint8_t buff[2] = {0,0};
 8006848:	2300      	movs	r3, #0
 800684a:	81bb      	strh	r3, [r7, #12]
    uint8_t temp = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	72fb      	strb	r3, [r7, #11]
    // turn on vbias
    temp = device->configReg | D7;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006856:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800685a:	b2db      	uxtb	r3, r3
 800685c:	72fb      	strb	r3, [r7, #11]
    _write_n_reg(device, REG_WRITE_CONFIGURATION, &temp, 1);
 800685e:	f107 020b 	add.w	r2, r7, #11
 8006862:	2301      	movs	r3, #1
 8006864:	2180      	movs	r1, #128	@ 0x80
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f85f 	bl	800692a <_write_n_reg>

    device->charged_time_delay();
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	4798      	blx	r3

    // initiate 1-shot conversion + vbias
    temp = device->configReg | 0xA0;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006878:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 800687c:	b2db      	uxtb	r3, r3
 800687e:	72fb      	strb	r3, [r7, #11]
    _write_n_reg(device, REG_WRITE_CONFIGURATION, &temp, 1);
 8006880:	f107 020b 	add.w	r2, r7, #11
 8006884:	2301      	movs	r3, #1
 8006886:	2180      	movs	r1, #128	@ 0x80
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f84e 	bl	800692a <_write_n_reg>

    device->conversion_timer_deay();
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	4798      	blx	r3

    _read_n_reg(device, REG_READ_RTD_MSB, &buff, 2);
 8006894:	f107 020c 	add.w	r2, r7, #12
 8006898:	2302      	movs	r3, #2
 800689a:	2101      	movs	r1, #1
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f874 	bl	800698a <_read_n_reg>

    // turn off vbias
    _write_n_reg(device, REG_WRITE_CONFIGURATION, &(device->configReg), 1);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f103 0220 	add.w	r2, r3, #32
 80068a8:	2301      	movs	r3, #1
 80068aa:	2180      	movs	r1, #128	@ 0x80
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f83c 	bl	800692a <_write_n_reg>

    if(buff[1] & 0x01)  {
 80068b2:	7b7b      	ldrb	r3, [r7, #13]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <max31865_readADC+0x82>
        _handle_threshold_fault(device);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f895 	bl	80069ec <_handle_threshold_fault>
    }

    return (uint16_t)buff[0] << 7 | (uint16_t)buff[1] >> 1;
 80068c2:	7b3b      	ldrb	r3, [r7, #12]
 80068c4:	01db      	lsls	r3, r3, #7
 80068c6:	b21a      	sxth	r2, r3
 80068c8:	7b7b      	ldrb	r3, [r7, #13]
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	b21b      	sxth	r3, r3
 80068d0:	4313      	orrs	r3, r2
 80068d2:	b21b      	sxth	r3, r3
 80068d4:	b29b      	uxth	r3, r3
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <max31865_readFault>:
    // no fault
    return 0;
}

uint8_t max31865_readFault(const max31865_t* device)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
    uint8_t buff;
    _read_n_reg(device, REG_READ_FAULT_STATUS, &buff, 1);
 80068e6:	f107 020f 	add.w	r2, r7, #15
 80068ea:	2301      	movs	r3, #1
 80068ec:	2107      	movs	r1, #7
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f84b 	bl	800698a <_read_n_reg>
    return buff;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <max31865_clearFault>:

void max31865_clearFault(const max31865_t* device)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
    uint8_t temp = (device->configReg | D1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	b2db      	uxtb	r3, r3
 8006912:	73fb      	strb	r3, [r7, #15]
    _write_n_reg(device,REG_WRITE_CONFIGURATION, &temp, 1);
 8006914:	f107 020f 	add.w	r2, r7, #15
 8006918:	2301      	movs	r3, #1
 800691a:	2180      	movs	r1, #128	@ 0x80
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f804 	bl	800692a <_write_n_reg>
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <_write_n_reg>:

static void _write_n_reg(const max31865_t*  device,
                         uint8_t            start_reg_address,
                         const uint8_t*     data,
                         uint8_t            len)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	461a      	mov	r2, r3
 8006936:	460b      	mov	r3, r1
 8006938:	72fb      	strb	r3, [r7, #11]
 800693a:	4613      	mov	r3, r2
 800693c:	72bb      	strb	r3, [r7, #10]
    uint8_t index = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	75fb      	strb	r3, [r7, #23]

    if(len == 0) return;
 8006942:	7abb      	ldrb	r3, [r7, #10]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01c      	beq.n	8006982 <_write_n_reg+0x58>

    device->chipselect(true);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2001      	movs	r0, #1
 800694e:	4798      	blx	r3

    device->spi_trx(start_reg_address);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	7afa      	ldrb	r2, [r7, #11]
 8006956:	4610      	mov	r0, r2
 8006958:	4798      	blx	r3

    do{
        device->spi_trx(data[index++]);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	1c59      	adds	r1, r3, #1
 8006962:	75f9      	strb	r1, [r7, #23]
 8006964:	4619      	mov	r1, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	440b      	add	r3, r1
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	4790      	blx	r2
    } while(index < len);
 8006970:	7dfa      	ldrb	r2, [r7, #23]
 8006972:	7abb      	ldrb	r3, [r7, #10]
 8006974:	429a      	cmp	r2, r3
 8006976:	d3f0      	bcc.n	800695a <_write_n_reg+0x30>

    device->chipselect(false);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2000      	movs	r0, #0
 800697e:	4798      	blx	r3
 8006980:	e000      	b.n	8006984 <_write_n_reg+0x5a>
    if(len == 0) return;
 8006982:	bf00      	nop
}
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <_read_n_reg>:

static void _read_n_reg(const max31865_t*   device,
                        uint8_t             start_reg_address,
                        uint8_t*            data,
                        uint8_t             len)
{
 800698a:	b590      	push	{r4, r7, lr}
 800698c:	b087      	sub	sp, #28
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	461a      	mov	r2, r3
 8006996:	460b      	mov	r3, r1
 8006998:	72fb      	strb	r3, [r7, #11]
 800699a:	4613      	mov	r3, r2
 800699c:	72bb      	strb	r3, [r7, #10]
    uint8_t index = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	75fb      	strb	r3, [r7, #23]

    if(len == 0) return;
 80069a2:	7abb      	ldrb	r3, [r7, #10]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01d      	beq.n	80069e4 <_read_n_reg+0x5a>

    device->chipselect(true);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2001      	movs	r0, #1
 80069ae:	4798      	blx	r3
    device->spi_trx(start_reg_address);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	7afa      	ldrb	r2, [r7, #11]
 80069b6:	4610      	mov	r0, r2
 80069b8:	4798      	blx	r3

    do {
        data[index++] = device->spi_trx(0xFF);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	1c59      	adds	r1, r3, #1
 80069c2:	75f9      	strb	r1, [r7, #23]
 80069c4:	4619      	mov	r1, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	185c      	adds	r4, r3, r1
 80069ca:	20ff      	movs	r0, #255	@ 0xff
 80069cc:	4790      	blx	r2
 80069ce:	4603      	mov	r3, r0
 80069d0:	7023      	strb	r3, [r4, #0]
    } while(index < len);
 80069d2:	7dfa      	ldrb	r2, [r7, #23]
 80069d4:	7abb      	ldrb	r3, [r7, #10]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d3ef      	bcc.n	80069ba <_read_n_reg+0x30>

    device->chipselect(false);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2000      	movs	r0, #0
 80069e0:	4798      	blx	r3
 80069e2:	e000      	b.n	80069e6 <_read_n_reg+0x5c>
    if(len == 0) return;
 80069e4:	bf00      	nop
}
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd90      	pop	{r4, r7, pc}

080069ec <_handle_threshold_fault>:

void _handle_threshold_fault(const max31865_t* device)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
    switch(max31865_readFault(device))
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ff72 	bl	80068de <max31865_readFault>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b40      	cmp	r3, #64	@ 0x40
 80069fe:	d005      	beq.n	8006a0c <_handle_threshold_fault+0x20>
 8006a00:	2b80      	cmp	r3, #128	@ 0x80
 8006a02:	d107      	bne.n	8006a14 <_handle_threshold_fault+0x28>
    {
    case max31865_err_RTD_HIGH_THRESHOLD:
        device->highFaultThreshold_cb();
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	4798      	blx	r3
        break;
 8006a0a:	e004      	b.n	8006a16 <_handle_threshold_fault+0x2a>
    case max31865_err_RTD_LOW_THRESHOLD:
        device->lowFaultThreshold_cb();
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	4798      	blx	r3
        break;
 8006a12:	e000      	b.n	8006a16 <_handle_threshold_fault+0x2a>
    default:
        break;
 8006a14:	bf00      	nop
    }
    max31865_clearFault(device);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff ff71 	bl	80068fe <max31865_clearFault>
}
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <pcf8575_init>:
		uint8_t i2cAddress,
		i2c_read_t i2cRead,
		i2c_write_t i2cWrite,
		uint8_t port0,
		uint8_t port1)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	460b      	mov	r3, r1
 8006a32:	72fb      	strb	r3, [r7, #11]
	// init objects
	object->address = (pcf8575_I2CaddrBase | (i2cAddress & pcf8575_I2CaddrMask)) << 1;
 8006a34:	2207      	movs	r2, #7
 8006a36:	7afb      	ldrb	r3, [r7, #11]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	701a      	strb	r2, [r3, #0]
	object->_i2cRead = i2cRead;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	605a      	str	r2, [r3, #4]
	object->_i2cWrite = i2cWrite;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	609a      	str	r2, [r3, #8]
	object->_port0Buf = port0;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	7e3a      	ldrb	r2, [r7, #24]
 8006a5a:	731a      	strb	r2, [r3, #12]
	object->_port1Buf = port1;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	7f3a      	ldrb	r2, [r7, #28]
 8006a60:	735a      	strb	r2, [r3, #13]

	// init hardware
	_updatePorts(object);
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f8b0 	bl	8006bc8 <_updatePorts>
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <pcf8575_writePort>:

void pcf8575_writePort(
		pcf8575_t *object,
		pcf8575_IOport_t port,
		uint8_t data)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	70bb      	strb	r3, [r7, #2]
	if(port == PCF8575_IOPORT_0) {
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <pcf8575_writePort+0x1e>
		object->_port0Buf = data;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	78ba      	ldrb	r2, [r7, #2]
 8006a8a:	731a      	strb	r2, [r3, #12]
 8006a8c:	e002      	b.n	8006a94 <pcf8575_writePort+0x24>

	} else {
		object->_port1Buf = data;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	78ba      	ldrb	r2, [r7, #2]
 8006a92:	735a      	strb	r2, [r3, #13]
	}
	_updatePorts(object);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f897 	bl	8006bc8 <_updatePorts>
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <pcf8575_writePin>:
void pcf8575_writePin(
		pcf8575_t *object,
		pcf8575_IOport_t port,
		uint8_t pin,
		bool state)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	4608      	mov	r0, r1
 8006aac:	4611      	mov	r1, r2
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	70fb      	strb	r3, [r7, #3]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70bb      	strb	r3, [r7, #2]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	707b      	strb	r3, [r7, #1]
	uint8_t *pBuf = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]
	// only pin numbers 0 to 7 allowed
	pin &= 0x07;
 8006ac0:	78bb      	ldrb	r3, [r7, #2]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	70bb      	strb	r3, [r7, #2]

	if(port == PCF8575_IOPORT_0){
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d103      	bne.n	8006ad6 <pcf8575_writePin+0x34>
		pBuf = &(object->_port0Buf);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e002      	b.n	8006adc <pcf8575_writePin+0x3a>
	} else {
		pBuf = &(object->_port1Buf);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	330d      	adds	r3, #13
 8006ada:	60fb      	str	r3, [r7, #12]
	}

	*pBuf &= ~(1 << pin);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b25a      	sxtb	r2, r3
 8006ae2:	78bb      	ldrb	r3, [r7, #2]
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aea:	b25b      	sxtb	r3, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	b25b      	sxtb	r3, r3
 8006af0:	4013      	ands	r3, r2
 8006af2:	b25b      	sxtb	r3, r3
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	701a      	strb	r2, [r3, #0]

	if(state){
 8006afa:	787b      	ldrb	r3, [r7, #1]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <pcf8575_writePin+0x78>
		*pBuf |= state << pin;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	b25a      	sxtb	r2, r3
 8006b06:	7879      	ldrb	r1, [r7, #1]
 8006b08:	78bb      	ldrb	r3, [r7, #2]
 8006b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0e:	b25b      	sxtb	r3, r3
 8006b10:	4313      	orrs	r3, r2
 8006b12:	b25b      	sxtb	r3, r3
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	701a      	strb	r2, [r3, #0]
	}

	_updatePorts(object);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f854 	bl	8006bc8 <_updatePorts>
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <pcf8575_togglePin>:

void pcf8575_togglePin(
		pcf8575_t *object,
		pcf8575_IOport_t port,
		uint8_t pin)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
 8006b34:	4613      	mov	r3, r2
 8006b36:	70bb      	strb	r3, [r7, #2]
	uint8_t *pBuf = NULL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]
	// only pin numbers 0 to 7 allowed
	pin &= 0x07;
 8006b3c:	78bb      	ldrb	r3, [r7, #2]
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	70bb      	strb	r3, [r7, #2]

	if(port == PCF8575_IOPORT_0){
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d103      	bne.n	8006b52 <pcf8575_togglePin+0x2a>
		pBuf = &(object->_port0Buf);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	330c      	adds	r3, #12
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	e002      	b.n	8006b58 <pcf8575_togglePin+0x30>
	} else {
		pBuf = &(object->_port1Buf);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	330d      	adds	r3, #13
 8006b56:	60fb      	str	r3, [r7, #12]
	}

	*pBuf ^= (1 << pin);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	b25a      	sxtb	r2, r3
 8006b5e:	78bb      	ldrb	r3, [r7, #2]
 8006b60:	2101      	movs	r1, #1
 8006b62:	fa01 f303 	lsl.w	r3, r1, r3
 8006b66:	b25b      	sxtb	r3, r3
 8006b68:	4053      	eors	r3, r2
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	701a      	strb	r2, [r3, #0]
	_updatePorts(object);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f828 	bl	8006bc8 <_updatePorts>
}
 8006b78:	bf00      	nop
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <_read>:

void _read(pcf8575_t *object, uint8_t *data, uint8_t len)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	71fb      	strb	r3, [r7, #7]
	object->_i2cRead(object->address, data, len);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	7810      	ldrb	r0, [r2, #0]
 8006b96:	79fa      	ldrb	r2, [r7, #7]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	4798      	blx	r3
}
 8006b9c:	bf00      	nop
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <_write>:

void _write(pcf8575_t *object, uint8_t *data, uint8_t len)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	71fb      	strb	r3, [r7, #7]
	object->_i2cWrite(object->address, data, len);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	7810      	ldrb	r0, [r2, #0]
 8006bba:	79fa      	ldrb	r2, [r7, #7]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4798      	blx	r3
}
 8006bc0:	bf00      	nop
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <_updatePorts>:

void _updatePorts(pcf8575_t *object)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {object->_port0Buf, object->_port1Buf};
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	7b1b      	ldrb	r3, [r3, #12]
 8006bd4:	733b      	strb	r3, [r7, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	7b5b      	ldrb	r3, [r3, #13]
 8006bda:	737b      	strb	r3, [r7, #13]
	_write(object, data, 2);
 8006bdc:	f107 030c 	add.w	r3, r7, #12
 8006be0:	2202      	movs	r2, #2
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff ffdd 	bl	8006ba4 <_write>
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <tempSensor_inti>:
void _highTempFault();
void _lowTempFault();


void tempSensor_inti()
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08a      	sub	sp, #40	@ 0x28
 8006bf8:	af0a      	add	r7, sp, #40	@ 0x28
	_chipSelect(false);
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	f000 f836 	bl	8006c6c <_chipSelect>

	max31865_init(
 8006c00:	2301      	movs	r3, #1
 8006c02:	9308      	str	r3, [sp, #32]
 8006c04:	2301      	movs	r3, #1
 8006c06:	9307      	str	r3, [sp, #28]
 8006c08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c0c:	9306      	str	r3, [sp, #24]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9305      	str	r3, [sp, #20]
 8006c12:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8006c16:	9304      	str	r3, [sp, #16]
 8006c18:	2364      	movs	r3, #100	@ 0x64
 8006c1a:	9303      	str	r3, [sp, #12]
 8006c1c:	4b07      	ldr	r3, [pc, #28]	@ (8006c3c <tempSensor_inti+0x48>)
 8006c1e:	9302      	str	r3, [sp, #8]
 8006c20:	4b07      	ldr	r3, [pc, #28]	@ (8006c40 <tempSensor_inti+0x4c>)
 8006c22:	9301      	str	r3, [sp, #4]
 8006c24:	4b07      	ldr	r3, [pc, #28]	@ (8006c44 <tempSensor_inti+0x50>)
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	4b07      	ldr	r3, [pc, #28]	@ (8006c48 <tempSensor_inti+0x54>)
 8006c2a:	4a08      	ldr	r2, [pc, #32]	@ (8006c4c <tempSensor_inti+0x58>)
 8006c2c:	4908      	ldr	r1, [pc, #32]	@ (8006c50 <tempSensor_inti+0x5c>)
 8006c2e:	4809      	ldr	r0, [pc, #36]	@ (8006c54 <tempSensor_inti+0x60>)
 8006c30:	f7ff fda0 	bl	8006774 <max31865_init>
			430,
			0x0000,
			0xFFFF,
			true,
			true);
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	08006d23 	.word	0x08006d23
 8006c40:	08006d15 	.word	0x08006d15
 8006c44:	08006cef 	.word	0x08006cef
 8006c48:	08006cc9 	.word	0x08006cc9
 8006c4c:	08006c99 	.word	0x08006c99
 8006c50:	08006c6d 	.word	0x08006c6d
 8006c54:	200005e4 	.word	0x200005e4

08006c58 <tempSensor_ReadADC>:
{
	return max31865_readCelsius(&max31865_obj);
}

uint16_t tempSensor_ReadADC()
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
	return max31865_readADC(&max31865_obj);
 8006c5c:	4802      	ldr	r0, [pc, #8]	@ (8006c68 <tempSensor_ReadADC+0x10>)
 8006c5e:	f7ff fdef 	bl	8006840 <max31865_readADC>
 8006c62:	4603      	mov	r3, r0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	200005e4 	.word	0x200005e4

08006c6c <_chipSelect>:

void _chipSelect(bool select)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(
			SPI3_CS_MAX31865_GPIO_Port,
			SPI3_CS_MAX31865_Pin,
			!select);
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	f083 0301 	eor.w	r3, r3, #1
 8006c7c:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006c84:	4803      	ldr	r0, [pc, #12]	@ (8006c94 <_chipSelect+0x28>)
 8006c86:	f7fb fa9f 	bl	80021c8 <HAL_GPIO_WritePin>
}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40020000 	.word	0x40020000

08006c98 <_spiTRX>:

uint8_t _spiTRX(uint8_t data)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	71fb      	strb	r3, [r7, #7]
	uint8_t buff = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi3, &data, &buff, 1, 0);
 8006ca6:	f107 020f 	add.w	r2, r7, #15
 8006caa:	1df9      	adds	r1, r7, #7
 8006cac:	2300      	movs	r3, #0
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	4804      	ldr	r0, [pc, #16]	@ (8006cc4 <_spiTRX+0x2c>)
 8006cb4:	f7fc ffbd 	bl	8003c32 <HAL_SPI_TransmitReceive>
	return buff;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000290 	.word	0x20000290

08006cc8 <_delayChargeTime>:

void _delayChargeTime()
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
	uint32_t tNow = hw_getTick();
 8006cce:	f7ff fcad 	bl	800662c <hw_getTick>
 8006cd2:	6078      	str	r0, [r7, #4]
	while(hw_getTick() != (tNow + 10));
 8006cd4:	bf00      	nop
 8006cd6:	f7ff fca9 	bl	800662c <hw_getTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	330a      	adds	r3, #10
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d1f8      	bne.n	8006cd6 <_delayChargeTime+0xe>
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <_delayConversionTime>:

void _delayConversionTime()
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	af00      	add	r7, sp, #0
	uint32_t tNow = hw_getTick();
 8006cf4:	f7ff fc9a 	bl	800662c <hw_getTick>
 8006cf8:	6078      	str	r0, [r7, #4]
	while(hw_getTick() != (tNow + 10));
 8006cfa:	bf00      	nop
 8006cfc:	f7ff fc96 	bl	800662c <hw_getTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	330a      	adds	r3, #10
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d1f8      	bne.n	8006cfc <_delayConversionTime+0xe>
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <_highTempFault>:

void _highTempFault()
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0

}
 8006d18:	bf00      	nop
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <_lowTempFault>:

void _lowTempFault()
{
 8006d22:	b480      	push	{r7}
 8006d24:	af00      	add	r7, sp, #0

}
 8006d26:	bf00      	nop
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <__cvt>:
 8006d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	ec57 6b10 	vmov	r6, r7, d0
 8006d38:	2f00      	cmp	r7, #0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	463b      	mov	r3, r7
 8006d40:	bfbb      	ittet	lt
 8006d42:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d46:	461f      	movlt	r7, r3
 8006d48:	2300      	movge	r3, #0
 8006d4a:	232d      	movlt	r3, #45	@ 0x2d
 8006d4c:	700b      	strb	r3, [r1, #0]
 8006d4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d50:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006d54:	4691      	mov	r9, r2
 8006d56:	f023 0820 	bic.w	r8, r3, #32
 8006d5a:	bfbc      	itt	lt
 8006d5c:	4632      	movlt	r2, r6
 8006d5e:	4616      	movlt	r6, r2
 8006d60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d64:	d005      	beq.n	8006d72 <__cvt+0x42>
 8006d66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006d6a:	d100      	bne.n	8006d6e <__cvt+0x3e>
 8006d6c:	3401      	adds	r4, #1
 8006d6e:	2102      	movs	r1, #2
 8006d70:	e000      	b.n	8006d74 <__cvt+0x44>
 8006d72:	2103      	movs	r1, #3
 8006d74:	ab03      	add	r3, sp, #12
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	ab02      	add	r3, sp, #8
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	ec47 6b10 	vmov	d0, r6, r7
 8006d80:	4653      	mov	r3, sl
 8006d82:	4622      	mov	r2, r4
 8006d84:	f000 fe7c 	bl	8007a80 <_dtoa_r>
 8006d88:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	d119      	bne.n	8006dc4 <__cvt+0x94>
 8006d90:	f019 0f01 	tst.w	r9, #1
 8006d94:	d00e      	beq.n	8006db4 <__cvt+0x84>
 8006d96:	eb00 0904 	add.w	r9, r0, r4
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4630      	mov	r0, r6
 8006da0:	4639      	mov	r1, r7
 8006da2:	f7f9 fe99 	bl	8000ad8 <__aeabi_dcmpeq>
 8006da6:	b108      	cbz	r0, 8006dac <__cvt+0x7c>
 8006da8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dac:	2230      	movs	r2, #48	@ 0x30
 8006dae:	9b03      	ldr	r3, [sp, #12]
 8006db0:	454b      	cmp	r3, r9
 8006db2:	d31e      	bcc.n	8006df2 <__cvt+0xc2>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006db8:	1b5b      	subs	r3, r3, r5
 8006dba:	4628      	mov	r0, r5
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	b004      	add	sp, #16
 8006dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006dc8:	eb00 0904 	add.w	r9, r0, r4
 8006dcc:	d1e5      	bne.n	8006d9a <__cvt+0x6a>
 8006dce:	7803      	ldrb	r3, [r0, #0]
 8006dd0:	2b30      	cmp	r3, #48	@ 0x30
 8006dd2:	d10a      	bne.n	8006dea <__cvt+0xba>
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4630      	mov	r0, r6
 8006dda:	4639      	mov	r1, r7
 8006ddc:	f7f9 fe7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006de0:	b918      	cbnz	r0, 8006dea <__cvt+0xba>
 8006de2:	f1c4 0401 	rsb	r4, r4, #1
 8006de6:	f8ca 4000 	str.w	r4, [sl]
 8006dea:	f8da 3000 	ldr.w	r3, [sl]
 8006dee:	4499      	add	r9, r3
 8006df0:	e7d3      	b.n	8006d9a <__cvt+0x6a>
 8006df2:	1c59      	adds	r1, r3, #1
 8006df4:	9103      	str	r1, [sp, #12]
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	e7d9      	b.n	8006dae <__cvt+0x7e>

08006dfa <__exponent>:
 8006dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	bfba      	itte	lt
 8006e00:	4249      	neglt	r1, r1
 8006e02:	232d      	movlt	r3, #45	@ 0x2d
 8006e04:	232b      	movge	r3, #43	@ 0x2b
 8006e06:	2909      	cmp	r1, #9
 8006e08:	7002      	strb	r2, [r0, #0]
 8006e0a:	7043      	strb	r3, [r0, #1]
 8006e0c:	dd29      	ble.n	8006e62 <__exponent+0x68>
 8006e0e:	f10d 0307 	add.w	r3, sp, #7
 8006e12:	461d      	mov	r5, r3
 8006e14:	270a      	movs	r7, #10
 8006e16:	461a      	mov	r2, r3
 8006e18:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e1c:	fb07 1416 	mls	r4, r7, r6, r1
 8006e20:	3430      	adds	r4, #48	@ 0x30
 8006e22:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e26:	460c      	mov	r4, r1
 8006e28:	2c63      	cmp	r4, #99	@ 0x63
 8006e2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e2e:	4631      	mov	r1, r6
 8006e30:	dcf1      	bgt.n	8006e16 <__exponent+0x1c>
 8006e32:	3130      	adds	r1, #48	@ 0x30
 8006e34:	1e94      	subs	r4, r2, #2
 8006e36:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e3a:	1c41      	adds	r1, r0, #1
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	42ab      	cmp	r3, r5
 8006e40:	d30a      	bcc.n	8006e58 <__exponent+0x5e>
 8006e42:	f10d 0309 	add.w	r3, sp, #9
 8006e46:	1a9b      	subs	r3, r3, r2
 8006e48:	42ac      	cmp	r4, r5
 8006e4a:	bf88      	it	hi
 8006e4c:	2300      	movhi	r3, #0
 8006e4e:	3302      	adds	r3, #2
 8006e50:	4403      	add	r3, r0
 8006e52:	1a18      	subs	r0, r3, r0
 8006e54:	b003      	add	sp, #12
 8006e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e58:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006e5c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006e60:	e7ed      	b.n	8006e3e <__exponent+0x44>
 8006e62:	2330      	movs	r3, #48	@ 0x30
 8006e64:	3130      	adds	r1, #48	@ 0x30
 8006e66:	7083      	strb	r3, [r0, #2]
 8006e68:	70c1      	strb	r1, [r0, #3]
 8006e6a:	1d03      	adds	r3, r0, #4
 8006e6c:	e7f1      	b.n	8006e52 <__exponent+0x58>
	...

08006e70 <_printf_float>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	b08d      	sub	sp, #52	@ 0x34
 8006e76:	460c      	mov	r4, r1
 8006e78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006e7c:	4616      	mov	r6, r2
 8006e7e:	461f      	mov	r7, r3
 8006e80:	4605      	mov	r5, r0
 8006e82:	f000 fcef 	bl	8007864 <_localeconv_r>
 8006e86:	6803      	ldr	r3, [r0, #0]
 8006e88:	9304      	str	r3, [sp, #16]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7f9 f9f8 	bl	8000280 <strlen>
 8006e90:	2300      	movs	r3, #0
 8006e92:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e94:	f8d8 3000 	ldr.w	r3, [r8]
 8006e98:	9005      	str	r0, [sp, #20]
 8006e9a:	3307      	adds	r3, #7
 8006e9c:	f023 0307 	bic.w	r3, r3, #7
 8006ea0:	f103 0208 	add.w	r2, r3, #8
 8006ea4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ea8:	f8d4 b000 	ldr.w	fp, [r4]
 8006eac:	f8c8 2000 	str.w	r2, [r8]
 8006eb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006eb8:	9307      	str	r3, [sp, #28]
 8006eba:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ebe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ec6:	4b9c      	ldr	r3, [pc, #624]	@ (8007138 <_printf_float+0x2c8>)
 8006ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ecc:	f7f9 fe36 	bl	8000b3c <__aeabi_dcmpun>
 8006ed0:	bb70      	cbnz	r0, 8006f30 <_printf_float+0xc0>
 8006ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ed6:	4b98      	ldr	r3, [pc, #608]	@ (8007138 <_printf_float+0x2c8>)
 8006ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8006edc:	f7f9 fe10 	bl	8000b00 <__aeabi_dcmple>
 8006ee0:	bb30      	cbnz	r0, 8006f30 <_printf_float+0xc0>
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	4649      	mov	r1, r9
 8006eea:	f7f9 fdff 	bl	8000aec <__aeabi_dcmplt>
 8006eee:	b110      	cbz	r0, 8006ef6 <_printf_float+0x86>
 8006ef0:	232d      	movs	r3, #45	@ 0x2d
 8006ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ef6:	4a91      	ldr	r2, [pc, #580]	@ (800713c <_printf_float+0x2cc>)
 8006ef8:	4b91      	ldr	r3, [pc, #580]	@ (8007140 <_printf_float+0x2d0>)
 8006efa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006efe:	bf94      	ite	ls
 8006f00:	4690      	movls	r8, r2
 8006f02:	4698      	movhi	r8, r3
 8006f04:	2303      	movs	r3, #3
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	f02b 0304 	bic.w	r3, fp, #4
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	f04f 0900 	mov.w	r9, #0
 8006f12:	9700      	str	r7, [sp, #0]
 8006f14:	4633      	mov	r3, r6
 8006f16:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f18:	4621      	mov	r1, r4
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 f9d2 	bl	80072c4 <_printf_common>
 8006f20:	3001      	adds	r0, #1
 8006f22:	f040 808d 	bne.w	8007040 <_printf_float+0x1d0>
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2a:	b00d      	add	sp, #52	@ 0x34
 8006f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	4640      	mov	r0, r8
 8006f36:	4649      	mov	r1, r9
 8006f38:	f7f9 fe00 	bl	8000b3c <__aeabi_dcmpun>
 8006f3c:	b140      	cbz	r0, 8006f50 <_printf_float+0xe0>
 8006f3e:	464b      	mov	r3, r9
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bfbc      	itt	lt
 8006f44:	232d      	movlt	r3, #45	@ 0x2d
 8006f46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8007144 <_printf_float+0x2d4>)
 8006f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8007148 <_printf_float+0x2d8>)
 8006f4e:	e7d4      	b.n	8006efa <_printf_float+0x8a>
 8006f50:	6863      	ldr	r3, [r4, #4]
 8006f52:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006f56:	9206      	str	r2, [sp, #24]
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	d13b      	bne.n	8006fd4 <_printf_float+0x164>
 8006f5c:	2306      	movs	r3, #6
 8006f5e:	6063      	str	r3, [r4, #4]
 8006f60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006f64:	2300      	movs	r3, #0
 8006f66:	6022      	str	r2, [r4, #0]
 8006f68:	9303      	str	r3, [sp, #12]
 8006f6a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f6c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006f70:	ab09      	add	r3, sp, #36	@ 0x24
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	6861      	ldr	r1, [r4, #4]
 8006f76:	ec49 8b10 	vmov	d0, r8, r9
 8006f7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f7ff fed6 	bl	8006d30 <__cvt>
 8006f84:	9b06      	ldr	r3, [sp, #24]
 8006f86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f88:	2b47      	cmp	r3, #71	@ 0x47
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	d129      	bne.n	8006fe2 <_printf_float+0x172>
 8006f8e:	1cc8      	adds	r0, r1, #3
 8006f90:	db02      	blt.n	8006f98 <_printf_float+0x128>
 8006f92:	6863      	ldr	r3, [r4, #4]
 8006f94:	4299      	cmp	r1, r3
 8006f96:	dd41      	ble.n	800701c <_printf_float+0x1ac>
 8006f98:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f9c:	fa5f fa8a 	uxtb.w	sl, sl
 8006fa0:	3901      	subs	r1, #1
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006fa8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006faa:	f7ff ff26 	bl	8006dfa <__exponent>
 8006fae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fb0:	1813      	adds	r3, r2, r0
 8006fb2:	2a01      	cmp	r2, #1
 8006fb4:	4681      	mov	r9, r0
 8006fb6:	6123      	str	r3, [r4, #16]
 8006fb8:	dc02      	bgt.n	8006fc0 <_printf_float+0x150>
 8006fba:	6822      	ldr	r2, [r4, #0]
 8006fbc:	07d2      	lsls	r2, r2, #31
 8006fbe:	d501      	bpl.n	8006fc4 <_printf_float+0x154>
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	6123      	str	r3, [r4, #16]
 8006fc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0a2      	beq.n	8006f12 <_printf_float+0xa2>
 8006fcc:	232d      	movs	r3, #45	@ 0x2d
 8006fce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fd2:	e79e      	b.n	8006f12 <_printf_float+0xa2>
 8006fd4:	9a06      	ldr	r2, [sp, #24]
 8006fd6:	2a47      	cmp	r2, #71	@ 0x47
 8006fd8:	d1c2      	bne.n	8006f60 <_printf_float+0xf0>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1c0      	bne.n	8006f60 <_printf_float+0xf0>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e7bd      	b.n	8006f5e <_printf_float+0xee>
 8006fe2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006fe6:	d9db      	bls.n	8006fa0 <_printf_float+0x130>
 8006fe8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006fec:	d118      	bne.n	8007020 <_printf_float+0x1b0>
 8006fee:	2900      	cmp	r1, #0
 8006ff0:	6863      	ldr	r3, [r4, #4]
 8006ff2:	dd0b      	ble.n	800700c <_printf_float+0x19c>
 8006ff4:	6121      	str	r1, [r4, #16]
 8006ff6:	b913      	cbnz	r3, 8006ffe <_printf_float+0x18e>
 8006ff8:	6822      	ldr	r2, [r4, #0]
 8006ffa:	07d0      	lsls	r0, r2, #31
 8006ffc:	d502      	bpl.n	8007004 <_printf_float+0x194>
 8006ffe:	3301      	adds	r3, #1
 8007000:	440b      	add	r3, r1
 8007002:	6123      	str	r3, [r4, #16]
 8007004:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007006:	f04f 0900 	mov.w	r9, #0
 800700a:	e7db      	b.n	8006fc4 <_printf_float+0x154>
 800700c:	b913      	cbnz	r3, 8007014 <_printf_float+0x1a4>
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	07d2      	lsls	r2, r2, #31
 8007012:	d501      	bpl.n	8007018 <_printf_float+0x1a8>
 8007014:	3302      	adds	r3, #2
 8007016:	e7f4      	b.n	8007002 <_printf_float+0x192>
 8007018:	2301      	movs	r3, #1
 800701a:	e7f2      	b.n	8007002 <_printf_float+0x192>
 800701c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007022:	4299      	cmp	r1, r3
 8007024:	db05      	blt.n	8007032 <_printf_float+0x1c2>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	6121      	str	r1, [r4, #16]
 800702a:	07d8      	lsls	r0, r3, #31
 800702c:	d5ea      	bpl.n	8007004 <_printf_float+0x194>
 800702e:	1c4b      	adds	r3, r1, #1
 8007030:	e7e7      	b.n	8007002 <_printf_float+0x192>
 8007032:	2900      	cmp	r1, #0
 8007034:	bfd4      	ite	le
 8007036:	f1c1 0202 	rsble	r2, r1, #2
 800703a:	2201      	movgt	r2, #1
 800703c:	4413      	add	r3, r2
 800703e:	e7e0      	b.n	8007002 <_printf_float+0x192>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	055a      	lsls	r2, r3, #21
 8007044:	d407      	bmi.n	8007056 <_printf_float+0x1e6>
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	4642      	mov	r2, r8
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	d12b      	bne.n	80070ac <_printf_float+0x23c>
 8007054:	e767      	b.n	8006f26 <_printf_float+0xb6>
 8007056:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800705a:	f240 80dd 	bls.w	8007218 <_printf_float+0x3a8>
 800705e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007062:	2200      	movs	r2, #0
 8007064:	2300      	movs	r3, #0
 8007066:	f7f9 fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800706a:	2800      	cmp	r0, #0
 800706c:	d033      	beq.n	80070d6 <_printf_float+0x266>
 800706e:	4a37      	ldr	r2, [pc, #220]	@ (800714c <_printf_float+0x2dc>)
 8007070:	2301      	movs	r3, #1
 8007072:	4631      	mov	r1, r6
 8007074:	4628      	mov	r0, r5
 8007076:	47b8      	blx	r7
 8007078:	3001      	adds	r0, #1
 800707a:	f43f af54 	beq.w	8006f26 <_printf_float+0xb6>
 800707e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007082:	4543      	cmp	r3, r8
 8007084:	db02      	blt.n	800708c <_printf_float+0x21c>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	07d8      	lsls	r0, r3, #31
 800708a:	d50f      	bpl.n	80070ac <_printf_float+0x23c>
 800708c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007090:	4631      	mov	r1, r6
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	f43f af45 	beq.w	8006f26 <_printf_float+0xb6>
 800709c:	f04f 0900 	mov.w	r9, #0
 80070a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80070a4:	f104 0a1a 	add.w	sl, r4, #26
 80070a8:	45c8      	cmp	r8, r9
 80070aa:	dc09      	bgt.n	80070c0 <_printf_float+0x250>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	079b      	lsls	r3, r3, #30
 80070b0:	f100 8103 	bmi.w	80072ba <_printf_float+0x44a>
 80070b4:	68e0      	ldr	r0, [r4, #12]
 80070b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070b8:	4298      	cmp	r0, r3
 80070ba:	bfb8      	it	lt
 80070bc:	4618      	movlt	r0, r3
 80070be:	e734      	b.n	8006f2a <_printf_float+0xba>
 80070c0:	2301      	movs	r3, #1
 80070c2:	4652      	mov	r2, sl
 80070c4:	4631      	mov	r1, r6
 80070c6:	4628      	mov	r0, r5
 80070c8:	47b8      	blx	r7
 80070ca:	3001      	adds	r0, #1
 80070cc:	f43f af2b 	beq.w	8006f26 <_printf_float+0xb6>
 80070d0:	f109 0901 	add.w	r9, r9, #1
 80070d4:	e7e8      	b.n	80070a8 <_printf_float+0x238>
 80070d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	dc39      	bgt.n	8007150 <_printf_float+0x2e0>
 80070dc:	4a1b      	ldr	r2, [pc, #108]	@ (800714c <_printf_float+0x2dc>)
 80070de:	2301      	movs	r3, #1
 80070e0:	4631      	mov	r1, r6
 80070e2:	4628      	mov	r0, r5
 80070e4:	47b8      	blx	r7
 80070e6:	3001      	adds	r0, #1
 80070e8:	f43f af1d 	beq.w	8006f26 <_printf_float+0xb6>
 80070ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80070f0:	ea59 0303 	orrs.w	r3, r9, r3
 80070f4:	d102      	bne.n	80070fc <_printf_float+0x28c>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	07d9      	lsls	r1, r3, #31
 80070fa:	d5d7      	bpl.n	80070ac <_printf_float+0x23c>
 80070fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007100:	4631      	mov	r1, r6
 8007102:	4628      	mov	r0, r5
 8007104:	47b8      	blx	r7
 8007106:	3001      	adds	r0, #1
 8007108:	f43f af0d 	beq.w	8006f26 <_printf_float+0xb6>
 800710c:	f04f 0a00 	mov.w	sl, #0
 8007110:	f104 0b1a 	add.w	fp, r4, #26
 8007114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007116:	425b      	negs	r3, r3
 8007118:	4553      	cmp	r3, sl
 800711a:	dc01      	bgt.n	8007120 <_printf_float+0x2b0>
 800711c:	464b      	mov	r3, r9
 800711e:	e793      	b.n	8007048 <_printf_float+0x1d8>
 8007120:	2301      	movs	r3, #1
 8007122:	465a      	mov	r2, fp
 8007124:	4631      	mov	r1, r6
 8007126:	4628      	mov	r0, r5
 8007128:	47b8      	blx	r7
 800712a:	3001      	adds	r0, #1
 800712c:	f43f aefb 	beq.w	8006f26 <_printf_float+0xb6>
 8007130:	f10a 0a01 	add.w	sl, sl, #1
 8007134:	e7ee      	b.n	8007114 <_printf_float+0x2a4>
 8007136:	bf00      	nop
 8007138:	7fefffff 	.word	0x7fefffff
 800713c:	08009a70 	.word	0x08009a70
 8007140:	08009a74 	.word	0x08009a74
 8007144:	08009a78 	.word	0x08009a78
 8007148:	08009a7c 	.word	0x08009a7c
 800714c:	08009a80 	.word	0x08009a80
 8007150:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007152:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007156:	4553      	cmp	r3, sl
 8007158:	bfa8      	it	ge
 800715a:	4653      	movge	r3, sl
 800715c:	2b00      	cmp	r3, #0
 800715e:	4699      	mov	r9, r3
 8007160:	dc36      	bgt.n	80071d0 <_printf_float+0x360>
 8007162:	f04f 0b00 	mov.w	fp, #0
 8007166:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800716a:	f104 021a 	add.w	r2, r4, #26
 800716e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007170:	9306      	str	r3, [sp, #24]
 8007172:	eba3 0309 	sub.w	r3, r3, r9
 8007176:	455b      	cmp	r3, fp
 8007178:	dc31      	bgt.n	80071de <_printf_float+0x36e>
 800717a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800717c:	459a      	cmp	sl, r3
 800717e:	dc3a      	bgt.n	80071f6 <_printf_float+0x386>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	07da      	lsls	r2, r3, #31
 8007184:	d437      	bmi.n	80071f6 <_printf_float+0x386>
 8007186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007188:	ebaa 0903 	sub.w	r9, sl, r3
 800718c:	9b06      	ldr	r3, [sp, #24]
 800718e:	ebaa 0303 	sub.w	r3, sl, r3
 8007192:	4599      	cmp	r9, r3
 8007194:	bfa8      	it	ge
 8007196:	4699      	movge	r9, r3
 8007198:	f1b9 0f00 	cmp.w	r9, #0
 800719c:	dc33      	bgt.n	8007206 <_printf_float+0x396>
 800719e:	f04f 0800 	mov.w	r8, #0
 80071a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071a6:	f104 0b1a 	add.w	fp, r4, #26
 80071aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ac:	ebaa 0303 	sub.w	r3, sl, r3
 80071b0:	eba3 0309 	sub.w	r3, r3, r9
 80071b4:	4543      	cmp	r3, r8
 80071b6:	f77f af79 	ble.w	80070ac <_printf_float+0x23c>
 80071ba:	2301      	movs	r3, #1
 80071bc:	465a      	mov	r2, fp
 80071be:	4631      	mov	r1, r6
 80071c0:	4628      	mov	r0, r5
 80071c2:	47b8      	blx	r7
 80071c4:	3001      	adds	r0, #1
 80071c6:	f43f aeae 	beq.w	8006f26 <_printf_float+0xb6>
 80071ca:	f108 0801 	add.w	r8, r8, #1
 80071ce:	e7ec      	b.n	80071aa <_printf_float+0x33a>
 80071d0:	4642      	mov	r2, r8
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	d1c2      	bne.n	8007162 <_printf_float+0x2f2>
 80071dc:	e6a3      	b.n	8006f26 <_printf_float+0xb6>
 80071de:	2301      	movs	r3, #1
 80071e0:	4631      	mov	r1, r6
 80071e2:	4628      	mov	r0, r5
 80071e4:	9206      	str	r2, [sp, #24]
 80071e6:	47b8      	blx	r7
 80071e8:	3001      	adds	r0, #1
 80071ea:	f43f ae9c 	beq.w	8006f26 <_printf_float+0xb6>
 80071ee:	9a06      	ldr	r2, [sp, #24]
 80071f0:	f10b 0b01 	add.w	fp, fp, #1
 80071f4:	e7bb      	b.n	800716e <_printf_float+0x2fe>
 80071f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071fa:	4631      	mov	r1, r6
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b8      	blx	r7
 8007200:	3001      	adds	r0, #1
 8007202:	d1c0      	bne.n	8007186 <_printf_float+0x316>
 8007204:	e68f      	b.n	8006f26 <_printf_float+0xb6>
 8007206:	9a06      	ldr	r2, [sp, #24]
 8007208:	464b      	mov	r3, r9
 800720a:	4442      	add	r2, r8
 800720c:	4631      	mov	r1, r6
 800720e:	4628      	mov	r0, r5
 8007210:	47b8      	blx	r7
 8007212:	3001      	adds	r0, #1
 8007214:	d1c3      	bne.n	800719e <_printf_float+0x32e>
 8007216:	e686      	b.n	8006f26 <_printf_float+0xb6>
 8007218:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800721c:	f1ba 0f01 	cmp.w	sl, #1
 8007220:	dc01      	bgt.n	8007226 <_printf_float+0x3b6>
 8007222:	07db      	lsls	r3, r3, #31
 8007224:	d536      	bpl.n	8007294 <_printf_float+0x424>
 8007226:	2301      	movs	r3, #1
 8007228:	4642      	mov	r2, r8
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	f43f ae78 	beq.w	8006f26 <_printf_float+0xb6>
 8007236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f ae70 	beq.w	8006f26 <_printf_float+0xb6>
 8007246:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800724a:	2200      	movs	r2, #0
 800724c:	2300      	movs	r3, #0
 800724e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007252:	f7f9 fc41 	bl	8000ad8 <__aeabi_dcmpeq>
 8007256:	b9c0      	cbnz	r0, 800728a <_printf_float+0x41a>
 8007258:	4653      	mov	r3, sl
 800725a:	f108 0201 	add.w	r2, r8, #1
 800725e:	4631      	mov	r1, r6
 8007260:	4628      	mov	r0, r5
 8007262:	47b8      	blx	r7
 8007264:	3001      	adds	r0, #1
 8007266:	d10c      	bne.n	8007282 <_printf_float+0x412>
 8007268:	e65d      	b.n	8006f26 <_printf_float+0xb6>
 800726a:	2301      	movs	r3, #1
 800726c:	465a      	mov	r2, fp
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	f43f ae56 	beq.w	8006f26 <_printf_float+0xb6>
 800727a:	f108 0801 	add.w	r8, r8, #1
 800727e:	45d0      	cmp	r8, sl
 8007280:	dbf3      	blt.n	800726a <_printf_float+0x3fa>
 8007282:	464b      	mov	r3, r9
 8007284:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007288:	e6df      	b.n	800704a <_printf_float+0x1da>
 800728a:	f04f 0800 	mov.w	r8, #0
 800728e:	f104 0b1a 	add.w	fp, r4, #26
 8007292:	e7f4      	b.n	800727e <_printf_float+0x40e>
 8007294:	2301      	movs	r3, #1
 8007296:	4642      	mov	r2, r8
 8007298:	e7e1      	b.n	800725e <_printf_float+0x3ee>
 800729a:	2301      	movs	r3, #1
 800729c:	464a      	mov	r2, r9
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	f43f ae3e 	beq.w	8006f26 <_printf_float+0xb6>
 80072aa:	f108 0801 	add.w	r8, r8, #1
 80072ae:	68e3      	ldr	r3, [r4, #12]
 80072b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072b2:	1a5b      	subs	r3, r3, r1
 80072b4:	4543      	cmp	r3, r8
 80072b6:	dcf0      	bgt.n	800729a <_printf_float+0x42a>
 80072b8:	e6fc      	b.n	80070b4 <_printf_float+0x244>
 80072ba:	f04f 0800 	mov.w	r8, #0
 80072be:	f104 0919 	add.w	r9, r4, #25
 80072c2:	e7f4      	b.n	80072ae <_printf_float+0x43e>

080072c4 <_printf_common>:
 80072c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	4616      	mov	r6, r2
 80072ca:	4698      	mov	r8, r3
 80072cc:	688a      	ldr	r2, [r1, #8]
 80072ce:	690b      	ldr	r3, [r1, #16]
 80072d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072d4:	4293      	cmp	r3, r2
 80072d6:	bfb8      	it	lt
 80072d8:	4613      	movlt	r3, r2
 80072da:	6033      	str	r3, [r6, #0]
 80072dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072e0:	4607      	mov	r7, r0
 80072e2:	460c      	mov	r4, r1
 80072e4:	b10a      	cbz	r2, 80072ea <_printf_common+0x26>
 80072e6:	3301      	adds	r3, #1
 80072e8:	6033      	str	r3, [r6, #0]
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	0699      	lsls	r1, r3, #26
 80072ee:	bf42      	ittt	mi
 80072f0:	6833      	ldrmi	r3, [r6, #0]
 80072f2:	3302      	addmi	r3, #2
 80072f4:	6033      	strmi	r3, [r6, #0]
 80072f6:	6825      	ldr	r5, [r4, #0]
 80072f8:	f015 0506 	ands.w	r5, r5, #6
 80072fc:	d106      	bne.n	800730c <_printf_common+0x48>
 80072fe:	f104 0a19 	add.w	sl, r4, #25
 8007302:	68e3      	ldr	r3, [r4, #12]
 8007304:	6832      	ldr	r2, [r6, #0]
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	42ab      	cmp	r3, r5
 800730a:	dc26      	bgt.n	800735a <_printf_common+0x96>
 800730c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007310:	6822      	ldr	r2, [r4, #0]
 8007312:	3b00      	subs	r3, #0
 8007314:	bf18      	it	ne
 8007316:	2301      	movne	r3, #1
 8007318:	0692      	lsls	r2, r2, #26
 800731a:	d42b      	bmi.n	8007374 <_printf_common+0xb0>
 800731c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007320:	4641      	mov	r1, r8
 8007322:	4638      	mov	r0, r7
 8007324:	47c8      	blx	r9
 8007326:	3001      	adds	r0, #1
 8007328:	d01e      	beq.n	8007368 <_printf_common+0xa4>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	6922      	ldr	r2, [r4, #16]
 800732e:	f003 0306 	and.w	r3, r3, #6
 8007332:	2b04      	cmp	r3, #4
 8007334:	bf02      	ittt	eq
 8007336:	68e5      	ldreq	r5, [r4, #12]
 8007338:	6833      	ldreq	r3, [r6, #0]
 800733a:	1aed      	subeq	r5, r5, r3
 800733c:	68a3      	ldr	r3, [r4, #8]
 800733e:	bf0c      	ite	eq
 8007340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007344:	2500      	movne	r5, #0
 8007346:	4293      	cmp	r3, r2
 8007348:	bfc4      	itt	gt
 800734a:	1a9b      	subgt	r3, r3, r2
 800734c:	18ed      	addgt	r5, r5, r3
 800734e:	2600      	movs	r6, #0
 8007350:	341a      	adds	r4, #26
 8007352:	42b5      	cmp	r5, r6
 8007354:	d11a      	bne.n	800738c <_printf_common+0xc8>
 8007356:	2000      	movs	r0, #0
 8007358:	e008      	b.n	800736c <_printf_common+0xa8>
 800735a:	2301      	movs	r3, #1
 800735c:	4652      	mov	r2, sl
 800735e:	4641      	mov	r1, r8
 8007360:	4638      	mov	r0, r7
 8007362:	47c8      	blx	r9
 8007364:	3001      	adds	r0, #1
 8007366:	d103      	bne.n	8007370 <_printf_common+0xac>
 8007368:	f04f 30ff 	mov.w	r0, #4294967295
 800736c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007370:	3501      	adds	r5, #1
 8007372:	e7c6      	b.n	8007302 <_printf_common+0x3e>
 8007374:	18e1      	adds	r1, r4, r3
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	2030      	movs	r0, #48	@ 0x30
 800737a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800737e:	4422      	add	r2, r4
 8007380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007388:	3302      	adds	r3, #2
 800738a:	e7c7      	b.n	800731c <_printf_common+0x58>
 800738c:	2301      	movs	r3, #1
 800738e:	4622      	mov	r2, r4
 8007390:	4641      	mov	r1, r8
 8007392:	4638      	mov	r0, r7
 8007394:	47c8      	blx	r9
 8007396:	3001      	adds	r0, #1
 8007398:	d0e6      	beq.n	8007368 <_printf_common+0xa4>
 800739a:	3601      	adds	r6, #1
 800739c:	e7d9      	b.n	8007352 <_printf_common+0x8e>
	...

080073a0 <_printf_i>:
 80073a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	7e0f      	ldrb	r7, [r1, #24]
 80073a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073a8:	2f78      	cmp	r7, #120	@ 0x78
 80073aa:	4691      	mov	r9, r2
 80073ac:	4680      	mov	r8, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	469a      	mov	sl, r3
 80073b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073b6:	d807      	bhi.n	80073c8 <_printf_i+0x28>
 80073b8:	2f62      	cmp	r7, #98	@ 0x62
 80073ba:	d80a      	bhi.n	80073d2 <_printf_i+0x32>
 80073bc:	2f00      	cmp	r7, #0
 80073be:	f000 80d2 	beq.w	8007566 <_printf_i+0x1c6>
 80073c2:	2f58      	cmp	r7, #88	@ 0x58
 80073c4:	f000 80b9 	beq.w	800753a <_printf_i+0x19a>
 80073c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073d0:	e03a      	b.n	8007448 <_printf_i+0xa8>
 80073d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073d6:	2b15      	cmp	r3, #21
 80073d8:	d8f6      	bhi.n	80073c8 <_printf_i+0x28>
 80073da:	a101      	add	r1, pc, #4	@ (adr r1, 80073e0 <_printf_i+0x40>)
 80073dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073e0:	08007439 	.word	0x08007439
 80073e4:	0800744d 	.word	0x0800744d
 80073e8:	080073c9 	.word	0x080073c9
 80073ec:	080073c9 	.word	0x080073c9
 80073f0:	080073c9 	.word	0x080073c9
 80073f4:	080073c9 	.word	0x080073c9
 80073f8:	0800744d 	.word	0x0800744d
 80073fc:	080073c9 	.word	0x080073c9
 8007400:	080073c9 	.word	0x080073c9
 8007404:	080073c9 	.word	0x080073c9
 8007408:	080073c9 	.word	0x080073c9
 800740c:	0800754d 	.word	0x0800754d
 8007410:	08007477 	.word	0x08007477
 8007414:	08007507 	.word	0x08007507
 8007418:	080073c9 	.word	0x080073c9
 800741c:	080073c9 	.word	0x080073c9
 8007420:	0800756f 	.word	0x0800756f
 8007424:	080073c9 	.word	0x080073c9
 8007428:	08007477 	.word	0x08007477
 800742c:	080073c9 	.word	0x080073c9
 8007430:	080073c9 	.word	0x080073c9
 8007434:	0800750f 	.word	0x0800750f
 8007438:	6833      	ldr	r3, [r6, #0]
 800743a:	1d1a      	adds	r2, r3, #4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6032      	str	r2, [r6, #0]
 8007440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007448:	2301      	movs	r3, #1
 800744a:	e09d      	b.n	8007588 <_printf_i+0x1e8>
 800744c:	6833      	ldr	r3, [r6, #0]
 800744e:	6820      	ldr	r0, [r4, #0]
 8007450:	1d19      	adds	r1, r3, #4
 8007452:	6031      	str	r1, [r6, #0]
 8007454:	0606      	lsls	r6, r0, #24
 8007456:	d501      	bpl.n	800745c <_printf_i+0xbc>
 8007458:	681d      	ldr	r5, [r3, #0]
 800745a:	e003      	b.n	8007464 <_printf_i+0xc4>
 800745c:	0645      	lsls	r5, r0, #25
 800745e:	d5fb      	bpl.n	8007458 <_printf_i+0xb8>
 8007460:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007464:	2d00      	cmp	r5, #0
 8007466:	da03      	bge.n	8007470 <_printf_i+0xd0>
 8007468:	232d      	movs	r3, #45	@ 0x2d
 800746a:	426d      	negs	r5, r5
 800746c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007470:	4859      	ldr	r0, [pc, #356]	@ (80075d8 <_printf_i+0x238>)
 8007472:	230a      	movs	r3, #10
 8007474:	e011      	b.n	800749a <_printf_i+0xfa>
 8007476:	6821      	ldr	r1, [r4, #0]
 8007478:	6833      	ldr	r3, [r6, #0]
 800747a:	0608      	lsls	r0, r1, #24
 800747c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007480:	d402      	bmi.n	8007488 <_printf_i+0xe8>
 8007482:	0649      	lsls	r1, r1, #25
 8007484:	bf48      	it	mi
 8007486:	b2ad      	uxthmi	r5, r5
 8007488:	2f6f      	cmp	r7, #111	@ 0x6f
 800748a:	4853      	ldr	r0, [pc, #332]	@ (80075d8 <_printf_i+0x238>)
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	bf14      	ite	ne
 8007490:	230a      	movne	r3, #10
 8007492:	2308      	moveq	r3, #8
 8007494:	2100      	movs	r1, #0
 8007496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800749a:	6866      	ldr	r6, [r4, #4]
 800749c:	60a6      	str	r6, [r4, #8]
 800749e:	2e00      	cmp	r6, #0
 80074a0:	bfa2      	ittt	ge
 80074a2:	6821      	ldrge	r1, [r4, #0]
 80074a4:	f021 0104 	bicge.w	r1, r1, #4
 80074a8:	6021      	strge	r1, [r4, #0]
 80074aa:	b90d      	cbnz	r5, 80074b0 <_printf_i+0x110>
 80074ac:	2e00      	cmp	r6, #0
 80074ae:	d04b      	beq.n	8007548 <_printf_i+0x1a8>
 80074b0:	4616      	mov	r6, r2
 80074b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80074b6:	fb03 5711 	mls	r7, r3, r1, r5
 80074ba:	5dc7      	ldrb	r7, [r0, r7]
 80074bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074c0:	462f      	mov	r7, r5
 80074c2:	42bb      	cmp	r3, r7
 80074c4:	460d      	mov	r5, r1
 80074c6:	d9f4      	bls.n	80074b2 <_printf_i+0x112>
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d10b      	bne.n	80074e4 <_printf_i+0x144>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	07df      	lsls	r7, r3, #31
 80074d0:	d508      	bpl.n	80074e4 <_printf_i+0x144>
 80074d2:	6923      	ldr	r3, [r4, #16]
 80074d4:	6861      	ldr	r1, [r4, #4]
 80074d6:	4299      	cmp	r1, r3
 80074d8:	bfde      	ittt	le
 80074da:	2330      	movle	r3, #48	@ 0x30
 80074dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074e4:	1b92      	subs	r2, r2, r6
 80074e6:	6122      	str	r2, [r4, #16]
 80074e8:	f8cd a000 	str.w	sl, [sp]
 80074ec:	464b      	mov	r3, r9
 80074ee:	aa03      	add	r2, sp, #12
 80074f0:	4621      	mov	r1, r4
 80074f2:	4640      	mov	r0, r8
 80074f4:	f7ff fee6 	bl	80072c4 <_printf_common>
 80074f8:	3001      	adds	r0, #1
 80074fa:	d14a      	bne.n	8007592 <_printf_i+0x1f2>
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	b004      	add	sp, #16
 8007502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	f043 0320 	orr.w	r3, r3, #32
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	4833      	ldr	r0, [pc, #204]	@ (80075dc <_printf_i+0x23c>)
 8007510:	2778      	movs	r7, #120	@ 0x78
 8007512:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	6831      	ldr	r1, [r6, #0]
 800751a:	061f      	lsls	r7, r3, #24
 800751c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007520:	d402      	bmi.n	8007528 <_printf_i+0x188>
 8007522:	065f      	lsls	r7, r3, #25
 8007524:	bf48      	it	mi
 8007526:	b2ad      	uxthmi	r5, r5
 8007528:	6031      	str	r1, [r6, #0]
 800752a:	07d9      	lsls	r1, r3, #31
 800752c:	bf44      	itt	mi
 800752e:	f043 0320 	orrmi.w	r3, r3, #32
 8007532:	6023      	strmi	r3, [r4, #0]
 8007534:	b11d      	cbz	r5, 800753e <_printf_i+0x19e>
 8007536:	2310      	movs	r3, #16
 8007538:	e7ac      	b.n	8007494 <_printf_i+0xf4>
 800753a:	4827      	ldr	r0, [pc, #156]	@ (80075d8 <_printf_i+0x238>)
 800753c:	e7e9      	b.n	8007512 <_printf_i+0x172>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	f023 0320 	bic.w	r3, r3, #32
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	e7f6      	b.n	8007536 <_printf_i+0x196>
 8007548:	4616      	mov	r6, r2
 800754a:	e7bd      	b.n	80074c8 <_printf_i+0x128>
 800754c:	6833      	ldr	r3, [r6, #0]
 800754e:	6825      	ldr	r5, [r4, #0]
 8007550:	6961      	ldr	r1, [r4, #20]
 8007552:	1d18      	adds	r0, r3, #4
 8007554:	6030      	str	r0, [r6, #0]
 8007556:	062e      	lsls	r6, r5, #24
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	d501      	bpl.n	8007560 <_printf_i+0x1c0>
 800755c:	6019      	str	r1, [r3, #0]
 800755e:	e002      	b.n	8007566 <_printf_i+0x1c6>
 8007560:	0668      	lsls	r0, r5, #25
 8007562:	d5fb      	bpl.n	800755c <_printf_i+0x1bc>
 8007564:	8019      	strh	r1, [r3, #0]
 8007566:	2300      	movs	r3, #0
 8007568:	6123      	str	r3, [r4, #16]
 800756a:	4616      	mov	r6, r2
 800756c:	e7bc      	b.n	80074e8 <_printf_i+0x148>
 800756e:	6833      	ldr	r3, [r6, #0]
 8007570:	1d1a      	adds	r2, r3, #4
 8007572:	6032      	str	r2, [r6, #0]
 8007574:	681e      	ldr	r6, [r3, #0]
 8007576:	6862      	ldr	r2, [r4, #4]
 8007578:	2100      	movs	r1, #0
 800757a:	4630      	mov	r0, r6
 800757c:	f7f8 fe30 	bl	80001e0 <memchr>
 8007580:	b108      	cbz	r0, 8007586 <_printf_i+0x1e6>
 8007582:	1b80      	subs	r0, r0, r6
 8007584:	6060      	str	r0, [r4, #4]
 8007586:	6863      	ldr	r3, [r4, #4]
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	2300      	movs	r3, #0
 800758c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007590:	e7aa      	b.n	80074e8 <_printf_i+0x148>
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	4632      	mov	r2, r6
 8007596:	4649      	mov	r1, r9
 8007598:	4640      	mov	r0, r8
 800759a:	47d0      	blx	sl
 800759c:	3001      	adds	r0, #1
 800759e:	d0ad      	beq.n	80074fc <_printf_i+0x15c>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	079b      	lsls	r3, r3, #30
 80075a4:	d413      	bmi.n	80075ce <_printf_i+0x22e>
 80075a6:	68e0      	ldr	r0, [r4, #12]
 80075a8:	9b03      	ldr	r3, [sp, #12]
 80075aa:	4298      	cmp	r0, r3
 80075ac:	bfb8      	it	lt
 80075ae:	4618      	movlt	r0, r3
 80075b0:	e7a6      	b.n	8007500 <_printf_i+0x160>
 80075b2:	2301      	movs	r3, #1
 80075b4:	4632      	mov	r2, r6
 80075b6:	4649      	mov	r1, r9
 80075b8:	4640      	mov	r0, r8
 80075ba:	47d0      	blx	sl
 80075bc:	3001      	adds	r0, #1
 80075be:	d09d      	beq.n	80074fc <_printf_i+0x15c>
 80075c0:	3501      	adds	r5, #1
 80075c2:	68e3      	ldr	r3, [r4, #12]
 80075c4:	9903      	ldr	r1, [sp, #12]
 80075c6:	1a5b      	subs	r3, r3, r1
 80075c8:	42ab      	cmp	r3, r5
 80075ca:	dcf2      	bgt.n	80075b2 <_printf_i+0x212>
 80075cc:	e7eb      	b.n	80075a6 <_printf_i+0x206>
 80075ce:	2500      	movs	r5, #0
 80075d0:	f104 0619 	add.w	r6, r4, #25
 80075d4:	e7f5      	b.n	80075c2 <_printf_i+0x222>
 80075d6:	bf00      	nop
 80075d8:	08009a82 	.word	0x08009a82
 80075dc:	08009a93 	.word	0x08009a93

080075e0 <std>:
 80075e0:	2300      	movs	r3, #0
 80075e2:	b510      	push	{r4, lr}
 80075e4:	4604      	mov	r4, r0
 80075e6:	e9c0 3300 	strd	r3, r3, [r0]
 80075ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ee:	6083      	str	r3, [r0, #8]
 80075f0:	8181      	strh	r1, [r0, #12]
 80075f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80075f4:	81c2      	strh	r2, [r0, #14]
 80075f6:	6183      	str	r3, [r0, #24]
 80075f8:	4619      	mov	r1, r3
 80075fa:	2208      	movs	r2, #8
 80075fc:	305c      	adds	r0, #92	@ 0x5c
 80075fe:	f000 f928 	bl	8007852 <memset>
 8007602:	4b0d      	ldr	r3, [pc, #52]	@ (8007638 <std+0x58>)
 8007604:	6263      	str	r3, [r4, #36]	@ 0x24
 8007606:	4b0d      	ldr	r3, [pc, #52]	@ (800763c <std+0x5c>)
 8007608:	62a3      	str	r3, [r4, #40]	@ 0x28
 800760a:	4b0d      	ldr	r3, [pc, #52]	@ (8007640 <std+0x60>)
 800760c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800760e:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <std+0x64>)
 8007610:	6323      	str	r3, [r4, #48]	@ 0x30
 8007612:	4b0d      	ldr	r3, [pc, #52]	@ (8007648 <std+0x68>)
 8007614:	6224      	str	r4, [r4, #32]
 8007616:	429c      	cmp	r4, r3
 8007618:	d006      	beq.n	8007628 <std+0x48>
 800761a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800761e:	4294      	cmp	r4, r2
 8007620:	d002      	beq.n	8007628 <std+0x48>
 8007622:	33d0      	adds	r3, #208	@ 0xd0
 8007624:	429c      	cmp	r4, r3
 8007626:	d105      	bne.n	8007634 <std+0x54>
 8007628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007630:	f000 b98c 	b.w	800794c <__retarget_lock_init_recursive>
 8007634:	bd10      	pop	{r4, pc}
 8007636:	bf00      	nop
 8007638:	080077cd 	.word	0x080077cd
 800763c:	080077ef 	.word	0x080077ef
 8007640:	08007827 	.word	0x08007827
 8007644:	0800784b 	.word	0x0800784b
 8007648:	20000608 	.word	0x20000608

0800764c <stdio_exit_handler>:
 800764c:	4a02      	ldr	r2, [pc, #8]	@ (8007658 <stdio_exit_handler+0xc>)
 800764e:	4903      	ldr	r1, [pc, #12]	@ (800765c <stdio_exit_handler+0x10>)
 8007650:	4803      	ldr	r0, [pc, #12]	@ (8007660 <stdio_exit_handler+0x14>)
 8007652:	f000 b869 	b.w	8007728 <_fwalk_sglue>
 8007656:	bf00      	nop
 8007658:	20000058 	.word	0x20000058
 800765c:	080092c5 	.word	0x080092c5
 8007660:	20000068 	.word	0x20000068

08007664 <cleanup_stdio>:
 8007664:	6841      	ldr	r1, [r0, #4]
 8007666:	4b0c      	ldr	r3, [pc, #48]	@ (8007698 <cleanup_stdio+0x34>)
 8007668:	4299      	cmp	r1, r3
 800766a:	b510      	push	{r4, lr}
 800766c:	4604      	mov	r4, r0
 800766e:	d001      	beq.n	8007674 <cleanup_stdio+0x10>
 8007670:	f001 fe28 	bl	80092c4 <_fflush_r>
 8007674:	68a1      	ldr	r1, [r4, #8]
 8007676:	4b09      	ldr	r3, [pc, #36]	@ (800769c <cleanup_stdio+0x38>)
 8007678:	4299      	cmp	r1, r3
 800767a:	d002      	beq.n	8007682 <cleanup_stdio+0x1e>
 800767c:	4620      	mov	r0, r4
 800767e:	f001 fe21 	bl	80092c4 <_fflush_r>
 8007682:	68e1      	ldr	r1, [r4, #12]
 8007684:	4b06      	ldr	r3, [pc, #24]	@ (80076a0 <cleanup_stdio+0x3c>)
 8007686:	4299      	cmp	r1, r3
 8007688:	d004      	beq.n	8007694 <cleanup_stdio+0x30>
 800768a:	4620      	mov	r0, r4
 800768c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007690:	f001 be18 	b.w	80092c4 <_fflush_r>
 8007694:	bd10      	pop	{r4, pc}
 8007696:	bf00      	nop
 8007698:	20000608 	.word	0x20000608
 800769c:	20000670 	.word	0x20000670
 80076a0:	200006d8 	.word	0x200006d8

080076a4 <global_stdio_init.part.0>:
 80076a4:	b510      	push	{r4, lr}
 80076a6:	4b0b      	ldr	r3, [pc, #44]	@ (80076d4 <global_stdio_init.part.0+0x30>)
 80076a8:	4c0b      	ldr	r4, [pc, #44]	@ (80076d8 <global_stdio_init.part.0+0x34>)
 80076aa:	4a0c      	ldr	r2, [pc, #48]	@ (80076dc <global_stdio_init.part.0+0x38>)
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	4620      	mov	r0, r4
 80076b0:	2200      	movs	r2, #0
 80076b2:	2104      	movs	r1, #4
 80076b4:	f7ff ff94 	bl	80075e0 <std>
 80076b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076bc:	2201      	movs	r2, #1
 80076be:	2109      	movs	r1, #9
 80076c0:	f7ff ff8e 	bl	80075e0 <std>
 80076c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076c8:	2202      	movs	r2, #2
 80076ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ce:	2112      	movs	r1, #18
 80076d0:	f7ff bf86 	b.w	80075e0 <std>
 80076d4:	20000740 	.word	0x20000740
 80076d8:	20000608 	.word	0x20000608
 80076dc:	0800764d 	.word	0x0800764d

080076e0 <__sfp_lock_acquire>:
 80076e0:	4801      	ldr	r0, [pc, #4]	@ (80076e8 <__sfp_lock_acquire+0x8>)
 80076e2:	f000 b934 	b.w	800794e <__retarget_lock_acquire_recursive>
 80076e6:	bf00      	nop
 80076e8:	20000749 	.word	0x20000749

080076ec <__sfp_lock_release>:
 80076ec:	4801      	ldr	r0, [pc, #4]	@ (80076f4 <__sfp_lock_release+0x8>)
 80076ee:	f000 b92f 	b.w	8007950 <__retarget_lock_release_recursive>
 80076f2:	bf00      	nop
 80076f4:	20000749 	.word	0x20000749

080076f8 <__sinit>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	4604      	mov	r4, r0
 80076fc:	f7ff fff0 	bl	80076e0 <__sfp_lock_acquire>
 8007700:	6a23      	ldr	r3, [r4, #32]
 8007702:	b11b      	cbz	r3, 800770c <__sinit+0x14>
 8007704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007708:	f7ff bff0 	b.w	80076ec <__sfp_lock_release>
 800770c:	4b04      	ldr	r3, [pc, #16]	@ (8007720 <__sinit+0x28>)
 800770e:	6223      	str	r3, [r4, #32]
 8007710:	4b04      	ldr	r3, [pc, #16]	@ (8007724 <__sinit+0x2c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1f5      	bne.n	8007704 <__sinit+0xc>
 8007718:	f7ff ffc4 	bl	80076a4 <global_stdio_init.part.0>
 800771c:	e7f2      	b.n	8007704 <__sinit+0xc>
 800771e:	bf00      	nop
 8007720:	08007665 	.word	0x08007665
 8007724:	20000740 	.word	0x20000740

08007728 <_fwalk_sglue>:
 8007728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800772c:	4607      	mov	r7, r0
 800772e:	4688      	mov	r8, r1
 8007730:	4614      	mov	r4, r2
 8007732:	2600      	movs	r6, #0
 8007734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007738:	f1b9 0901 	subs.w	r9, r9, #1
 800773c:	d505      	bpl.n	800774a <_fwalk_sglue+0x22>
 800773e:	6824      	ldr	r4, [r4, #0]
 8007740:	2c00      	cmp	r4, #0
 8007742:	d1f7      	bne.n	8007734 <_fwalk_sglue+0xc>
 8007744:	4630      	mov	r0, r6
 8007746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800774a:	89ab      	ldrh	r3, [r5, #12]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d907      	bls.n	8007760 <_fwalk_sglue+0x38>
 8007750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007754:	3301      	adds	r3, #1
 8007756:	d003      	beq.n	8007760 <_fwalk_sglue+0x38>
 8007758:	4629      	mov	r1, r5
 800775a:	4638      	mov	r0, r7
 800775c:	47c0      	blx	r8
 800775e:	4306      	orrs	r6, r0
 8007760:	3568      	adds	r5, #104	@ 0x68
 8007762:	e7e9      	b.n	8007738 <_fwalk_sglue+0x10>

08007764 <sniprintf>:
 8007764:	b40c      	push	{r2, r3}
 8007766:	b530      	push	{r4, r5, lr}
 8007768:	4b17      	ldr	r3, [pc, #92]	@ (80077c8 <sniprintf+0x64>)
 800776a:	1e0c      	subs	r4, r1, #0
 800776c:	681d      	ldr	r5, [r3, #0]
 800776e:	b09d      	sub	sp, #116	@ 0x74
 8007770:	da08      	bge.n	8007784 <sniprintf+0x20>
 8007772:	238b      	movs	r3, #139	@ 0x8b
 8007774:	602b      	str	r3, [r5, #0]
 8007776:	f04f 30ff 	mov.w	r0, #4294967295
 800777a:	b01d      	add	sp, #116	@ 0x74
 800777c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007780:	b002      	add	sp, #8
 8007782:	4770      	bx	lr
 8007784:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007788:	f8ad 3014 	strh.w	r3, [sp, #20]
 800778c:	bf14      	ite	ne
 800778e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007792:	4623      	moveq	r3, r4
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	9307      	str	r3, [sp, #28]
 8007798:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800779c:	9002      	str	r0, [sp, #8]
 800779e:	9006      	str	r0, [sp, #24]
 80077a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80077a4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077a6:	ab21      	add	r3, sp, #132	@ 0x84
 80077a8:	a902      	add	r1, sp, #8
 80077aa:	4628      	mov	r0, r5
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	f001 fc09 	bl	8008fc4 <_svfiprintf_r>
 80077b2:	1c43      	adds	r3, r0, #1
 80077b4:	bfbc      	itt	lt
 80077b6:	238b      	movlt	r3, #139	@ 0x8b
 80077b8:	602b      	strlt	r3, [r5, #0]
 80077ba:	2c00      	cmp	r4, #0
 80077bc:	d0dd      	beq.n	800777a <sniprintf+0x16>
 80077be:	9b02      	ldr	r3, [sp, #8]
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	e7d9      	b.n	800777a <sniprintf+0x16>
 80077c6:	bf00      	nop
 80077c8:	20000064 	.word	0x20000064

080077cc <__sread>:
 80077cc:	b510      	push	{r4, lr}
 80077ce:	460c      	mov	r4, r1
 80077d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d4:	f000 f86c 	bl	80078b0 <_read_r>
 80077d8:	2800      	cmp	r0, #0
 80077da:	bfab      	itete	ge
 80077dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077de:	89a3      	ldrhlt	r3, [r4, #12]
 80077e0:	181b      	addge	r3, r3, r0
 80077e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077e6:	bfac      	ite	ge
 80077e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077ea:	81a3      	strhlt	r3, [r4, #12]
 80077ec:	bd10      	pop	{r4, pc}

080077ee <__swrite>:
 80077ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f2:	461f      	mov	r7, r3
 80077f4:	898b      	ldrh	r3, [r1, #12]
 80077f6:	05db      	lsls	r3, r3, #23
 80077f8:	4605      	mov	r5, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	4616      	mov	r6, r2
 80077fe:	d505      	bpl.n	800780c <__swrite+0x1e>
 8007800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007804:	2302      	movs	r3, #2
 8007806:	2200      	movs	r2, #0
 8007808:	f000 f840 	bl	800788c <_lseek_r>
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007816:	81a3      	strh	r3, [r4, #12]
 8007818:	4632      	mov	r2, r6
 800781a:	463b      	mov	r3, r7
 800781c:	4628      	mov	r0, r5
 800781e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007822:	f000 b857 	b.w	80078d4 <_write_r>

08007826 <__sseek>:
 8007826:	b510      	push	{r4, lr}
 8007828:	460c      	mov	r4, r1
 800782a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782e:	f000 f82d 	bl	800788c <_lseek_r>
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	bf15      	itete	ne
 8007838:	6560      	strne	r0, [r4, #84]	@ 0x54
 800783a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800783e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007842:	81a3      	strheq	r3, [r4, #12]
 8007844:	bf18      	it	ne
 8007846:	81a3      	strhne	r3, [r4, #12]
 8007848:	bd10      	pop	{r4, pc}

0800784a <__sclose>:
 800784a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800784e:	f000 b80d 	b.w	800786c <_close_r>

08007852 <memset>:
 8007852:	4402      	add	r2, r0
 8007854:	4603      	mov	r3, r0
 8007856:	4293      	cmp	r3, r2
 8007858:	d100      	bne.n	800785c <memset+0xa>
 800785a:	4770      	bx	lr
 800785c:	f803 1b01 	strb.w	r1, [r3], #1
 8007860:	e7f9      	b.n	8007856 <memset+0x4>
	...

08007864 <_localeconv_r>:
 8007864:	4800      	ldr	r0, [pc, #0]	@ (8007868 <_localeconv_r+0x4>)
 8007866:	4770      	bx	lr
 8007868:	200001a4 	.word	0x200001a4

0800786c <_close_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d06      	ldr	r5, [pc, #24]	@ (8007888 <_close_r+0x1c>)
 8007870:	2300      	movs	r3, #0
 8007872:	4604      	mov	r4, r0
 8007874:	4608      	mov	r0, r1
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	f7f9 fd9e 	bl	80013b8 <_close>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_close_r+0x1a>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_close_r+0x1a>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	20000744 	.word	0x20000744

0800788c <_lseek_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4d07      	ldr	r5, [pc, #28]	@ (80078ac <_lseek_r+0x20>)
 8007890:	4604      	mov	r4, r0
 8007892:	4608      	mov	r0, r1
 8007894:	4611      	mov	r1, r2
 8007896:	2200      	movs	r2, #0
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	f7f9 fdb3 	bl	8001406 <_lseek>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_lseek_r+0x1e>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_lseek_r+0x1e>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	20000744 	.word	0x20000744

080078b0 <_read_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4d07      	ldr	r5, [pc, #28]	@ (80078d0 <_read_r+0x20>)
 80078b4:	4604      	mov	r4, r0
 80078b6:	4608      	mov	r0, r1
 80078b8:	4611      	mov	r1, r2
 80078ba:	2200      	movs	r2, #0
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	f7ff f95e 	bl	8006b80 <_read>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_read_r+0x1e>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_read_r+0x1e>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	20000744 	.word	0x20000744

080078d4 <_write_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4d07      	ldr	r5, [pc, #28]	@ (80078f4 <_write_r+0x20>)
 80078d8:	4604      	mov	r4, r0
 80078da:	4608      	mov	r0, r1
 80078dc:	4611      	mov	r1, r2
 80078de:	2200      	movs	r2, #0
 80078e0:	602a      	str	r2, [r5, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	f7ff f95e 	bl	8006ba4 <_write>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d102      	bne.n	80078f2 <_write_r+0x1e>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	b103      	cbz	r3, 80078f2 <_write_r+0x1e>
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
 80078f4:	20000744 	.word	0x20000744

080078f8 <__errno>:
 80078f8:	4b01      	ldr	r3, [pc, #4]	@ (8007900 <__errno+0x8>)
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20000064 	.word	0x20000064

08007904 <__libc_init_array>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	4d0d      	ldr	r5, [pc, #52]	@ (800793c <__libc_init_array+0x38>)
 8007908:	4c0d      	ldr	r4, [pc, #52]	@ (8007940 <__libc_init_array+0x3c>)
 800790a:	1b64      	subs	r4, r4, r5
 800790c:	10a4      	asrs	r4, r4, #2
 800790e:	2600      	movs	r6, #0
 8007910:	42a6      	cmp	r6, r4
 8007912:	d109      	bne.n	8007928 <__libc_init_array+0x24>
 8007914:	4d0b      	ldr	r5, [pc, #44]	@ (8007944 <__libc_init_array+0x40>)
 8007916:	4c0c      	ldr	r4, [pc, #48]	@ (8007948 <__libc_init_array+0x44>)
 8007918:	f002 f864 	bl	80099e4 <_init>
 800791c:	1b64      	subs	r4, r4, r5
 800791e:	10a4      	asrs	r4, r4, #2
 8007920:	2600      	movs	r6, #0
 8007922:	42a6      	cmp	r6, r4
 8007924:	d105      	bne.n	8007932 <__libc_init_array+0x2e>
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	f855 3b04 	ldr.w	r3, [r5], #4
 800792c:	4798      	blx	r3
 800792e:	3601      	adds	r6, #1
 8007930:	e7ee      	b.n	8007910 <__libc_init_array+0xc>
 8007932:	f855 3b04 	ldr.w	r3, [r5], #4
 8007936:	4798      	blx	r3
 8007938:	3601      	adds	r6, #1
 800793a:	e7f2      	b.n	8007922 <__libc_init_array+0x1e>
 800793c:	08009de8 	.word	0x08009de8
 8007940:	08009de8 	.word	0x08009de8
 8007944:	08009de8 	.word	0x08009de8
 8007948:	08009dec 	.word	0x08009dec

0800794c <__retarget_lock_init_recursive>:
 800794c:	4770      	bx	lr

0800794e <__retarget_lock_acquire_recursive>:
 800794e:	4770      	bx	lr

08007950 <__retarget_lock_release_recursive>:
 8007950:	4770      	bx	lr

08007952 <memcpy>:
 8007952:	440a      	add	r2, r1
 8007954:	4291      	cmp	r1, r2
 8007956:	f100 33ff 	add.w	r3, r0, #4294967295
 800795a:	d100      	bne.n	800795e <memcpy+0xc>
 800795c:	4770      	bx	lr
 800795e:	b510      	push	{r4, lr}
 8007960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007968:	4291      	cmp	r1, r2
 800796a:	d1f9      	bne.n	8007960 <memcpy+0xe>
 800796c:	bd10      	pop	{r4, pc}

0800796e <quorem>:
 800796e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007972:	6903      	ldr	r3, [r0, #16]
 8007974:	690c      	ldr	r4, [r1, #16]
 8007976:	42a3      	cmp	r3, r4
 8007978:	4607      	mov	r7, r0
 800797a:	db7e      	blt.n	8007a7a <quorem+0x10c>
 800797c:	3c01      	subs	r4, #1
 800797e:	f101 0814 	add.w	r8, r1, #20
 8007982:	00a3      	lsls	r3, r4, #2
 8007984:	f100 0514 	add.w	r5, r0, #20
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007998:	3301      	adds	r3, #1
 800799a:	429a      	cmp	r2, r3
 800799c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80079a4:	d32e      	bcc.n	8007a04 <quorem+0x96>
 80079a6:	f04f 0a00 	mov.w	sl, #0
 80079aa:	46c4      	mov	ip, r8
 80079ac:	46ae      	mov	lr, r5
 80079ae:	46d3      	mov	fp, sl
 80079b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079b4:	b298      	uxth	r0, r3
 80079b6:	fb06 a000 	mla	r0, r6, r0, sl
 80079ba:	0c02      	lsrs	r2, r0, #16
 80079bc:	0c1b      	lsrs	r3, r3, #16
 80079be:	fb06 2303 	mla	r3, r6, r3, r2
 80079c2:	f8de 2000 	ldr.w	r2, [lr]
 80079c6:	b280      	uxth	r0, r0
 80079c8:	b292      	uxth	r2, r2
 80079ca:	1a12      	subs	r2, r2, r0
 80079cc:	445a      	add	r2, fp
 80079ce:	f8de 0000 	ldr.w	r0, [lr]
 80079d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079e0:	b292      	uxth	r2, r2
 80079e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079e6:	45e1      	cmp	r9, ip
 80079e8:	f84e 2b04 	str.w	r2, [lr], #4
 80079ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079f0:	d2de      	bcs.n	80079b0 <quorem+0x42>
 80079f2:	9b00      	ldr	r3, [sp, #0]
 80079f4:	58eb      	ldr	r3, [r5, r3]
 80079f6:	b92b      	cbnz	r3, 8007a04 <quorem+0x96>
 80079f8:	9b01      	ldr	r3, [sp, #4]
 80079fa:	3b04      	subs	r3, #4
 80079fc:	429d      	cmp	r5, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	d32f      	bcc.n	8007a62 <quorem+0xf4>
 8007a02:	613c      	str	r4, [r7, #16]
 8007a04:	4638      	mov	r0, r7
 8007a06:	f001 f979 	bl	8008cfc <__mcmp>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	db25      	blt.n	8007a5a <quorem+0xec>
 8007a0e:	4629      	mov	r1, r5
 8007a10:	2000      	movs	r0, #0
 8007a12:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a16:	f8d1 c000 	ldr.w	ip, [r1]
 8007a1a:	fa1f fe82 	uxth.w	lr, r2
 8007a1e:	fa1f f38c 	uxth.w	r3, ip
 8007a22:	eba3 030e 	sub.w	r3, r3, lr
 8007a26:	4403      	add	r3, r0
 8007a28:	0c12      	lsrs	r2, r2, #16
 8007a2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a38:	45c1      	cmp	r9, r8
 8007a3a:	f841 3b04 	str.w	r3, [r1], #4
 8007a3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a42:	d2e6      	bcs.n	8007a12 <quorem+0xa4>
 8007a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a4c:	b922      	cbnz	r2, 8007a58 <quorem+0xea>
 8007a4e:	3b04      	subs	r3, #4
 8007a50:	429d      	cmp	r5, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	d30b      	bcc.n	8007a6e <quorem+0x100>
 8007a56:	613c      	str	r4, [r7, #16]
 8007a58:	3601      	adds	r6, #1
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	b003      	add	sp, #12
 8007a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	3b04      	subs	r3, #4
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	d1cb      	bne.n	8007a02 <quorem+0x94>
 8007a6a:	3c01      	subs	r4, #1
 8007a6c:	e7c6      	b.n	80079fc <quorem+0x8e>
 8007a6e:	6812      	ldr	r2, [r2, #0]
 8007a70:	3b04      	subs	r3, #4
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	d1ef      	bne.n	8007a56 <quorem+0xe8>
 8007a76:	3c01      	subs	r4, #1
 8007a78:	e7ea      	b.n	8007a50 <quorem+0xe2>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	e7ee      	b.n	8007a5c <quorem+0xee>
	...

08007a80 <_dtoa_r>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	69c7      	ldr	r7, [r0, #28]
 8007a86:	b099      	sub	sp, #100	@ 0x64
 8007a88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a8c:	ec55 4b10 	vmov	r4, r5, d0
 8007a90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007a92:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a94:	4683      	mov	fp, r0
 8007a96:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a9a:	b97f      	cbnz	r7, 8007abc <_dtoa_r+0x3c>
 8007a9c:	2010      	movs	r0, #16
 8007a9e:	f000 fdfd 	bl	800869c <malloc>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007aa8:	b920      	cbnz	r0, 8007ab4 <_dtoa_r+0x34>
 8007aaa:	4ba7      	ldr	r3, [pc, #668]	@ (8007d48 <_dtoa_r+0x2c8>)
 8007aac:	21ef      	movs	r1, #239	@ 0xef
 8007aae:	48a7      	ldr	r0, [pc, #668]	@ (8007d4c <_dtoa_r+0x2cc>)
 8007ab0:	f001 fc5a 	bl	8009368 <__assert_func>
 8007ab4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ab8:	6007      	str	r7, [r0, #0]
 8007aba:	60c7      	str	r7, [r0, #12]
 8007abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ac0:	6819      	ldr	r1, [r3, #0]
 8007ac2:	b159      	cbz	r1, 8007adc <_dtoa_r+0x5c>
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	604a      	str	r2, [r1, #4]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4093      	lsls	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
 8007ace:	4658      	mov	r0, fp
 8007ad0:	f000 feda 	bl	8008888 <_Bfree>
 8007ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	1e2b      	subs	r3, r5, #0
 8007ade:	bfb9      	ittee	lt
 8007ae0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ae4:	9303      	strlt	r3, [sp, #12]
 8007ae6:	2300      	movge	r3, #0
 8007ae8:	6033      	strge	r3, [r6, #0]
 8007aea:	9f03      	ldr	r7, [sp, #12]
 8007aec:	4b98      	ldr	r3, [pc, #608]	@ (8007d50 <_dtoa_r+0x2d0>)
 8007aee:	bfbc      	itt	lt
 8007af0:	2201      	movlt	r2, #1
 8007af2:	6032      	strlt	r2, [r6, #0]
 8007af4:	43bb      	bics	r3, r7
 8007af6:	d112      	bne.n	8007b1e <_dtoa_r+0x9e>
 8007af8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007afa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b04:	4323      	orrs	r3, r4
 8007b06:	f000 854d 	beq.w	80085a4 <_dtoa_r+0xb24>
 8007b0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007d64 <_dtoa_r+0x2e4>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 854f 	beq.w	80085b4 <_dtoa_r+0xb34>
 8007b16:	f10a 0303 	add.w	r3, sl, #3
 8007b1a:	f000 bd49 	b.w	80085b0 <_dtoa_r+0xb30>
 8007b1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b22:	2200      	movs	r2, #0
 8007b24:	ec51 0b17 	vmov	r0, r1, d7
 8007b28:	2300      	movs	r3, #0
 8007b2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b2e:	f7f8 ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b32:	4680      	mov	r8, r0
 8007b34:	b158      	cbz	r0, 8007b4e <_dtoa_r+0xce>
 8007b36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b38:	2301      	movs	r3, #1
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b3e:	b113      	cbz	r3, 8007b46 <_dtoa_r+0xc6>
 8007b40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b42:	4b84      	ldr	r3, [pc, #528]	@ (8007d54 <_dtoa_r+0x2d4>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007d68 <_dtoa_r+0x2e8>
 8007b4a:	f000 bd33 	b.w	80085b4 <_dtoa_r+0xb34>
 8007b4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b52:	aa16      	add	r2, sp, #88	@ 0x58
 8007b54:	a917      	add	r1, sp, #92	@ 0x5c
 8007b56:	4658      	mov	r0, fp
 8007b58:	f001 f980 	bl	8008e5c <__d2b>
 8007b5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b60:	4681      	mov	r9, r0
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	d077      	beq.n	8007c56 <_dtoa_r+0x1d6>
 8007b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b80:	4619      	mov	r1, r3
 8007b82:	2200      	movs	r2, #0
 8007b84:	4b74      	ldr	r3, [pc, #464]	@ (8007d58 <_dtoa_r+0x2d8>)
 8007b86:	f7f8 fb87 	bl	8000298 <__aeabi_dsub>
 8007b8a:	a369      	add	r3, pc, #420	@ (adr r3, 8007d30 <_dtoa_r+0x2b0>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 fd3a 	bl	8000608 <__aeabi_dmul>
 8007b94:	a368      	add	r3, pc, #416	@ (adr r3, 8007d38 <_dtoa_r+0x2b8>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fb7f 	bl	800029c <__adddf3>
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	f7f8 fcc6 	bl	8000534 <__aeabi_i2d>
 8007ba8:	a365      	add	r3, pc, #404	@ (adr r3, 8007d40 <_dtoa_r+0x2c0>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f7f8 fd2b 	bl	8000608 <__aeabi_dmul>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 fb6f 	bl	800029c <__adddf3>
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	f7f8 ffd1 	bl	8000b68 <__aeabi_d2iz>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	4607      	mov	r7, r0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f7f8 ff8c 	bl	8000aec <__aeabi_dcmplt>
 8007bd4:	b140      	cbz	r0, 8007be8 <_dtoa_r+0x168>
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	f7f8 fcac 	bl	8000534 <__aeabi_i2d>
 8007bdc:	4622      	mov	r2, r4
 8007bde:	462b      	mov	r3, r5
 8007be0:	f7f8 ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007be4:	b900      	cbnz	r0, 8007be8 <_dtoa_r+0x168>
 8007be6:	3f01      	subs	r7, #1
 8007be8:	2f16      	cmp	r7, #22
 8007bea:	d851      	bhi.n	8007c90 <_dtoa_r+0x210>
 8007bec:	4b5b      	ldr	r3, [pc, #364]	@ (8007d5c <_dtoa_r+0x2dc>)
 8007bee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bfa:	f7f8 ff77 	bl	8000aec <__aeabi_dcmplt>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d048      	beq.n	8007c94 <_dtoa_r+0x214>
 8007c02:	3f01      	subs	r7, #1
 8007c04:	2300      	movs	r3, #0
 8007c06:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c0a:	1b9b      	subs	r3, r3, r6
 8007c0c:	1e5a      	subs	r2, r3, #1
 8007c0e:	bf44      	itt	mi
 8007c10:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c14:	2300      	movmi	r3, #0
 8007c16:	9208      	str	r2, [sp, #32]
 8007c18:	bf54      	ite	pl
 8007c1a:	f04f 0800 	movpl.w	r8, #0
 8007c1e:	9308      	strmi	r3, [sp, #32]
 8007c20:	2f00      	cmp	r7, #0
 8007c22:	db39      	blt.n	8007c98 <_dtoa_r+0x218>
 8007c24:	9b08      	ldr	r3, [sp, #32]
 8007c26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c28:	443b      	add	r3, r7
 8007c2a:	9308      	str	r3, [sp, #32]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c32:	2b09      	cmp	r3, #9
 8007c34:	d864      	bhi.n	8007d00 <_dtoa_r+0x280>
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	bfc4      	itt	gt
 8007c3a:	3b04      	subgt	r3, #4
 8007c3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c40:	f1a3 0302 	sub.w	r3, r3, #2
 8007c44:	bfcc      	ite	gt
 8007c46:	2400      	movgt	r4, #0
 8007c48:	2401      	movle	r4, #1
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d863      	bhi.n	8007d16 <_dtoa_r+0x296>
 8007c4e:	e8df f003 	tbb	[pc, r3]
 8007c52:	372a      	.short	0x372a
 8007c54:	5535      	.short	0x5535
 8007c56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007c5a:	441e      	add	r6, r3
 8007c5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	bfc1      	itttt	gt
 8007c64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c68:	409f      	lslgt	r7, r3
 8007c6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c72:	bfd6      	itet	le
 8007c74:	f1c3 0320 	rsble	r3, r3, #32
 8007c78:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c7c:	fa04 f003 	lslle.w	r0, r4, r3
 8007c80:	f7f8 fc48 	bl	8000514 <__aeabi_ui2d>
 8007c84:	2201      	movs	r2, #1
 8007c86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c8a:	3e01      	subs	r6, #1
 8007c8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007c8e:	e777      	b.n	8007b80 <_dtoa_r+0x100>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e7b8      	b.n	8007c06 <_dtoa_r+0x186>
 8007c94:	9012      	str	r0, [sp, #72]	@ 0x48
 8007c96:	e7b7      	b.n	8007c08 <_dtoa_r+0x188>
 8007c98:	427b      	negs	r3, r7
 8007c9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	eba8 0807 	sub.w	r8, r8, r7
 8007ca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ca4:	e7c4      	b.n	8007c30 <_dtoa_r+0x1b0>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	dc35      	bgt.n	8007d1c <_dtoa_r+0x29c>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	9307      	str	r3, [sp, #28]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cba:	e00b      	b.n	8007cd4 <_dtoa_r+0x254>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e7f3      	b.n	8007ca8 <_dtoa_r+0x228>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cc6:	18fb      	adds	r3, r7, r3
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	bfb8      	it	lt
 8007cd2:	2301      	movlt	r3, #1
 8007cd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007cd8:	2100      	movs	r1, #0
 8007cda:	2204      	movs	r2, #4
 8007cdc:	f102 0514 	add.w	r5, r2, #20
 8007ce0:	429d      	cmp	r5, r3
 8007ce2:	d91f      	bls.n	8007d24 <_dtoa_r+0x2a4>
 8007ce4:	6041      	str	r1, [r0, #4]
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	f000 fd8e 	bl	8008808 <_Balloc>
 8007cec:	4682      	mov	sl, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d13c      	bne.n	8007d6c <_dtoa_r+0x2ec>
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8007d60 <_dtoa_r+0x2e0>)
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007cfa:	e6d8      	b.n	8007aae <_dtoa_r+0x2e>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e7e0      	b.n	8007cc2 <_dtoa_r+0x242>
 8007d00:	2401      	movs	r4, #1
 8007d02:	2300      	movs	r3, #0
 8007d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d08:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	9307      	str	r3, [sp, #28]
 8007d10:	2200      	movs	r2, #0
 8007d12:	2312      	movs	r3, #18
 8007d14:	e7d0      	b.n	8007cb8 <_dtoa_r+0x238>
 8007d16:	2301      	movs	r3, #1
 8007d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d1a:	e7f5      	b.n	8007d08 <_dtoa_r+0x288>
 8007d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	9307      	str	r3, [sp, #28]
 8007d22:	e7d7      	b.n	8007cd4 <_dtoa_r+0x254>
 8007d24:	3101      	adds	r1, #1
 8007d26:	0052      	lsls	r2, r2, #1
 8007d28:	e7d8      	b.n	8007cdc <_dtoa_r+0x25c>
 8007d2a:	bf00      	nop
 8007d2c:	f3af 8000 	nop.w
 8007d30:	636f4361 	.word	0x636f4361
 8007d34:	3fd287a7 	.word	0x3fd287a7
 8007d38:	8b60c8b3 	.word	0x8b60c8b3
 8007d3c:	3fc68a28 	.word	0x3fc68a28
 8007d40:	509f79fb 	.word	0x509f79fb
 8007d44:	3fd34413 	.word	0x3fd34413
 8007d48:	08009ab1 	.word	0x08009ab1
 8007d4c:	08009ac8 	.word	0x08009ac8
 8007d50:	7ff00000 	.word	0x7ff00000
 8007d54:	08009a81 	.word	0x08009a81
 8007d58:	3ff80000 	.word	0x3ff80000
 8007d5c:	08009bc0 	.word	0x08009bc0
 8007d60:	08009b20 	.word	0x08009b20
 8007d64:	08009aad 	.word	0x08009aad
 8007d68:	08009a80 	.word	0x08009a80
 8007d6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d70:	6018      	str	r0, [r3, #0]
 8007d72:	9b07      	ldr	r3, [sp, #28]
 8007d74:	2b0e      	cmp	r3, #14
 8007d76:	f200 80a4 	bhi.w	8007ec2 <_dtoa_r+0x442>
 8007d7a:	2c00      	cmp	r4, #0
 8007d7c:	f000 80a1 	beq.w	8007ec2 <_dtoa_r+0x442>
 8007d80:	2f00      	cmp	r7, #0
 8007d82:	dd33      	ble.n	8007dec <_dtoa_r+0x36c>
 8007d84:	4bad      	ldr	r3, [pc, #692]	@ (800803c <_dtoa_r+0x5bc>)
 8007d86:	f007 020f 	and.w	r2, r7, #15
 8007d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d8e:	ed93 7b00 	vldr	d7, [r3]
 8007d92:	05f8      	lsls	r0, r7, #23
 8007d94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007d98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d9c:	d516      	bpl.n	8007dcc <_dtoa_r+0x34c>
 8007d9e:	4ba8      	ldr	r3, [pc, #672]	@ (8008040 <_dtoa_r+0x5c0>)
 8007da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007da4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007da8:	f7f8 fd58 	bl	800085c <__aeabi_ddiv>
 8007dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db0:	f004 040f 	and.w	r4, r4, #15
 8007db4:	2603      	movs	r6, #3
 8007db6:	4da2      	ldr	r5, [pc, #648]	@ (8008040 <_dtoa_r+0x5c0>)
 8007db8:	b954      	cbnz	r4, 8007dd0 <_dtoa_r+0x350>
 8007dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc2:	f7f8 fd4b 	bl	800085c <__aeabi_ddiv>
 8007dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dca:	e028      	b.n	8007e1e <_dtoa_r+0x39e>
 8007dcc:	2602      	movs	r6, #2
 8007dce:	e7f2      	b.n	8007db6 <_dtoa_r+0x336>
 8007dd0:	07e1      	lsls	r1, r4, #31
 8007dd2:	d508      	bpl.n	8007de6 <_dtoa_r+0x366>
 8007dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ddc:	f7f8 fc14 	bl	8000608 <__aeabi_dmul>
 8007de0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007de4:	3601      	adds	r6, #1
 8007de6:	1064      	asrs	r4, r4, #1
 8007de8:	3508      	adds	r5, #8
 8007dea:	e7e5      	b.n	8007db8 <_dtoa_r+0x338>
 8007dec:	f000 80d2 	beq.w	8007f94 <_dtoa_r+0x514>
 8007df0:	427c      	negs	r4, r7
 8007df2:	4b92      	ldr	r3, [pc, #584]	@ (800803c <_dtoa_r+0x5bc>)
 8007df4:	4d92      	ldr	r5, [pc, #584]	@ (8008040 <_dtoa_r+0x5c0>)
 8007df6:	f004 020f 	and.w	r2, r4, #15
 8007dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e06:	f7f8 fbff 	bl	8000608 <__aeabi_dmul>
 8007e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e0e:	1124      	asrs	r4, r4, #4
 8007e10:	2300      	movs	r3, #0
 8007e12:	2602      	movs	r6, #2
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	f040 80b2 	bne.w	8007f7e <_dtoa_r+0x4fe>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1d3      	bne.n	8007dc6 <_dtoa_r+0x346>
 8007e1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 80b7 	beq.w	8007f98 <_dtoa_r+0x518>
 8007e2a:	4b86      	ldr	r3, [pc, #536]	@ (8008044 <_dtoa_r+0x5c4>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 fe5b 	bl	8000aec <__aeabi_dcmplt>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	f000 80ae 	beq.w	8007f98 <_dtoa_r+0x518>
 8007e3c:	9b07      	ldr	r3, [sp, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 80aa 	beq.w	8007f98 <_dtoa_r+0x518>
 8007e44:	9b00      	ldr	r3, [sp, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd37      	ble.n	8007eba <_dtoa_r+0x43a>
 8007e4a:	1e7b      	subs	r3, r7, #1
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4b7d      	ldr	r3, [pc, #500]	@ (8008048 <_dtoa_r+0x5c8>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	4629      	mov	r1, r5
 8007e56:	f7f8 fbd7 	bl	8000608 <__aeabi_dmul>
 8007e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e5e:	9c00      	ldr	r4, [sp, #0]
 8007e60:	3601      	adds	r6, #1
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7f8 fb66 	bl	8000534 <__aeabi_i2d>
 8007e68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e6c:	f7f8 fbcc 	bl	8000608 <__aeabi_dmul>
 8007e70:	4b76      	ldr	r3, [pc, #472]	@ (800804c <_dtoa_r+0x5cc>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	f7f8 fa12 	bl	800029c <__adddf3>
 8007e78:	4605      	mov	r5, r0
 8007e7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e7e:	2c00      	cmp	r4, #0
 8007e80:	f040 808d 	bne.w	8007f9e <_dtoa_r+0x51e>
 8007e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e88:	4b71      	ldr	r3, [pc, #452]	@ (8008050 <_dtoa_r+0x5d0>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f7f8 fa04 	bl	8000298 <__aeabi_dsub>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e98:	462a      	mov	r2, r5
 8007e9a:	4633      	mov	r3, r6
 8007e9c:	f7f8 fe44 	bl	8000b28 <__aeabi_dcmpgt>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	f040 828b 	bne.w	80083bc <_dtoa_r+0x93c>
 8007ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eaa:	462a      	mov	r2, r5
 8007eac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007eb0:	f7f8 fe1c 	bl	8000aec <__aeabi_dcmplt>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f040 8128 	bne.w	800810a <_dtoa_r+0x68a>
 8007eba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ebe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ec2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f2c0 815a 	blt.w	800817e <_dtoa_r+0x6fe>
 8007eca:	2f0e      	cmp	r7, #14
 8007ecc:	f300 8157 	bgt.w	800817e <_dtoa_r+0x6fe>
 8007ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800803c <_dtoa_r+0x5bc>)
 8007ed2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ed6:	ed93 7b00 	vldr	d7, [r3]
 8007eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	ed8d 7b00 	vstr	d7, [sp]
 8007ee2:	da03      	bge.n	8007eec <_dtoa_r+0x46c>
 8007ee4:	9b07      	ldr	r3, [sp, #28]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f340 8101 	ble.w	80080ee <_dtoa_r+0x66e>
 8007eec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ef0:	4656      	mov	r6, sl
 8007ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	4629      	mov	r1, r5
 8007efa:	f7f8 fcaf 	bl	800085c <__aeabi_ddiv>
 8007efe:	f7f8 fe33 	bl	8000b68 <__aeabi_d2iz>
 8007f02:	4680      	mov	r8, r0
 8007f04:	f7f8 fb16 	bl	8000534 <__aeabi_i2d>
 8007f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f0c:	f7f8 fb7c 	bl	8000608 <__aeabi_dmul>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4620      	mov	r0, r4
 8007f16:	4629      	mov	r1, r5
 8007f18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f1c:	f7f8 f9bc 	bl	8000298 <__aeabi_dsub>
 8007f20:	f806 4b01 	strb.w	r4, [r6], #1
 8007f24:	9d07      	ldr	r5, [sp, #28]
 8007f26:	eba6 040a 	sub.w	r4, r6, sl
 8007f2a:	42a5      	cmp	r5, r4
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	f040 8117 	bne.w	8008162 <_dtoa_r+0x6e2>
 8007f34:	f7f8 f9b2 	bl	800029c <__adddf3>
 8007f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	460d      	mov	r5, r1
 8007f40:	f7f8 fdf2 	bl	8000b28 <__aeabi_dcmpgt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f040 80f9 	bne.w	800813c <_dtoa_r+0x6bc>
 8007f4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 fdc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f56:	b118      	cbz	r0, 8007f60 <_dtoa_r+0x4e0>
 8007f58:	f018 0f01 	tst.w	r8, #1
 8007f5c:	f040 80ee 	bne.w	800813c <_dtoa_r+0x6bc>
 8007f60:	4649      	mov	r1, r9
 8007f62:	4658      	mov	r0, fp
 8007f64:	f000 fc90 	bl	8008888 <_Bfree>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	7033      	strb	r3, [r6, #0]
 8007f6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f6e:	3701      	adds	r7, #1
 8007f70:	601f      	str	r7, [r3, #0]
 8007f72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 831d 	beq.w	80085b4 <_dtoa_r+0xb34>
 8007f7a:	601e      	str	r6, [r3, #0]
 8007f7c:	e31a      	b.n	80085b4 <_dtoa_r+0xb34>
 8007f7e:	07e2      	lsls	r2, r4, #31
 8007f80:	d505      	bpl.n	8007f8e <_dtoa_r+0x50e>
 8007f82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f86:	f7f8 fb3f 	bl	8000608 <__aeabi_dmul>
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	1064      	asrs	r4, r4, #1
 8007f90:	3508      	adds	r5, #8
 8007f92:	e73f      	b.n	8007e14 <_dtoa_r+0x394>
 8007f94:	2602      	movs	r6, #2
 8007f96:	e742      	b.n	8007e1e <_dtoa_r+0x39e>
 8007f98:	9c07      	ldr	r4, [sp, #28]
 8007f9a:	9704      	str	r7, [sp, #16]
 8007f9c:	e761      	b.n	8007e62 <_dtoa_r+0x3e2>
 8007f9e:	4b27      	ldr	r3, [pc, #156]	@ (800803c <_dtoa_r+0x5bc>)
 8007fa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007faa:	4454      	add	r4, sl
 8007fac:	2900      	cmp	r1, #0
 8007fae:	d053      	beq.n	8008058 <_dtoa_r+0x5d8>
 8007fb0:	4928      	ldr	r1, [pc, #160]	@ (8008054 <_dtoa_r+0x5d4>)
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	f7f8 fc52 	bl	800085c <__aeabi_ddiv>
 8007fb8:	4633      	mov	r3, r6
 8007fba:	462a      	mov	r2, r5
 8007fbc:	f7f8 f96c 	bl	8000298 <__aeabi_dsub>
 8007fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fc4:	4656      	mov	r6, sl
 8007fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fca:	f7f8 fdcd 	bl	8000b68 <__aeabi_d2iz>
 8007fce:	4605      	mov	r5, r0
 8007fd0:	f7f8 fab0 	bl	8000534 <__aeabi_i2d>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fdc:	f7f8 f95c 	bl	8000298 <__aeabi_dsub>
 8007fe0:	3530      	adds	r5, #48	@ 0x30
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fea:	f806 5b01 	strb.w	r5, [r6], #1
 8007fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ff2:	f7f8 fd7b 	bl	8000aec <__aeabi_dcmplt>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d171      	bne.n	80080de <_dtoa_r+0x65e>
 8007ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ffe:	4911      	ldr	r1, [pc, #68]	@ (8008044 <_dtoa_r+0x5c4>)
 8008000:	2000      	movs	r0, #0
 8008002:	f7f8 f949 	bl	8000298 <__aeabi_dsub>
 8008006:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800800a:	f7f8 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800800e:	2800      	cmp	r0, #0
 8008010:	f040 8095 	bne.w	800813e <_dtoa_r+0x6be>
 8008014:	42a6      	cmp	r6, r4
 8008016:	f43f af50 	beq.w	8007eba <_dtoa_r+0x43a>
 800801a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800801e:	4b0a      	ldr	r3, [pc, #40]	@ (8008048 <_dtoa_r+0x5c8>)
 8008020:	2200      	movs	r2, #0
 8008022:	f7f8 faf1 	bl	8000608 <__aeabi_dmul>
 8008026:	4b08      	ldr	r3, [pc, #32]	@ (8008048 <_dtoa_r+0x5c8>)
 8008028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800802c:	2200      	movs	r2, #0
 800802e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008032:	f7f8 fae9 	bl	8000608 <__aeabi_dmul>
 8008036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800803a:	e7c4      	b.n	8007fc6 <_dtoa_r+0x546>
 800803c:	08009bc0 	.word	0x08009bc0
 8008040:	08009b98 	.word	0x08009b98
 8008044:	3ff00000 	.word	0x3ff00000
 8008048:	40240000 	.word	0x40240000
 800804c:	401c0000 	.word	0x401c0000
 8008050:	40140000 	.word	0x40140000
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	f7f8 fad4 	bl	8000608 <__aeabi_dmul>
 8008060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008064:	9415      	str	r4, [sp, #84]	@ 0x54
 8008066:	4656      	mov	r6, sl
 8008068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800806c:	f7f8 fd7c 	bl	8000b68 <__aeabi_d2iz>
 8008070:	4605      	mov	r5, r0
 8008072:	f7f8 fa5f 	bl	8000534 <__aeabi_i2d>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800807e:	f7f8 f90b 	bl	8000298 <__aeabi_dsub>
 8008082:	3530      	adds	r5, #48	@ 0x30
 8008084:	f806 5b01 	strb.w	r5, [r6], #1
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	42a6      	cmp	r6, r4
 800808e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008092:	f04f 0200 	mov.w	r2, #0
 8008096:	d124      	bne.n	80080e2 <_dtoa_r+0x662>
 8008098:	4bac      	ldr	r3, [pc, #688]	@ (800834c <_dtoa_r+0x8cc>)
 800809a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800809e:	f7f8 f8fd 	bl	800029c <__adddf3>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080aa:	f7f8 fd3d 	bl	8000b28 <__aeabi_dcmpgt>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d145      	bne.n	800813e <_dtoa_r+0x6be>
 80080b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080b6:	49a5      	ldr	r1, [pc, #660]	@ (800834c <_dtoa_r+0x8cc>)
 80080b8:	2000      	movs	r0, #0
 80080ba:	f7f8 f8ed 	bl	8000298 <__aeabi_dsub>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c6:	f7f8 fd11 	bl	8000aec <__aeabi_dcmplt>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f43f aef5 	beq.w	8007eba <_dtoa_r+0x43a>
 80080d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80080d2:	1e73      	subs	r3, r6, #1
 80080d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80080d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080da:	2b30      	cmp	r3, #48	@ 0x30
 80080dc:	d0f8      	beq.n	80080d0 <_dtoa_r+0x650>
 80080de:	9f04      	ldr	r7, [sp, #16]
 80080e0:	e73e      	b.n	8007f60 <_dtoa_r+0x4e0>
 80080e2:	4b9b      	ldr	r3, [pc, #620]	@ (8008350 <_dtoa_r+0x8d0>)
 80080e4:	f7f8 fa90 	bl	8000608 <__aeabi_dmul>
 80080e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ec:	e7bc      	b.n	8008068 <_dtoa_r+0x5e8>
 80080ee:	d10c      	bne.n	800810a <_dtoa_r+0x68a>
 80080f0:	4b98      	ldr	r3, [pc, #608]	@ (8008354 <_dtoa_r+0x8d4>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080f8:	f7f8 fa86 	bl	8000608 <__aeabi_dmul>
 80080fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008100:	f7f8 fd08 	bl	8000b14 <__aeabi_dcmpge>
 8008104:	2800      	cmp	r0, #0
 8008106:	f000 8157 	beq.w	80083b8 <_dtoa_r+0x938>
 800810a:	2400      	movs	r4, #0
 800810c:	4625      	mov	r5, r4
 800810e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008110:	43db      	mvns	r3, r3
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	4656      	mov	r6, sl
 8008116:	2700      	movs	r7, #0
 8008118:	4621      	mov	r1, r4
 800811a:	4658      	mov	r0, fp
 800811c:	f000 fbb4 	bl	8008888 <_Bfree>
 8008120:	2d00      	cmp	r5, #0
 8008122:	d0dc      	beq.n	80080de <_dtoa_r+0x65e>
 8008124:	b12f      	cbz	r7, 8008132 <_dtoa_r+0x6b2>
 8008126:	42af      	cmp	r7, r5
 8008128:	d003      	beq.n	8008132 <_dtoa_r+0x6b2>
 800812a:	4639      	mov	r1, r7
 800812c:	4658      	mov	r0, fp
 800812e:	f000 fbab 	bl	8008888 <_Bfree>
 8008132:	4629      	mov	r1, r5
 8008134:	4658      	mov	r0, fp
 8008136:	f000 fba7 	bl	8008888 <_Bfree>
 800813a:	e7d0      	b.n	80080de <_dtoa_r+0x65e>
 800813c:	9704      	str	r7, [sp, #16]
 800813e:	4633      	mov	r3, r6
 8008140:	461e      	mov	r6, r3
 8008142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008146:	2a39      	cmp	r2, #57	@ 0x39
 8008148:	d107      	bne.n	800815a <_dtoa_r+0x6da>
 800814a:	459a      	cmp	sl, r3
 800814c:	d1f8      	bne.n	8008140 <_dtoa_r+0x6c0>
 800814e:	9a04      	ldr	r2, [sp, #16]
 8008150:	3201      	adds	r2, #1
 8008152:	9204      	str	r2, [sp, #16]
 8008154:	2230      	movs	r2, #48	@ 0x30
 8008156:	f88a 2000 	strb.w	r2, [sl]
 800815a:	781a      	ldrb	r2, [r3, #0]
 800815c:	3201      	adds	r2, #1
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	e7bd      	b.n	80080de <_dtoa_r+0x65e>
 8008162:	4b7b      	ldr	r3, [pc, #492]	@ (8008350 <_dtoa_r+0x8d0>)
 8008164:	2200      	movs	r2, #0
 8008166:	f7f8 fa4f 	bl	8000608 <__aeabi_dmul>
 800816a:	2200      	movs	r2, #0
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	460d      	mov	r5, r1
 8008172:	f7f8 fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008176:	2800      	cmp	r0, #0
 8008178:	f43f aebb 	beq.w	8007ef2 <_dtoa_r+0x472>
 800817c:	e6f0      	b.n	8007f60 <_dtoa_r+0x4e0>
 800817e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008180:	2a00      	cmp	r2, #0
 8008182:	f000 80db 	beq.w	800833c <_dtoa_r+0x8bc>
 8008186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008188:	2a01      	cmp	r2, #1
 800818a:	f300 80bf 	bgt.w	800830c <_dtoa_r+0x88c>
 800818e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008190:	2a00      	cmp	r2, #0
 8008192:	f000 80b7 	beq.w	8008304 <_dtoa_r+0x884>
 8008196:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800819a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800819c:	4646      	mov	r6, r8
 800819e:	9a08      	ldr	r2, [sp, #32]
 80081a0:	2101      	movs	r1, #1
 80081a2:	441a      	add	r2, r3
 80081a4:	4658      	mov	r0, fp
 80081a6:	4498      	add	r8, r3
 80081a8:	9208      	str	r2, [sp, #32]
 80081aa:	f000 fc21 	bl	80089f0 <__i2b>
 80081ae:	4605      	mov	r5, r0
 80081b0:	b15e      	cbz	r6, 80081ca <_dtoa_r+0x74a>
 80081b2:	9b08      	ldr	r3, [sp, #32]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd08      	ble.n	80081ca <_dtoa_r+0x74a>
 80081b8:	42b3      	cmp	r3, r6
 80081ba:	9a08      	ldr	r2, [sp, #32]
 80081bc:	bfa8      	it	ge
 80081be:	4633      	movge	r3, r6
 80081c0:	eba8 0803 	sub.w	r8, r8, r3
 80081c4:	1af6      	subs	r6, r6, r3
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	9308      	str	r3, [sp, #32]
 80081ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081cc:	b1f3      	cbz	r3, 800820c <_dtoa_r+0x78c>
 80081ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 80b7 	beq.w	8008344 <_dtoa_r+0x8c4>
 80081d6:	b18c      	cbz	r4, 80081fc <_dtoa_r+0x77c>
 80081d8:	4629      	mov	r1, r5
 80081da:	4622      	mov	r2, r4
 80081dc:	4658      	mov	r0, fp
 80081de:	f000 fcc7 	bl	8008b70 <__pow5mult>
 80081e2:	464a      	mov	r2, r9
 80081e4:	4601      	mov	r1, r0
 80081e6:	4605      	mov	r5, r0
 80081e8:	4658      	mov	r0, fp
 80081ea:	f000 fc17 	bl	8008a1c <__multiply>
 80081ee:	4649      	mov	r1, r9
 80081f0:	9004      	str	r0, [sp, #16]
 80081f2:	4658      	mov	r0, fp
 80081f4:	f000 fb48 	bl	8008888 <_Bfree>
 80081f8:	9b04      	ldr	r3, [sp, #16]
 80081fa:	4699      	mov	r9, r3
 80081fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081fe:	1b1a      	subs	r2, r3, r4
 8008200:	d004      	beq.n	800820c <_dtoa_r+0x78c>
 8008202:	4649      	mov	r1, r9
 8008204:	4658      	mov	r0, fp
 8008206:	f000 fcb3 	bl	8008b70 <__pow5mult>
 800820a:	4681      	mov	r9, r0
 800820c:	2101      	movs	r1, #1
 800820e:	4658      	mov	r0, fp
 8008210:	f000 fbee 	bl	80089f0 <__i2b>
 8008214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008216:	4604      	mov	r4, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 81cf 	beq.w	80085bc <_dtoa_r+0xb3c>
 800821e:	461a      	mov	r2, r3
 8008220:	4601      	mov	r1, r0
 8008222:	4658      	mov	r0, fp
 8008224:	f000 fca4 	bl	8008b70 <__pow5mult>
 8008228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822a:	2b01      	cmp	r3, #1
 800822c:	4604      	mov	r4, r0
 800822e:	f300 8095 	bgt.w	800835c <_dtoa_r+0x8dc>
 8008232:	9b02      	ldr	r3, [sp, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f040 8087 	bne.w	8008348 <_dtoa_r+0x8c8>
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008240:	2b00      	cmp	r3, #0
 8008242:	f040 8089 	bne.w	8008358 <_dtoa_r+0x8d8>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800824c:	0d1b      	lsrs	r3, r3, #20
 800824e:	051b      	lsls	r3, r3, #20
 8008250:	b12b      	cbz	r3, 800825e <_dtoa_r+0x7de>
 8008252:	9b08      	ldr	r3, [sp, #32]
 8008254:	3301      	adds	r3, #1
 8008256:	9308      	str	r3, [sp, #32]
 8008258:	f108 0801 	add.w	r8, r8, #1
 800825c:	2301      	movs	r3, #1
 800825e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 81b0 	beq.w	80085c8 <_dtoa_r+0xb48>
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800826e:	6918      	ldr	r0, [r3, #16]
 8008270:	f000 fb72 	bl	8008958 <__hi0bits>
 8008274:	f1c0 0020 	rsb	r0, r0, #32
 8008278:	9b08      	ldr	r3, [sp, #32]
 800827a:	4418      	add	r0, r3
 800827c:	f010 001f 	ands.w	r0, r0, #31
 8008280:	d077      	beq.n	8008372 <_dtoa_r+0x8f2>
 8008282:	f1c0 0320 	rsb	r3, r0, #32
 8008286:	2b04      	cmp	r3, #4
 8008288:	dd6b      	ble.n	8008362 <_dtoa_r+0x8e2>
 800828a:	9b08      	ldr	r3, [sp, #32]
 800828c:	f1c0 001c 	rsb	r0, r0, #28
 8008290:	4403      	add	r3, r0
 8008292:	4480      	add	r8, r0
 8008294:	4406      	add	r6, r0
 8008296:	9308      	str	r3, [sp, #32]
 8008298:	f1b8 0f00 	cmp.w	r8, #0
 800829c:	dd05      	ble.n	80082aa <_dtoa_r+0x82a>
 800829e:	4649      	mov	r1, r9
 80082a0:	4642      	mov	r2, r8
 80082a2:	4658      	mov	r0, fp
 80082a4:	f000 fcbe 	bl	8008c24 <__lshift>
 80082a8:	4681      	mov	r9, r0
 80082aa:	9b08      	ldr	r3, [sp, #32]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dd05      	ble.n	80082bc <_dtoa_r+0x83c>
 80082b0:	4621      	mov	r1, r4
 80082b2:	461a      	mov	r2, r3
 80082b4:	4658      	mov	r0, fp
 80082b6:	f000 fcb5 	bl	8008c24 <__lshift>
 80082ba:	4604      	mov	r4, r0
 80082bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d059      	beq.n	8008376 <_dtoa_r+0x8f6>
 80082c2:	4621      	mov	r1, r4
 80082c4:	4648      	mov	r0, r9
 80082c6:	f000 fd19 	bl	8008cfc <__mcmp>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	da53      	bge.n	8008376 <_dtoa_r+0x8f6>
 80082ce:	1e7b      	subs	r3, r7, #1
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	4649      	mov	r1, r9
 80082d4:	2300      	movs	r3, #0
 80082d6:	220a      	movs	r2, #10
 80082d8:	4658      	mov	r0, fp
 80082da:	f000 faf7 	bl	80088cc <__multadd>
 80082de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082e0:	4681      	mov	r9, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 8172 	beq.w	80085cc <_dtoa_r+0xb4c>
 80082e8:	2300      	movs	r3, #0
 80082ea:	4629      	mov	r1, r5
 80082ec:	220a      	movs	r2, #10
 80082ee:	4658      	mov	r0, fp
 80082f0:	f000 faec 	bl	80088cc <__multadd>
 80082f4:	9b00      	ldr	r3, [sp, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	4605      	mov	r5, r0
 80082fa:	dc67      	bgt.n	80083cc <_dtoa_r+0x94c>
 80082fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082fe:	2b02      	cmp	r3, #2
 8008300:	dc41      	bgt.n	8008386 <_dtoa_r+0x906>
 8008302:	e063      	b.n	80083cc <_dtoa_r+0x94c>
 8008304:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008306:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800830a:	e746      	b.n	800819a <_dtoa_r+0x71a>
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	1e5c      	subs	r4, r3, #1
 8008310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008312:	42a3      	cmp	r3, r4
 8008314:	bfbf      	itttt	lt
 8008316:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008318:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800831a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800831c:	1ae3      	sublt	r3, r4, r3
 800831e:	bfb4      	ite	lt
 8008320:	18d2      	addlt	r2, r2, r3
 8008322:	1b1c      	subge	r4, r3, r4
 8008324:	9b07      	ldr	r3, [sp, #28]
 8008326:	bfbc      	itt	lt
 8008328:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800832a:	2400      	movlt	r4, #0
 800832c:	2b00      	cmp	r3, #0
 800832e:	bfb5      	itete	lt
 8008330:	eba8 0603 	sublt.w	r6, r8, r3
 8008334:	9b07      	ldrge	r3, [sp, #28]
 8008336:	2300      	movlt	r3, #0
 8008338:	4646      	movge	r6, r8
 800833a:	e730      	b.n	800819e <_dtoa_r+0x71e>
 800833c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800833e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008340:	4646      	mov	r6, r8
 8008342:	e735      	b.n	80081b0 <_dtoa_r+0x730>
 8008344:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008346:	e75c      	b.n	8008202 <_dtoa_r+0x782>
 8008348:	2300      	movs	r3, #0
 800834a:	e788      	b.n	800825e <_dtoa_r+0x7de>
 800834c:	3fe00000 	.word	0x3fe00000
 8008350:	40240000 	.word	0x40240000
 8008354:	40140000 	.word	0x40140000
 8008358:	9b02      	ldr	r3, [sp, #8]
 800835a:	e780      	b.n	800825e <_dtoa_r+0x7de>
 800835c:	2300      	movs	r3, #0
 800835e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008360:	e782      	b.n	8008268 <_dtoa_r+0x7e8>
 8008362:	d099      	beq.n	8008298 <_dtoa_r+0x818>
 8008364:	9a08      	ldr	r2, [sp, #32]
 8008366:	331c      	adds	r3, #28
 8008368:	441a      	add	r2, r3
 800836a:	4498      	add	r8, r3
 800836c:	441e      	add	r6, r3
 800836e:	9208      	str	r2, [sp, #32]
 8008370:	e792      	b.n	8008298 <_dtoa_r+0x818>
 8008372:	4603      	mov	r3, r0
 8008374:	e7f6      	b.n	8008364 <_dtoa_r+0x8e4>
 8008376:	9b07      	ldr	r3, [sp, #28]
 8008378:	9704      	str	r7, [sp, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dc20      	bgt.n	80083c0 <_dtoa_r+0x940>
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008382:	2b02      	cmp	r3, #2
 8008384:	dd1e      	ble.n	80083c4 <_dtoa_r+0x944>
 8008386:	9b00      	ldr	r3, [sp, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f47f aec0 	bne.w	800810e <_dtoa_r+0x68e>
 800838e:	4621      	mov	r1, r4
 8008390:	2205      	movs	r2, #5
 8008392:	4658      	mov	r0, fp
 8008394:	f000 fa9a 	bl	80088cc <__multadd>
 8008398:	4601      	mov	r1, r0
 800839a:	4604      	mov	r4, r0
 800839c:	4648      	mov	r0, r9
 800839e:	f000 fcad 	bl	8008cfc <__mcmp>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	f77f aeb3 	ble.w	800810e <_dtoa_r+0x68e>
 80083a8:	4656      	mov	r6, sl
 80083aa:	2331      	movs	r3, #49	@ 0x31
 80083ac:	f806 3b01 	strb.w	r3, [r6], #1
 80083b0:	9b04      	ldr	r3, [sp, #16]
 80083b2:	3301      	adds	r3, #1
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	e6ae      	b.n	8008116 <_dtoa_r+0x696>
 80083b8:	9c07      	ldr	r4, [sp, #28]
 80083ba:	9704      	str	r7, [sp, #16]
 80083bc:	4625      	mov	r5, r4
 80083be:	e7f3      	b.n	80083a8 <_dtoa_r+0x928>
 80083c0:	9b07      	ldr	r3, [sp, #28]
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 8104 	beq.w	80085d4 <_dtoa_r+0xb54>
 80083cc:	2e00      	cmp	r6, #0
 80083ce:	dd05      	ble.n	80083dc <_dtoa_r+0x95c>
 80083d0:	4629      	mov	r1, r5
 80083d2:	4632      	mov	r2, r6
 80083d4:	4658      	mov	r0, fp
 80083d6:	f000 fc25 	bl	8008c24 <__lshift>
 80083da:	4605      	mov	r5, r0
 80083dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d05a      	beq.n	8008498 <_dtoa_r+0xa18>
 80083e2:	6869      	ldr	r1, [r5, #4]
 80083e4:	4658      	mov	r0, fp
 80083e6:	f000 fa0f 	bl	8008808 <_Balloc>
 80083ea:	4606      	mov	r6, r0
 80083ec:	b928      	cbnz	r0, 80083fa <_dtoa_r+0x97a>
 80083ee:	4b84      	ldr	r3, [pc, #528]	@ (8008600 <_dtoa_r+0xb80>)
 80083f0:	4602      	mov	r2, r0
 80083f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083f6:	f7ff bb5a 	b.w	8007aae <_dtoa_r+0x2e>
 80083fa:	692a      	ldr	r2, [r5, #16]
 80083fc:	3202      	adds	r2, #2
 80083fe:	0092      	lsls	r2, r2, #2
 8008400:	f105 010c 	add.w	r1, r5, #12
 8008404:	300c      	adds	r0, #12
 8008406:	f7ff faa4 	bl	8007952 <memcpy>
 800840a:	2201      	movs	r2, #1
 800840c:	4631      	mov	r1, r6
 800840e:	4658      	mov	r0, fp
 8008410:	f000 fc08 	bl	8008c24 <__lshift>
 8008414:	f10a 0301 	add.w	r3, sl, #1
 8008418:	9307      	str	r3, [sp, #28]
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	4453      	add	r3, sl
 800841e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	462f      	mov	r7, r5
 8008428:	930a      	str	r3, [sp, #40]	@ 0x28
 800842a:	4605      	mov	r5, r0
 800842c:	9b07      	ldr	r3, [sp, #28]
 800842e:	4621      	mov	r1, r4
 8008430:	3b01      	subs	r3, #1
 8008432:	4648      	mov	r0, r9
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	f7ff fa9a 	bl	800796e <quorem>
 800843a:	4639      	mov	r1, r7
 800843c:	9002      	str	r0, [sp, #8]
 800843e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008442:	4648      	mov	r0, r9
 8008444:	f000 fc5a 	bl	8008cfc <__mcmp>
 8008448:	462a      	mov	r2, r5
 800844a:	9008      	str	r0, [sp, #32]
 800844c:	4621      	mov	r1, r4
 800844e:	4658      	mov	r0, fp
 8008450:	f000 fc70 	bl	8008d34 <__mdiff>
 8008454:	68c2      	ldr	r2, [r0, #12]
 8008456:	4606      	mov	r6, r0
 8008458:	bb02      	cbnz	r2, 800849c <_dtoa_r+0xa1c>
 800845a:	4601      	mov	r1, r0
 800845c:	4648      	mov	r0, r9
 800845e:	f000 fc4d 	bl	8008cfc <__mcmp>
 8008462:	4602      	mov	r2, r0
 8008464:	4631      	mov	r1, r6
 8008466:	4658      	mov	r0, fp
 8008468:	920e      	str	r2, [sp, #56]	@ 0x38
 800846a:	f000 fa0d 	bl	8008888 <_Bfree>
 800846e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008470:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008472:	9e07      	ldr	r6, [sp, #28]
 8008474:	ea43 0102 	orr.w	r1, r3, r2
 8008478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800847a:	4319      	orrs	r1, r3
 800847c:	d110      	bne.n	80084a0 <_dtoa_r+0xa20>
 800847e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008482:	d029      	beq.n	80084d8 <_dtoa_r+0xa58>
 8008484:	9b08      	ldr	r3, [sp, #32]
 8008486:	2b00      	cmp	r3, #0
 8008488:	dd02      	ble.n	8008490 <_dtoa_r+0xa10>
 800848a:	9b02      	ldr	r3, [sp, #8]
 800848c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008490:	9b00      	ldr	r3, [sp, #0]
 8008492:	f883 8000 	strb.w	r8, [r3]
 8008496:	e63f      	b.n	8008118 <_dtoa_r+0x698>
 8008498:	4628      	mov	r0, r5
 800849a:	e7bb      	b.n	8008414 <_dtoa_r+0x994>
 800849c:	2201      	movs	r2, #1
 800849e:	e7e1      	b.n	8008464 <_dtoa_r+0x9e4>
 80084a0:	9b08      	ldr	r3, [sp, #32]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	db04      	blt.n	80084b0 <_dtoa_r+0xa30>
 80084a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084a8:	430b      	orrs	r3, r1
 80084aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084ac:	430b      	orrs	r3, r1
 80084ae:	d120      	bne.n	80084f2 <_dtoa_r+0xa72>
 80084b0:	2a00      	cmp	r2, #0
 80084b2:	dded      	ble.n	8008490 <_dtoa_r+0xa10>
 80084b4:	4649      	mov	r1, r9
 80084b6:	2201      	movs	r2, #1
 80084b8:	4658      	mov	r0, fp
 80084ba:	f000 fbb3 	bl	8008c24 <__lshift>
 80084be:	4621      	mov	r1, r4
 80084c0:	4681      	mov	r9, r0
 80084c2:	f000 fc1b 	bl	8008cfc <__mcmp>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	dc03      	bgt.n	80084d2 <_dtoa_r+0xa52>
 80084ca:	d1e1      	bne.n	8008490 <_dtoa_r+0xa10>
 80084cc:	f018 0f01 	tst.w	r8, #1
 80084d0:	d0de      	beq.n	8008490 <_dtoa_r+0xa10>
 80084d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084d6:	d1d8      	bne.n	800848a <_dtoa_r+0xa0a>
 80084d8:	9a00      	ldr	r2, [sp, #0]
 80084da:	2339      	movs	r3, #57	@ 0x39
 80084dc:	7013      	strb	r3, [r2, #0]
 80084de:	4633      	mov	r3, r6
 80084e0:	461e      	mov	r6, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084e8:	2a39      	cmp	r2, #57	@ 0x39
 80084ea:	d052      	beq.n	8008592 <_dtoa_r+0xb12>
 80084ec:	3201      	adds	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	e612      	b.n	8008118 <_dtoa_r+0x698>
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	dd07      	ble.n	8008506 <_dtoa_r+0xa86>
 80084f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084fa:	d0ed      	beq.n	80084d8 <_dtoa_r+0xa58>
 80084fc:	9a00      	ldr	r2, [sp, #0]
 80084fe:	f108 0301 	add.w	r3, r8, #1
 8008502:	7013      	strb	r3, [r2, #0]
 8008504:	e608      	b.n	8008118 <_dtoa_r+0x698>
 8008506:	9b07      	ldr	r3, [sp, #28]
 8008508:	9a07      	ldr	r2, [sp, #28]
 800850a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800850e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008510:	4293      	cmp	r3, r2
 8008512:	d028      	beq.n	8008566 <_dtoa_r+0xae6>
 8008514:	4649      	mov	r1, r9
 8008516:	2300      	movs	r3, #0
 8008518:	220a      	movs	r2, #10
 800851a:	4658      	mov	r0, fp
 800851c:	f000 f9d6 	bl	80088cc <__multadd>
 8008520:	42af      	cmp	r7, r5
 8008522:	4681      	mov	r9, r0
 8008524:	f04f 0300 	mov.w	r3, #0
 8008528:	f04f 020a 	mov.w	r2, #10
 800852c:	4639      	mov	r1, r7
 800852e:	4658      	mov	r0, fp
 8008530:	d107      	bne.n	8008542 <_dtoa_r+0xac2>
 8008532:	f000 f9cb 	bl	80088cc <__multadd>
 8008536:	4607      	mov	r7, r0
 8008538:	4605      	mov	r5, r0
 800853a:	9b07      	ldr	r3, [sp, #28]
 800853c:	3301      	adds	r3, #1
 800853e:	9307      	str	r3, [sp, #28]
 8008540:	e774      	b.n	800842c <_dtoa_r+0x9ac>
 8008542:	f000 f9c3 	bl	80088cc <__multadd>
 8008546:	4629      	mov	r1, r5
 8008548:	4607      	mov	r7, r0
 800854a:	2300      	movs	r3, #0
 800854c:	220a      	movs	r2, #10
 800854e:	4658      	mov	r0, fp
 8008550:	f000 f9bc 	bl	80088cc <__multadd>
 8008554:	4605      	mov	r5, r0
 8008556:	e7f0      	b.n	800853a <_dtoa_r+0xaba>
 8008558:	9b00      	ldr	r3, [sp, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	bfcc      	ite	gt
 800855e:	461e      	movgt	r6, r3
 8008560:	2601      	movle	r6, #1
 8008562:	4456      	add	r6, sl
 8008564:	2700      	movs	r7, #0
 8008566:	4649      	mov	r1, r9
 8008568:	2201      	movs	r2, #1
 800856a:	4658      	mov	r0, fp
 800856c:	f000 fb5a 	bl	8008c24 <__lshift>
 8008570:	4621      	mov	r1, r4
 8008572:	4681      	mov	r9, r0
 8008574:	f000 fbc2 	bl	8008cfc <__mcmp>
 8008578:	2800      	cmp	r0, #0
 800857a:	dcb0      	bgt.n	80084de <_dtoa_r+0xa5e>
 800857c:	d102      	bne.n	8008584 <_dtoa_r+0xb04>
 800857e:	f018 0f01 	tst.w	r8, #1
 8008582:	d1ac      	bne.n	80084de <_dtoa_r+0xa5e>
 8008584:	4633      	mov	r3, r6
 8008586:	461e      	mov	r6, r3
 8008588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800858c:	2a30      	cmp	r2, #48	@ 0x30
 800858e:	d0fa      	beq.n	8008586 <_dtoa_r+0xb06>
 8008590:	e5c2      	b.n	8008118 <_dtoa_r+0x698>
 8008592:	459a      	cmp	sl, r3
 8008594:	d1a4      	bne.n	80084e0 <_dtoa_r+0xa60>
 8008596:	9b04      	ldr	r3, [sp, #16]
 8008598:	3301      	adds	r3, #1
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	2331      	movs	r3, #49	@ 0x31
 800859e:	f88a 3000 	strb.w	r3, [sl]
 80085a2:	e5b9      	b.n	8008118 <_dtoa_r+0x698>
 80085a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008604 <_dtoa_r+0xb84>
 80085aa:	b11b      	cbz	r3, 80085b4 <_dtoa_r+0xb34>
 80085ac:	f10a 0308 	add.w	r3, sl, #8
 80085b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	4650      	mov	r0, sl
 80085b6:	b019      	add	sp, #100	@ 0x64
 80085b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085be:	2b01      	cmp	r3, #1
 80085c0:	f77f ae37 	ble.w	8008232 <_dtoa_r+0x7b2>
 80085c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085c8:	2001      	movs	r0, #1
 80085ca:	e655      	b.n	8008278 <_dtoa_r+0x7f8>
 80085cc:	9b00      	ldr	r3, [sp, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f77f aed6 	ble.w	8008380 <_dtoa_r+0x900>
 80085d4:	4656      	mov	r6, sl
 80085d6:	4621      	mov	r1, r4
 80085d8:	4648      	mov	r0, r9
 80085da:	f7ff f9c8 	bl	800796e <quorem>
 80085de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80085e2:	f806 8b01 	strb.w	r8, [r6], #1
 80085e6:	9b00      	ldr	r3, [sp, #0]
 80085e8:	eba6 020a 	sub.w	r2, r6, sl
 80085ec:	4293      	cmp	r3, r2
 80085ee:	ddb3      	ble.n	8008558 <_dtoa_r+0xad8>
 80085f0:	4649      	mov	r1, r9
 80085f2:	2300      	movs	r3, #0
 80085f4:	220a      	movs	r2, #10
 80085f6:	4658      	mov	r0, fp
 80085f8:	f000 f968 	bl	80088cc <__multadd>
 80085fc:	4681      	mov	r9, r0
 80085fe:	e7ea      	b.n	80085d6 <_dtoa_r+0xb56>
 8008600:	08009b20 	.word	0x08009b20
 8008604:	08009aa4 	.word	0x08009aa4

08008608 <_free_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4605      	mov	r5, r0
 800860c:	2900      	cmp	r1, #0
 800860e:	d041      	beq.n	8008694 <_free_r+0x8c>
 8008610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008614:	1f0c      	subs	r4, r1, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfb8      	it	lt
 800861a:	18e4      	addlt	r4, r4, r3
 800861c:	f000 f8e8 	bl	80087f0 <__malloc_lock>
 8008620:	4a1d      	ldr	r2, [pc, #116]	@ (8008698 <_free_r+0x90>)
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	b933      	cbnz	r3, 8008634 <_free_r+0x2c>
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	6014      	str	r4, [r2, #0]
 800862a:	4628      	mov	r0, r5
 800862c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008630:	f000 b8e4 	b.w	80087fc <__malloc_unlock>
 8008634:	42a3      	cmp	r3, r4
 8008636:	d908      	bls.n	800864a <_free_r+0x42>
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	1821      	adds	r1, r4, r0
 800863c:	428b      	cmp	r3, r1
 800863e:	bf01      	itttt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	1809      	addeq	r1, r1, r0
 8008646:	6021      	streq	r1, [r4, #0]
 8008648:	e7ed      	b.n	8008626 <_free_r+0x1e>
 800864a:	461a      	mov	r2, r3
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b10b      	cbz	r3, 8008654 <_free_r+0x4c>
 8008650:	42a3      	cmp	r3, r4
 8008652:	d9fa      	bls.n	800864a <_free_r+0x42>
 8008654:	6811      	ldr	r1, [r2, #0]
 8008656:	1850      	adds	r0, r2, r1
 8008658:	42a0      	cmp	r0, r4
 800865a:	d10b      	bne.n	8008674 <_free_r+0x6c>
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	4401      	add	r1, r0
 8008660:	1850      	adds	r0, r2, r1
 8008662:	4283      	cmp	r3, r0
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	d1e0      	bne.n	800862a <_free_r+0x22>
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	6053      	str	r3, [r2, #4]
 800866e:	4408      	add	r0, r1
 8008670:	6010      	str	r0, [r2, #0]
 8008672:	e7da      	b.n	800862a <_free_r+0x22>
 8008674:	d902      	bls.n	800867c <_free_r+0x74>
 8008676:	230c      	movs	r3, #12
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	e7d6      	b.n	800862a <_free_r+0x22>
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	1821      	adds	r1, r4, r0
 8008680:	428b      	cmp	r3, r1
 8008682:	bf04      	itt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	6063      	str	r3, [r4, #4]
 800868a:	bf04      	itt	eq
 800868c:	1809      	addeq	r1, r1, r0
 800868e:	6021      	streq	r1, [r4, #0]
 8008690:	6054      	str	r4, [r2, #4]
 8008692:	e7ca      	b.n	800862a <_free_r+0x22>
 8008694:	bd38      	pop	{r3, r4, r5, pc}
 8008696:	bf00      	nop
 8008698:	20000750 	.word	0x20000750

0800869c <malloc>:
 800869c:	4b02      	ldr	r3, [pc, #8]	@ (80086a8 <malloc+0xc>)
 800869e:	4601      	mov	r1, r0
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	f000 b825 	b.w	80086f0 <_malloc_r>
 80086a6:	bf00      	nop
 80086a8:	20000064 	.word	0x20000064

080086ac <sbrk_aligned>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4e0f      	ldr	r6, [pc, #60]	@ (80086ec <sbrk_aligned+0x40>)
 80086b0:	460c      	mov	r4, r1
 80086b2:	6831      	ldr	r1, [r6, #0]
 80086b4:	4605      	mov	r5, r0
 80086b6:	b911      	cbnz	r1, 80086be <sbrk_aligned+0x12>
 80086b8:	f000 fe46 	bl	8009348 <_sbrk_r>
 80086bc:	6030      	str	r0, [r6, #0]
 80086be:	4621      	mov	r1, r4
 80086c0:	4628      	mov	r0, r5
 80086c2:	f000 fe41 	bl	8009348 <_sbrk_r>
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	d103      	bne.n	80086d2 <sbrk_aligned+0x26>
 80086ca:	f04f 34ff 	mov.w	r4, #4294967295
 80086ce:	4620      	mov	r0, r4
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	1cc4      	adds	r4, r0, #3
 80086d4:	f024 0403 	bic.w	r4, r4, #3
 80086d8:	42a0      	cmp	r0, r4
 80086da:	d0f8      	beq.n	80086ce <sbrk_aligned+0x22>
 80086dc:	1a21      	subs	r1, r4, r0
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 fe32 	bl	8009348 <_sbrk_r>
 80086e4:	3001      	adds	r0, #1
 80086e6:	d1f2      	bne.n	80086ce <sbrk_aligned+0x22>
 80086e8:	e7ef      	b.n	80086ca <sbrk_aligned+0x1e>
 80086ea:	bf00      	nop
 80086ec:	2000074c 	.word	0x2000074c

080086f0 <_malloc_r>:
 80086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f4:	1ccd      	adds	r5, r1, #3
 80086f6:	f025 0503 	bic.w	r5, r5, #3
 80086fa:	3508      	adds	r5, #8
 80086fc:	2d0c      	cmp	r5, #12
 80086fe:	bf38      	it	cc
 8008700:	250c      	movcc	r5, #12
 8008702:	2d00      	cmp	r5, #0
 8008704:	4606      	mov	r6, r0
 8008706:	db01      	blt.n	800870c <_malloc_r+0x1c>
 8008708:	42a9      	cmp	r1, r5
 800870a:	d904      	bls.n	8008716 <_malloc_r+0x26>
 800870c:	230c      	movs	r3, #12
 800870e:	6033      	str	r3, [r6, #0]
 8008710:	2000      	movs	r0, #0
 8008712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087ec <_malloc_r+0xfc>
 800871a:	f000 f869 	bl	80087f0 <__malloc_lock>
 800871e:	f8d8 3000 	ldr.w	r3, [r8]
 8008722:	461c      	mov	r4, r3
 8008724:	bb44      	cbnz	r4, 8008778 <_malloc_r+0x88>
 8008726:	4629      	mov	r1, r5
 8008728:	4630      	mov	r0, r6
 800872a:	f7ff ffbf 	bl	80086ac <sbrk_aligned>
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	4604      	mov	r4, r0
 8008732:	d158      	bne.n	80087e6 <_malloc_r+0xf6>
 8008734:	f8d8 4000 	ldr.w	r4, [r8]
 8008738:	4627      	mov	r7, r4
 800873a:	2f00      	cmp	r7, #0
 800873c:	d143      	bne.n	80087c6 <_malloc_r+0xd6>
 800873e:	2c00      	cmp	r4, #0
 8008740:	d04b      	beq.n	80087da <_malloc_r+0xea>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	4639      	mov	r1, r7
 8008746:	4630      	mov	r0, r6
 8008748:	eb04 0903 	add.w	r9, r4, r3
 800874c:	f000 fdfc 	bl	8009348 <_sbrk_r>
 8008750:	4581      	cmp	r9, r0
 8008752:	d142      	bne.n	80087da <_malloc_r+0xea>
 8008754:	6821      	ldr	r1, [r4, #0]
 8008756:	1a6d      	subs	r5, r5, r1
 8008758:	4629      	mov	r1, r5
 800875a:	4630      	mov	r0, r6
 800875c:	f7ff ffa6 	bl	80086ac <sbrk_aligned>
 8008760:	3001      	adds	r0, #1
 8008762:	d03a      	beq.n	80087da <_malloc_r+0xea>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	442b      	add	r3, r5
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	f8d8 3000 	ldr.w	r3, [r8]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	bb62      	cbnz	r2, 80087cc <_malloc_r+0xdc>
 8008772:	f8c8 7000 	str.w	r7, [r8]
 8008776:	e00f      	b.n	8008798 <_malloc_r+0xa8>
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	1b52      	subs	r2, r2, r5
 800877c:	d420      	bmi.n	80087c0 <_malloc_r+0xd0>
 800877e:	2a0b      	cmp	r2, #11
 8008780:	d917      	bls.n	80087b2 <_malloc_r+0xc2>
 8008782:	1961      	adds	r1, r4, r5
 8008784:	42a3      	cmp	r3, r4
 8008786:	6025      	str	r5, [r4, #0]
 8008788:	bf18      	it	ne
 800878a:	6059      	strne	r1, [r3, #4]
 800878c:	6863      	ldr	r3, [r4, #4]
 800878e:	bf08      	it	eq
 8008790:	f8c8 1000 	streq.w	r1, [r8]
 8008794:	5162      	str	r2, [r4, r5]
 8008796:	604b      	str	r3, [r1, #4]
 8008798:	4630      	mov	r0, r6
 800879a:	f000 f82f 	bl	80087fc <__malloc_unlock>
 800879e:	f104 000b 	add.w	r0, r4, #11
 80087a2:	1d23      	adds	r3, r4, #4
 80087a4:	f020 0007 	bic.w	r0, r0, #7
 80087a8:	1ac2      	subs	r2, r0, r3
 80087aa:	bf1c      	itt	ne
 80087ac:	1a1b      	subne	r3, r3, r0
 80087ae:	50a3      	strne	r3, [r4, r2]
 80087b0:	e7af      	b.n	8008712 <_malloc_r+0x22>
 80087b2:	6862      	ldr	r2, [r4, #4]
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	bf0c      	ite	eq
 80087b8:	f8c8 2000 	streq.w	r2, [r8]
 80087bc:	605a      	strne	r2, [r3, #4]
 80087be:	e7eb      	b.n	8008798 <_malloc_r+0xa8>
 80087c0:	4623      	mov	r3, r4
 80087c2:	6864      	ldr	r4, [r4, #4]
 80087c4:	e7ae      	b.n	8008724 <_malloc_r+0x34>
 80087c6:	463c      	mov	r4, r7
 80087c8:	687f      	ldr	r7, [r7, #4]
 80087ca:	e7b6      	b.n	800873a <_malloc_r+0x4a>
 80087cc:	461a      	mov	r2, r3
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	d1fb      	bne.n	80087cc <_malloc_r+0xdc>
 80087d4:	2300      	movs	r3, #0
 80087d6:	6053      	str	r3, [r2, #4]
 80087d8:	e7de      	b.n	8008798 <_malloc_r+0xa8>
 80087da:	230c      	movs	r3, #12
 80087dc:	6033      	str	r3, [r6, #0]
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 f80c 	bl	80087fc <__malloc_unlock>
 80087e4:	e794      	b.n	8008710 <_malloc_r+0x20>
 80087e6:	6005      	str	r5, [r0, #0]
 80087e8:	e7d6      	b.n	8008798 <_malloc_r+0xa8>
 80087ea:	bf00      	nop
 80087ec:	20000750 	.word	0x20000750

080087f0 <__malloc_lock>:
 80087f0:	4801      	ldr	r0, [pc, #4]	@ (80087f8 <__malloc_lock+0x8>)
 80087f2:	f7ff b8ac 	b.w	800794e <__retarget_lock_acquire_recursive>
 80087f6:	bf00      	nop
 80087f8:	20000748 	.word	0x20000748

080087fc <__malloc_unlock>:
 80087fc:	4801      	ldr	r0, [pc, #4]	@ (8008804 <__malloc_unlock+0x8>)
 80087fe:	f7ff b8a7 	b.w	8007950 <__retarget_lock_release_recursive>
 8008802:	bf00      	nop
 8008804:	20000748 	.word	0x20000748

08008808 <_Balloc>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	69c6      	ldr	r6, [r0, #28]
 800880c:	4604      	mov	r4, r0
 800880e:	460d      	mov	r5, r1
 8008810:	b976      	cbnz	r6, 8008830 <_Balloc+0x28>
 8008812:	2010      	movs	r0, #16
 8008814:	f7ff ff42 	bl	800869c <malloc>
 8008818:	4602      	mov	r2, r0
 800881a:	61e0      	str	r0, [r4, #28]
 800881c:	b920      	cbnz	r0, 8008828 <_Balloc+0x20>
 800881e:	4b18      	ldr	r3, [pc, #96]	@ (8008880 <_Balloc+0x78>)
 8008820:	4818      	ldr	r0, [pc, #96]	@ (8008884 <_Balloc+0x7c>)
 8008822:	216b      	movs	r1, #107	@ 0x6b
 8008824:	f000 fda0 	bl	8009368 <__assert_func>
 8008828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800882c:	6006      	str	r6, [r0, #0]
 800882e:	60c6      	str	r6, [r0, #12]
 8008830:	69e6      	ldr	r6, [r4, #28]
 8008832:	68f3      	ldr	r3, [r6, #12]
 8008834:	b183      	cbz	r3, 8008858 <_Balloc+0x50>
 8008836:	69e3      	ldr	r3, [r4, #28]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800883e:	b9b8      	cbnz	r0, 8008870 <_Balloc+0x68>
 8008840:	2101      	movs	r1, #1
 8008842:	fa01 f605 	lsl.w	r6, r1, r5
 8008846:	1d72      	adds	r2, r6, #5
 8008848:	0092      	lsls	r2, r2, #2
 800884a:	4620      	mov	r0, r4
 800884c:	f000 fdaa 	bl	80093a4 <_calloc_r>
 8008850:	b160      	cbz	r0, 800886c <_Balloc+0x64>
 8008852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008856:	e00e      	b.n	8008876 <_Balloc+0x6e>
 8008858:	2221      	movs	r2, #33	@ 0x21
 800885a:	2104      	movs	r1, #4
 800885c:	4620      	mov	r0, r4
 800885e:	f000 fda1 	bl	80093a4 <_calloc_r>
 8008862:	69e3      	ldr	r3, [r4, #28]
 8008864:	60f0      	str	r0, [r6, #12]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e4      	bne.n	8008836 <_Balloc+0x2e>
 800886c:	2000      	movs	r0, #0
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	6802      	ldr	r2, [r0, #0]
 8008872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008876:	2300      	movs	r3, #0
 8008878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800887c:	e7f7      	b.n	800886e <_Balloc+0x66>
 800887e:	bf00      	nop
 8008880:	08009ab1 	.word	0x08009ab1
 8008884:	08009b31 	.word	0x08009b31

08008888 <_Bfree>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	69c6      	ldr	r6, [r0, #28]
 800888c:	4605      	mov	r5, r0
 800888e:	460c      	mov	r4, r1
 8008890:	b976      	cbnz	r6, 80088b0 <_Bfree+0x28>
 8008892:	2010      	movs	r0, #16
 8008894:	f7ff ff02 	bl	800869c <malloc>
 8008898:	4602      	mov	r2, r0
 800889a:	61e8      	str	r0, [r5, #28]
 800889c:	b920      	cbnz	r0, 80088a8 <_Bfree+0x20>
 800889e:	4b09      	ldr	r3, [pc, #36]	@ (80088c4 <_Bfree+0x3c>)
 80088a0:	4809      	ldr	r0, [pc, #36]	@ (80088c8 <_Bfree+0x40>)
 80088a2:	218f      	movs	r1, #143	@ 0x8f
 80088a4:	f000 fd60 	bl	8009368 <__assert_func>
 80088a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088ac:	6006      	str	r6, [r0, #0]
 80088ae:	60c6      	str	r6, [r0, #12]
 80088b0:	b13c      	cbz	r4, 80088c2 <_Bfree+0x3a>
 80088b2:	69eb      	ldr	r3, [r5, #28]
 80088b4:	6862      	ldr	r2, [r4, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088bc:	6021      	str	r1, [r4, #0]
 80088be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088c2:	bd70      	pop	{r4, r5, r6, pc}
 80088c4:	08009ab1 	.word	0x08009ab1
 80088c8:	08009b31 	.word	0x08009b31

080088cc <__multadd>:
 80088cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	690d      	ldr	r5, [r1, #16]
 80088d2:	4607      	mov	r7, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	461e      	mov	r6, r3
 80088d8:	f101 0c14 	add.w	ip, r1, #20
 80088dc:	2000      	movs	r0, #0
 80088de:	f8dc 3000 	ldr.w	r3, [ip]
 80088e2:	b299      	uxth	r1, r3
 80088e4:	fb02 6101 	mla	r1, r2, r1, r6
 80088e8:	0c1e      	lsrs	r6, r3, #16
 80088ea:	0c0b      	lsrs	r3, r1, #16
 80088ec:	fb02 3306 	mla	r3, r2, r6, r3
 80088f0:	b289      	uxth	r1, r1
 80088f2:	3001      	adds	r0, #1
 80088f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088f8:	4285      	cmp	r5, r0
 80088fa:	f84c 1b04 	str.w	r1, [ip], #4
 80088fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008902:	dcec      	bgt.n	80088de <__multadd+0x12>
 8008904:	b30e      	cbz	r6, 800894a <__multadd+0x7e>
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	42ab      	cmp	r3, r5
 800890a:	dc19      	bgt.n	8008940 <__multadd+0x74>
 800890c:	6861      	ldr	r1, [r4, #4]
 800890e:	4638      	mov	r0, r7
 8008910:	3101      	adds	r1, #1
 8008912:	f7ff ff79 	bl	8008808 <_Balloc>
 8008916:	4680      	mov	r8, r0
 8008918:	b928      	cbnz	r0, 8008926 <__multadd+0x5a>
 800891a:	4602      	mov	r2, r0
 800891c:	4b0c      	ldr	r3, [pc, #48]	@ (8008950 <__multadd+0x84>)
 800891e:	480d      	ldr	r0, [pc, #52]	@ (8008954 <__multadd+0x88>)
 8008920:	21ba      	movs	r1, #186	@ 0xba
 8008922:	f000 fd21 	bl	8009368 <__assert_func>
 8008926:	6922      	ldr	r2, [r4, #16]
 8008928:	3202      	adds	r2, #2
 800892a:	f104 010c 	add.w	r1, r4, #12
 800892e:	0092      	lsls	r2, r2, #2
 8008930:	300c      	adds	r0, #12
 8008932:	f7ff f80e 	bl	8007952 <memcpy>
 8008936:	4621      	mov	r1, r4
 8008938:	4638      	mov	r0, r7
 800893a:	f7ff ffa5 	bl	8008888 <_Bfree>
 800893e:	4644      	mov	r4, r8
 8008940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008944:	3501      	adds	r5, #1
 8008946:	615e      	str	r6, [r3, #20]
 8008948:	6125      	str	r5, [r4, #16]
 800894a:	4620      	mov	r0, r4
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	08009b20 	.word	0x08009b20
 8008954:	08009b31 	.word	0x08009b31

08008958 <__hi0bits>:
 8008958:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800895c:	4603      	mov	r3, r0
 800895e:	bf36      	itet	cc
 8008960:	0403      	lslcc	r3, r0, #16
 8008962:	2000      	movcs	r0, #0
 8008964:	2010      	movcc	r0, #16
 8008966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800896a:	bf3c      	itt	cc
 800896c:	021b      	lslcc	r3, r3, #8
 800896e:	3008      	addcc	r0, #8
 8008970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008974:	bf3c      	itt	cc
 8008976:	011b      	lslcc	r3, r3, #4
 8008978:	3004      	addcc	r0, #4
 800897a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800897e:	bf3c      	itt	cc
 8008980:	009b      	lslcc	r3, r3, #2
 8008982:	3002      	addcc	r0, #2
 8008984:	2b00      	cmp	r3, #0
 8008986:	db05      	blt.n	8008994 <__hi0bits+0x3c>
 8008988:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800898c:	f100 0001 	add.w	r0, r0, #1
 8008990:	bf08      	it	eq
 8008992:	2020      	moveq	r0, #32
 8008994:	4770      	bx	lr

08008996 <__lo0bits>:
 8008996:	6803      	ldr	r3, [r0, #0]
 8008998:	4602      	mov	r2, r0
 800899a:	f013 0007 	ands.w	r0, r3, #7
 800899e:	d00b      	beq.n	80089b8 <__lo0bits+0x22>
 80089a0:	07d9      	lsls	r1, r3, #31
 80089a2:	d421      	bmi.n	80089e8 <__lo0bits+0x52>
 80089a4:	0798      	lsls	r0, r3, #30
 80089a6:	bf49      	itett	mi
 80089a8:	085b      	lsrmi	r3, r3, #1
 80089aa:	089b      	lsrpl	r3, r3, #2
 80089ac:	2001      	movmi	r0, #1
 80089ae:	6013      	strmi	r3, [r2, #0]
 80089b0:	bf5c      	itt	pl
 80089b2:	6013      	strpl	r3, [r2, #0]
 80089b4:	2002      	movpl	r0, #2
 80089b6:	4770      	bx	lr
 80089b8:	b299      	uxth	r1, r3
 80089ba:	b909      	cbnz	r1, 80089c0 <__lo0bits+0x2a>
 80089bc:	0c1b      	lsrs	r3, r3, #16
 80089be:	2010      	movs	r0, #16
 80089c0:	b2d9      	uxtb	r1, r3
 80089c2:	b909      	cbnz	r1, 80089c8 <__lo0bits+0x32>
 80089c4:	3008      	adds	r0, #8
 80089c6:	0a1b      	lsrs	r3, r3, #8
 80089c8:	0719      	lsls	r1, r3, #28
 80089ca:	bf04      	itt	eq
 80089cc:	091b      	lsreq	r3, r3, #4
 80089ce:	3004      	addeq	r0, #4
 80089d0:	0799      	lsls	r1, r3, #30
 80089d2:	bf04      	itt	eq
 80089d4:	089b      	lsreq	r3, r3, #2
 80089d6:	3002      	addeq	r0, #2
 80089d8:	07d9      	lsls	r1, r3, #31
 80089da:	d403      	bmi.n	80089e4 <__lo0bits+0x4e>
 80089dc:	085b      	lsrs	r3, r3, #1
 80089de:	f100 0001 	add.w	r0, r0, #1
 80089e2:	d003      	beq.n	80089ec <__lo0bits+0x56>
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	4770      	bx	lr
 80089e8:	2000      	movs	r0, #0
 80089ea:	4770      	bx	lr
 80089ec:	2020      	movs	r0, #32
 80089ee:	4770      	bx	lr

080089f0 <__i2b>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	460c      	mov	r4, r1
 80089f4:	2101      	movs	r1, #1
 80089f6:	f7ff ff07 	bl	8008808 <_Balloc>
 80089fa:	4602      	mov	r2, r0
 80089fc:	b928      	cbnz	r0, 8008a0a <__i2b+0x1a>
 80089fe:	4b05      	ldr	r3, [pc, #20]	@ (8008a14 <__i2b+0x24>)
 8008a00:	4805      	ldr	r0, [pc, #20]	@ (8008a18 <__i2b+0x28>)
 8008a02:	f240 1145 	movw	r1, #325	@ 0x145
 8008a06:	f000 fcaf 	bl	8009368 <__assert_func>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	6144      	str	r4, [r0, #20]
 8008a0e:	6103      	str	r3, [r0, #16]
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	bf00      	nop
 8008a14:	08009b20 	.word	0x08009b20
 8008a18:	08009b31 	.word	0x08009b31

08008a1c <__multiply>:
 8008a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a20:	4614      	mov	r4, r2
 8008a22:	690a      	ldr	r2, [r1, #16]
 8008a24:	6923      	ldr	r3, [r4, #16]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	bfa8      	it	ge
 8008a2a:	4623      	movge	r3, r4
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	bfa4      	itt	ge
 8008a30:	460c      	movge	r4, r1
 8008a32:	461f      	movge	r7, r3
 8008a34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a3c:	68a3      	ldr	r3, [r4, #8]
 8008a3e:	6861      	ldr	r1, [r4, #4]
 8008a40:	eb0a 0609 	add.w	r6, sl, r9
 8008a44:	42b3      	cmp	r3, r6
 8008a46:	b085      	sub	sp, #20
 8008a48:	bfb8      	it	lt
 8008a4a:	3101      	addlt	r1, #1
 8008a4c:	f7ff fedc 	bl	8008808 <_Balloc>
 8008a50:	b930      	cbnz	r0, 8008a60 <__multiply+0x44>
 8008a52:	4602      	mov	r2, r0
 8008a54:	4b44      	ldr	r3, [pc, #272]	@ (8008b68 <__multiply+0x14c>)
 8008a56:	4845      	ldr	r0, [pc, #276]	@ (8008b6c <__multiply+0x150>)
 8008a58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a5c:	f000 fc84 	bl	8009368 <__assert_func>
 8008a60:	f100 0514 	add.w	r5, r0, #20
 8008a64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a68:	462b      	mov	r3, r5
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	4543      	cmp	r3, r8
 8008a6e:	d321      	bcc.n	8008ab4 <__multiply+0x98>
 8008a70:	f107 0114 	add.w	r1, r7, #20
 8008a74:	f104 0214 	add.w	r2, r4, #20
 8008a78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008a7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	1b13      	subs	r3, r2, r4
 8008a84:	3b15      	subs	r3, #21
 8008a86:	f023 0303 	bic.w	r3, r3, #3
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	f104 0715 	add.w	r7, r4, #21
 8008a90:	42ba      	cmp	r2, r7
 8008a92:	bf38      	it	cc
 8008a94:	2304      	movcc	r3, #4
 8008a96:	9301      	str	r3, [sp, #4]
 8008a98:	9b02      	ldr	r3, [sp, #8]
 8008a9a:	9103      	str	r1, [sp, #12]
 8008a9c:	428b      	cmp	r3, r1
 8008a9e:	d80c      	bhi.n	8008aba <__multiply+0x9e>
 8008aa0:	2e00      	cmp	r6, #0
 8008aa2:	dd03      	ble.n	8008aac <__multiply+0x90>
 8008aa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d05b      	beq.n	8008b64 <__multiply+0x148>
 8008aac:	6106      	str	r6, [r0, #16]
 8008aae:	b005      	add	sp, #20
 8008ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	f843 2b04 	str.w	r2, [r3], #4
 8008ab8:	e7d8      	b.n	8008a6c <__multiply+0x50>
 8008aba:	f8b1 a000 	ldrh.w	sl, [r1]
 8008abe:	f1ba 0f00 	cmp.w	sl, #0
 8008ac2:	d024      	beq.n	8008b0e <__multiply+0xf2>
 8008ac4:	f104 0e14 	add.w	lr, r4, #20
 8008ac8:	46a9      	mov	r9, r5
 8008aca:	f04f 0c00 	mov.w	ip, #0
 8008ace:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ad2:	f8d9 3000 	ldr.w	r3, [r9]
 8008ad6:	fa1f fb87 	uxth.w	fp, r7
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ae0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008ae4:	f8d9 7000 	ldr.w	r7, [r9]
 8008ae8:	4463      	add	r3, ip
 8008aea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008aee:	fb0a c70b 	mla	r7, sl, fp, ip
 8008af2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008afc:	4572      	cmp	r2, lr
 8008afe:	f849 3b04 	str.w	r3, [r9], #4
 8008b02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b06:	d8e2      	bhi.n	8008ace <__multiply+0xb2>
 8008b08:	9b01      	ldr	r3, [sp, #4]
 8008b0a:	f845 c003 	str.w	ip, [r5, r3]
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b14:	3104      	adds	r1, #4
 8008b16:	f1b9 0f00 	cmp.w	r9, #0
 8008b1a:	d021      	beq.n	8008b60 <__multiply+0x144>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	f104 0c14 	add.w	ip, r4, #20
 8008b22:	46ae      	mov	lr, r5
 8008b24:	f04f 0a00 	mov.w	sl, #0
 8008b28:	f8bc b000 	ldrh.w	fp, [ip]
 8008b2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b30:	fb09 770b 	mla	r7, r9, fp, r7
 8008b34:	4457      	add	r7, sl
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b3c:	f84e 3b04 	str.w	r3, [lr], #4
 8008b40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b48:	f8be 3000 	ldrh.w	r3, [lr]
 8008b4c:	fb09 330a 	mla	r3, r9, sl, r3
 8008b50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b54:	4562      	cmp	r2, ip
 8008b56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b5a:	d8e5      	bhi.n	8008b28 <__multiply+0x10c>
 8008b5c:	9f01      	ldr	r7, [sp, #4]
 8008b5e:	51eb      	str	r3, [r5, r7]
 8008b60:	3504      	adds	r5, #4
 8008b62:	e799      	b.n	8008a98 <__multiply+0x7c>
 8008b64:	3e01      	subs	r6, #1
 8008b66:	e79b      	b.n	8008aa0 <__multiply+0x84>
 8008b68:	08009b20 	.word	0x08009b20
 8008b6c:	08009b31 	.word	0x08009b31

08008b70 <__pow5mult>:
 8008b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b74:	4615      	mov	r5, r2
 8008b76:	f012 0203 	ands.w	r2, r2, #3
 8008b7a:	4607      	mov	r7, r0
 8008b7c:	460e      	mov	r6, r1
 8008b7e:	d007      	beq.n	8008b90 <__pow5mult+0x20>
 8008b80:	4c25      	ldr	r4, [pc, #148]	@ (8008c18 <__pow5mult+0xa8>)
 8008b82:	3a01      	subs	r2, #1
 8008b84:	2300      	movs	r3, #0
 8008b86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b8a:	f7ff fe9f 	bl	80088cc <__multadd>
 8008b8e:	4606      	mov	r6, r0
 8008b90:	10ad      	asrs	r5, r5, #2
 8008b92:	d03d      	beq.n	8008c10 <__pow5mult+0xa0>
 8008b94:	69fc      	ldr	r4, [r7, #28]
 8008b96:	b97c      	cbnz	r4, 8008bb8 <__pow5mult+0x48>
 8008b98:	2010      	movs	r0, #16
 8008b9a:	f7ff fd7f 	bl	800869c <malloc>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	61f8      	str	r0, [r7, #28]
 8008ba2:	b928      	cbnz	r0, 8008bb0 <__pow5mult+0x40>
 8008ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c1c <__pow5mult+0xac>)
 8008ba6:	481e      	ldr	r0, [pc, #120]	@ (8008c20 <__pow5mult+0xb0>)
 8008ba8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bac:	f000 fbdc 	bl	8009368 <__assert_func>
 8008bb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bb4:	6004      	str	r4, [r0, #0]
 8008bb6:	60c4      	str	r4, [r0, #12]
 8008bb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008bbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bc0:	b94c      	cbnz	r4, 8008bd6 <__pow5mult+0x66>
 8008bc2:	f240 2171 	movw	r1, #625	@ 0x271
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	f7ff ff12 	bl	80089f0 <__i2b>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	6003      	str	r3, [r0, #0]
 8008bd6:	f04f 0900 	mov.w	r9, #0
 8008bda:	07eb      	lsls	r3, r5, #31
 8008bdc:	d50a      	bpl.n	8008bf4 <__pow5mult+0x84>
 8008bde:	4631      	mov	r1, r6
 8008be0:	4622      	mov	r2, r4
 8008be2:	4638      	mov	r0, r7
 8008be4:	f7ff ff1a 	bl	8008a1c <__multiply>
 8008be8:	4631      	mov	r1, r6
 8008bea:	4680      	mov	r8, r0
 8008bec:	4638      	mov	r0, r7
 8008bee:	f7ff fe4b 	bl	8008888 <_Bfree>
 8008bf2:	4646      	mov	r6, r8
 8008bf4:	106d      	asrs	r5, r5, #1
 8008bf6:	d00b      	beq.n	8008c10 <__pow5mult+0xa0>
 8008bf8:	6820      	ldr	r0, [r4, #0]
 8008bfa:	b938      	cbnz	r0, 8008c0c <__pow5mult+0x9c>
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff ff0b 	bl	8008a1c <__multiply>
 8008c06:	6020      	str	r0, [r4, #0]
 8008c08:	f8c0 9000 	str.w	r9, [r0]
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	e7e4      	b.n	8008bda <__pow5mult+0x6a>
 8008c10:	4630      	mov	r0, r6
 8008c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c16:	bf00      	nop
 8008c18:	08009b8c 	.word	0x08009b8c
 8008c1c:	08009ab1 	.word	0x08009ab1
 8008c20:	08009b31 	.word	0x08009b31

08008c24 <__lshift>:
 8008c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c28:	460c      	mov	r4, r1
 8008c2a:	6849      	ldr	r1, [r1, #4]
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c32:	68a3      	ldr	r3, [r4, #8]
 8008c34:	4607      	mov	r7, r0
 8008c36:	4691      	mov	r9, r2
 8008c38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c3c:	f108 0601 	add.w	r6, r8, #1
 8008c40:	42b3      	cmp	r3, r6
 8008c42:	db0b      	blt.n	8008c5c <__lshift+0x38>
 8008c44:	4638      	mov	r0, r7
 8008c46:	f7ff fddf 	bl	8008808 <_Balloc>
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	b948      	cbnz	r0, 8008c62 <__lshift+0x3e>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	4b28      	ldr	r3, [pc, #160]	@ (8008cf4 <__lshift+0xd0>)
 8008c52:	4829      	ldr	r0, [pc, #164]	@ (8008cf8 <__lshift+0xd4>)
 8008c54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c58:	f000 fb86 	bl	8009368 <__assert_func>
 8008c5c:	3101      	adds	r1, #1
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	e7ee      	b.n	8008c40 <__lshift+0x1c>
 8008c62:	2300      	movs	r3, #0
 8008c64:	f100 0114 	add.w	r1, r0, #20
 8008c68:	f100 0210 	add.w	r2, r0, #16
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	4553      	cmp	r3, sl
 8008c70:	db33      	blt.n	8008cda <__lshift+0xb6>
 8008c72:	6920      	ldr	r0, [r4, #16]
 8008c74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c78:	f104 0314 	add.w	r3, r4, #20
 8008c7c:	f019 091f 	ands.w	r9, r9, #31
 8008c80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c88:	d02b      	beq.n	8008ce2 <__lshift+0xbe>
 8008c8a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c8e:	468a      	mov	sl, r1
 8008c90:	2200      	movs	r2, #0
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	fa00 f009 	lsl.w	r0, r0, r9
 8008c98:	4310      	orrs	r0, r2
 8008c9a:	f84a 0b04 	str.w	r0, [sl], #4
 8008c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca2:	459c      	cmp	ip, r3
 8008ca4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ca8:	d8f3      	bhi.n	8008c92 <__lshift+0x6e>
 8008caa:	ebac 0304 	sub.w	r3, ip, r4
 8008cae:	3b15      	subs	r3, #21
 8008cb0:	f023 0303 	bic.w	r3, r3, #3
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	f104 0015 	add.w	r0, r4, #21
 8008cba:	4584      	cmp	ip, r0
 8008cbc:	bf38      	it	cc
 8008cbe:	2304      	movcc	r3, #4
 8008cc0:	50ca      	str	r2, [r1, r3]
 8008cc2:	b10a      	cbz	r2, 8008cc8 <__lshift+0xa4>
 8008cc4:	f108 0602 	add.w	r6, r8, #2
 8008cc8:	3e01      	subs	r6, #1
 8008cca:	4638      	mov	r0, r7
 8008ccc:	612e      	str	r6, [r5, #16]
 8008cce:	4621      	mov	r1, r4
 8008cd0:	f7ff fdda 	bl	8008888 <_Bfree>
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cda:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cde:	3301      	adds	r3, #1
 8008ce0:	e7c5      	b.n	8008c6e <__lshift+0x4a>
 8008ce2:	3904      	subs	r1, #4
 8008ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cec:	459c      	cmp	ip, r3
 8008cee:	d8f9      	bhi.n	8008ce4 <__lshift+0xc0>
 8008cf0:	e7ea      	b.n	8008cc8 <__lshift+0xa4>
 8008cf2:	bf00      	nop
 8008cf4:	08009b20 	.word	0x08009b20
 8008cf8:	08009b31 	.word	0x08009b31

08008cfc <__mcmp>:
 8008cfc:	690a      	ldr	r2, [r1, #16]
 8008cfe:	4603      	mov	r3, r0
 8008d00:	6900      	ldr	r0, [r0, #16]
 8008d02:	1a80      	subs	r0, r0, r2
 8008d04:	b530      	push	{r4, r5, lr}
 8008d06:	d10e      	bne.n	8008d26 <__mcmp+0x2a>
 8008d08:	3314      	adds	r3, #20
 8008d0a:	3114      	adds	r1, #20
 8008d0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d1c:	4295      	cmp	r5, r2
 8008d1e:	d003      	beq.n	8008d28 <__mcmp+0x2c>
 8008d20:	d205      	bcs.n	8008d2e <__mcmp+0x32>
 8008d22:	f04f 30ff 	mov.w	r0, #4294967295
 8008d26:	bd30      	pop	{r4, r5, pc}
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	d3f3      	bcc.n	8008d14 <__mcmp+0x18>
 8008d2c:	e7fb      	b.n	8008d26 <__mcmp+0x2a>
 8008d2e:	2001      	movs	r0, #1
 8008d30:	e7f9      	b.n	8008d26 <__mcmp+0x2a>
	...

08008d34 <__mdiff>:
 8008d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d38:	4689      	mov	r9, r1
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4648      	mov	r0, r9
 8008d40:	4614      	mov	r4, r2
 8008d42:	f7ff ffdb 	bl	8008cfc <__mcmp>
 8008d46:	1e05      	subs	r5, r0, #0
 8008d48:	d112      	bne.n	8008d70 <__mdiff+0x3c>
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f7ff fd5b 	bl	8008808 <_Balloc>
 8008d52:	4602      	mov	r2, r0
 8008d54:	b928      	cbnz	r0, 8008d62 <__mdiff+0x2e>
 8008d56:	4b3f      	ldr	r3, [pc, #252]	@ (8008e54 <__mdiff+0x120>)
 8008d58:	f240 2137 	movw	r1, #567	@ 0x237
 8008d5c:	483e      	ldr	r0, [pc, #248]	@ (8008e58 <__mdiff+0x124>)
 8008d5e:	f000 fb03 	bl	8009368 <__assert_func>
 8008d62:	2301      	movs	r3, #1
 8008d64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d68:	4610      	mov	r0, r2
 8008d6a:	b003      	add	sp, #12
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d70:	bfbc      	itt	lt
 8008d72:	464b      	movlt	r3, r9
 8008d74:	46a1      	movlt	r9, r4
 8008d76:	4630      	mov	r0, r6
 8008d78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d7c:	bfba      	itte	lt
 8008d7e:	461c      	movlt	r4, r3
 8008d80:	2501      	movlt	r5, #1
 8008d82:	2500      	movge	r5, #0
 8008d84:	f7ff fd40 	bl	8008808 <_Balloc>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	b918      	cbnz	r0, 8008d94 <__mdiff+0x60>
 8008d8c:	4b31      	ldr	r3, [pc, #196]	@ (8008e54 <__mdiff+0x120>)
 8008d8e:	f240 2145 	movw	r1, #581	@ 0x245
 8008d92:	e7e3      	b.n	8008d5c <__mdiff+0x28>
 8008d94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008d98:	6926      	ldr	r6, [r4, #16]
 8008d9a:	60c5      	str	r5, [r0, #12]
 8008d9c:	f109 0310 	add.w	r3, r9, #16
 8008da0:	f109 0514 	add.w	r5, r9, #20
 8008da4:	f104 0e14 	add.w	lr, r4, #20
 8008da8:	f100 0b14 	add.w	fp, r0, #20
 8008dac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008db0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	46d9      	mov	r9, fp
 8008db8:	f04f 0c00 	mov.w	ip, #0
 8008dbc:	9b01      	ldr	r3, [sp, #4]
 8008dbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008dc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	fa1f f38a 	uxth.w	r3, sl
 8008dcc:	4619      	mov	r1, r3
 8008dce:	b283      	uxth	r3, r0
 8008dd0:	1acb      	subs	r3, r1, r3
 8008dd2:	0c00      	lsrs	r0, r0, #16
 8008dd4:	4463      	add	r3, ip
 8008dd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008dda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008de4:	4576      	cmp	r6, lr
 8008de6:	f849 3b04 	str.w	r3, [r9], #4
 8008dea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008dee:	d8e5      	bhi.n	8008dbc <__mdiff+0x88>
 8008df0:	1b33      	subs	r3, r6, r4
 8008df2:	3b15      	subs	r3, #21
 8008df4:	f023 0303 	bic.w	r3, r3, #3
 8008df8:	3415      	adds	r4, #21
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	42a6      	cmp	r6, r4
 8008dfe:	bf38      	it	cc
 8008e00:	2304      	movcc	r3, #4
 8008e02:	441d      	add	r5, r3
 8008e04:	445b      	add	r3, fp
 8008e06:	461e      	mov	r6, r3
 8008e08:	462c      	mov	r4, r5
 8008e0a:	4544      	cmp	r4, r8
 8008e0c:	d30e      	bcc.n	8008e2c <__mdiff+0xf8>
 8008e0e:	f108 0103 	add.w	r1, r8, #3
 8008e12:	1b49      	subs	r1, r1, r5
 8008e14:	f021 0103 	bic.w	r1, r1, #3
 8008e18:	3d03      	subs	r5, #3
 8008e1a:	45a8      	cmp	r8, r5
 8008e1c:	bf38      	it	cc
 8008e1e:	2100      	movcc	r1, #0
 8008e20:	440b      	add	r3, r1
 8008e22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e26:	b191      	cbz	r1, 8008e4e <__mdiff+0x11a>
 8008e28:	6117      	str	r7, [r2, #16]
 8008e2a:	e79d      	b.n	8008d68 <__mdiff+0x34>
 8008e2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e30:	46e6      	mov	lr, ip
 8008e32:	0c08      	lsrs	r0, r1, #16
 8008e34:	fa1c fc81 	uxtah	ip, ip, r1
 8008e38:	4471      	add	r1, lr
 8008e3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e3e:	b289      	uxth	r1, r1
 8008e40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e44:	f846 1b04 	str.w	r1, [r6], #4
 8008e48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e4c:	e7dd      	b.n	8008e0a <__mdiff+0xd6>
 8008e4e:	3f01      	subs	r7, #1
 8008e50:	e7e7      	b.n	8008e22 <__mdiff+0xee>
 8008e52:	bf00      	nop
 8008e54:	08009b20 	.word	0x08009b20
 8008e58:	08009b31 	.word	0x08009b31

08008e5c <__d2b>:
 8008e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e60:	460f      	mov	r7, r1
 8008e62:	2101      	movs	r1, #1
 8008e64:	ec59 8b10 	vmov	r8, r9, d0
 8008e68:	4616      	mov	r6, r2
 8008e6a:	f7ff fccd 	bl	8008808 <_Balloc>
 8008e6e:	4604      	mov	r4, r0
 8008e70:	b930      	cbnz	r0, 8008e80 <__d2b+0x24>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4b23      	ldr	r3, [pc, #140]	@ (8008f04 <__d2b+0xa8>)
 8008e76:	4824      	ldr	r0, [pc, #144]	@ (8008f08 <__d2b+0xac>)
 8008e78:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e7c:	f000 fa74 	bl	8009368 <__assert_func>
 8008e80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e88:	b10d      	cbz	r5, 8008e8e <__d2b+0x32>
 8008e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e8e:	9301      	str	r3, [sp, #4]
 8008e90:	f1b8 0300 	subs.w	r3, r8, #0
 8008e94:	d023      	beq.n	8008ede <__d2b+0x82>
 8008e96:	4668      	mov	r0, sp
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	f7ff fd7c 	bl	8008996 <__lo0bits>
 8008e9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ea2:	b1d0      	cbz	r0, 8008eda <__d2b+0x7e>
 8008ea4:	f1c0 0320 	rsb	r3, r0, #32
 8008ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eac:	430b      	orrs	r3, r1
 8008eae:	40c2      	lsrs	r2, r0
 8008eb0:	6163      	str	r3, [r4, #20]
 8008eb2:	9201      	str	r2, [sp, #4]
 8008eb4:	9b01      	ldr	r3, [sp, #4]
 8008eb6:	61a3      	str	r3, [r4, #24]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bf0c      	ite	eq
 8008ebc:	2201      	moveq	r2, #1
 8008ebe:	2202      	movne	r2, #2
 8008ec0:	6122      	str	r2, [r4, #16]
 8008ec2:	b1a5      	cbz	r5, 8008eee <__d2b+0x92>
 8008ec4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ec8:	4405      	add	r5, r0
 8008eca:	603d      	str	r5, [r7, #0]
 8008ecc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ed0:	6030      	str	r0, [r6, #0]
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	b003      	add	sp, #12
 8008ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eda:	6161      	str	r1, [r4, #20]
 8008edc:	e7ea      	b.n	8008eb4 <__d2b+0x58>
 8008ede:	a801      	add	r0, sp, #4
 8008ee0:	f7ff fd59 	bl	8008996 <__lo0bits>
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	6163      	str	r3, [r4, #20]
 8008ee8:	3020      	adds	r0, #32
 8008eea:	2201      	movs	r2, #1
 8008eec:	e7e8      	b.n	8008ec0 <__d2b+0x64>
 8008eee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ef2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ef6:	6038      	str	r0, [r7, #0]
 8008ef8:	6918      	ldr	r0, [r3, #16]
 8008efa:	f7ff fd2d 	bl	8008958 <__hi0bits>
 8008efe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f02:	e7e5      	b.n	8008ed0 <__d2b+0x74>
 8008f04:	08009b20 	.word	0x08009b20
 8008f08:	08009b31 	.word	0x08009b31

08008f0c <__ssputs_r>:
 8008f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f10:	688e      	ldr	r6, [r1, #8]
 8008f12:	461f      	mov	r7, r3
 8008f14:	42be      	cmp	r6, r7
 8008f16:	680b      	ldr	r3, [r1, #0]
 8008f18:	4682      	mov	sl, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	4690      	mov	r8, r2
 8008f1e:	d82d      	bhi.n	8008f7c <__ssputs_r+0x70>
 8008f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f28:	d026      	beq.n	8008f78 <__ssputs_r+0x6c>
 8008f2a:	6965      	ldr	r5, [r4, #20]
 8008f2c:	6909      	ldr	r1, [r1, #16]
 8008f2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f32:	eba3 0901 	sub.w	r9, r3, r1
 8008f36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f3a:	1c7b      	adds	r3, r7, #1
 8008f3c:	444b      	add	r3, r9
 8008f3e:	106d      	asrs	r5, r5, #1
 8008f40:	429d      	cmp	r5, r3
 8008f42:	bf38      	it	cc
 8008f44:	461d      	movcc	r5, r3
 8008f46:	0553      	lsls	r3, r2, #21
 8008f48:	d527      	bpl.n	8008f9a <__ssputs_r+0x8e>
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	f7ff fbd0 	bl	80086f0 <_malloc_r>
 8008f50:	4606      	mov	r6, r0
 8008f52:	b360      	cbz	r0, 8008fae <__ssputs_r+0xa2>
 8008f54:	6921      	ldr	r1, [r4, #16]
 8008f56:	464a      	mov	r2, r9
 8008f58:	f7fe fcfb 	bl	8007952 <memcpy>
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	6126      	str	r6, [r4, #16]
 8008f6a:	6165      	str	r5, [r4, #20]
 8008f6c:	444e      	add	r6, r9
 8008f6e:	eba5 0509 	sub.w	r5, r5, r9
 8008f72:	6026      	str	r6, [r4, #0]
 8008f74:	60a5      	str	r5, [r4, #8]
 8008f76:	463e      	mov	r6, r7
 8008f78:	42be      	cmp	r6, r7
 8008f7a:	d900      	bls.n	8008f7e <__ssputs_r+0x72>
 8008f7c:	463e      	mov	r6, r7
 8008f7e:	6820      	ldr	r0, [r4, #0]
 8008f80:	4632      	mov	r2, r6
 8008f82:	4641      	mov	r1, r8
 8008f84:	f000 f9c6 	bl	8009314 <memmove>
 8008f88:	68a3      	ldr	r3, [r4, #8]
 8008f8a:	1b9b      	subs	r3, r3, r6
 8008f8c:	60a3      	str	r3, [r4, #8]
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	4433      	add	r3, r6
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	2000      	movs	r0, #0
 8008f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9a:	462a      	mov	r2, r5
 8008f9c:	f000 fa28 	bl	80093f0 <_realloc_r>
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d1e0      	bne.n	8008f68 <__ssputs_r+0x5c>
 8008fa6:	6921      	ldr	r1, [r4, #16]
 8008fa8:	4650      	mov	r0, sl
 8008faa:	f7ff fb2d 	bl	8008608 <_free_r>
 8008fae:	230c      	movs	r3, #12
 8008fb0:	f8ca 3000 	str.w	r3, [sl]
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fba:	81a3      	strh	r3, [r4, #12]
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	e7e9      	b.n	8008f96 <__ssputs_r+0x8a>
	...

08008fc4 <_svfiprintf_r>:
 8008fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc8:	4698      	mov	r8, r3
 8008fca:	898b      	ldrh	r3, [r1, #12]
 8008fcc:	061b      	lsls	r3, r3, #24
 8008fce:	b09d      	sub	sp, #116	@ 0x74
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	460d      	mov	r5, r1
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	d510      	bpl.n	8008ffa <_svfiprintf_r+0x36>
 8008fd8:	690b      	ldr	r3, [r1, #16]
 8008fda:	b973      	cbnz	r3, 8008ffa <_svfiprintf_r+0x36>
 8008fdc:	2140      	movs	r1, #64	@ 0x40
 8008fde:	f7ff fb87 	bl	80086f0 <_malloc_r>
 8008fe2:	6028      	str	r0, [r5, #0]
 8008fe4:	6128      	str	r0, [r5, #16]
 8008fe6:	b930      	cbnz	r0, 8008ff6 <_svfiprintf_r+0x32>
 8008fe8:	230c      	movs	r3, #12
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	b01d      	add	sp, #116	@ 0x74
 8008ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff6:	2340      	movs	r3, #64	@ 0x40
 8008ff8:	616b      	str	r3, [r5, #20]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ffe:	2320      	movs	r3, #32
 8009000:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009004:	f8cd 800c 	str.w	r8, [sp, #12]
 8009008:	2330      	movs	r3, #48	@ 0x30
 800900a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80091a8 <_svfiprintf_r+0x1e4>
 800900e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009012:	f04f 0901 	mov.w	r9, #1
 8009016:	4623      	mov	r3, r4
 8009018:	469a      	mov	sl, r3
 800901a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800901e:	b10a      	cbz	r2, 8009024 <_svfiprintf_r+0x60>
 8009020:	2a25      	cmp	r2, #37	@ 0x25
 8009022:	d1f9      	bne.n	8009018 <_svfiprintf_r+0x54>
 8009024:	ebba 0b04 	subs.w	fp, sl, r4
 8009028:	d00b      	beq.n	8009042 <_svfiprintf_r+0x7e>
 800902a:	465b      	mov	r3, fp
 800902c:	4622      	mov	r2, r4
 800902e:	4629      	mov	r1, r5
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff ff6b 	bl	8008f0c <__ssputs_r>
 8009036:	3001      	adds	r0, #1
 8009038:	f000 80a7 	beq.w	800918a <_svfiprintf_r+0x1c6>
 800903c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800903e:	445a      	add	r2, fp
 8009040:	9209      	str	r2, [sp, #36]	@ 0x24
 8009042:	f89a 3000 	ldrb.w	r3, [sl]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 809f 	beq.w	800918a <_svfiprintf_r+0x1c6>
 800904c:	2300      	movs	r3, #0
 800904e:	f04f 32ff 	mov.w	r2, #4294967295
 8009052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009056:	f10a 0a01 	add.w	sl, sl, #1
 800905a:	9304      	str	r3, [sp, #16]
 800905c:	9307      	str	r3, [sp, #28]
 800905e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009062:	931a      	str	r3, [sp, #104]	@ 0x68
 8009064:	4654      	mov	r4, sl
 8009066:	2205      	movs	r2, #5
 8009068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906c:	484e      	ldr	r0, [pc, #312]	@ (80091a8 <_svfiprintf_r+0x1e4>)
 800906e:	f7f7 f8b7 	bl	80001e0 <memchr>
 8009072:	9a04      	ldr	r2, [sp, #16]
 8009074:	b9d8      	cbnz	r0, 80090ae <_svfiprintf_r+0xea>
 8009076:	06d0      	lsls	r0, r2, #27
 8009078:	bf44      	itt	mi
 800907a:	2320      	movmi	r3, #32
 800907c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009080:	0711      	lsls	r1, r2, #28
 8009082:	bf44      	itt	mi
 8009084:	232b      	movmi	r3, #43	@ 0x2b
 8009086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800908a:	f89a 3000 	ldrb.w	r3, [sl]
 800908e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009090:	d015      	beq.n	80090be <_svfiprintf_r+0xfa>
 8009092:	9a07      	ldr	r2, [sp, #28]
 8009094:	4654      	mov	r4, sl
 8009096:	2000      	movs	r0, #0
 8009098:	f04f 0c0a 	mov.w	ip, #10
 800909c:	4621      	mov	r1, r4
 800909e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090a2:	3b30      	subs	r3, #48	@ 0x30
 80090a4:	2b09      	cmp	r3, #9
 80090a6:	d94b      	bls.n	8009140 <_svfiprintf_r+0x17c>
 80090a8:	b1b0      	cbz	r0, 80090d8 <_svfiprintf_r+0x114>
 80090aa:	9207      	str	r2, [sp, #28]
 80090ac:	e014      	b.n	80090d8 <_svfiprintf_r+0x114>
 80090ae:	eba0 0308 	sub.w	r3, r0, r8
 80090b2:	fa09 f303 	lsl.w	r3, r9, r3
 80090b6:	4313      	orrs	r3, r2
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	46a2      	mov	sl, r4
 80090bc:	e7d2      	b.n	8009064 <_svfiprintf_r+0xa0>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	1d19      	adds	r1, r3, #4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	9103      	str	r1, [sp, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	bfbb      	ittet	lt
 80090ca:	425b      	neglt	r3, r3
 80090cc:	f042 0202 	orrlt.w	r2, r2, #2
 80090d0:	9307      	strge	r3, [sp, #28]
 80090d2:	9307      	strlt	r3, [sp, #28]
 80090d4:	bfb8      	it	lt
 80090d6:	9204      	strlt	r2, [sp, #16]
 80090d8:	7823      	ldrb	r3, [r4, #0]
 80090da:	2b2e      	cmp	r3, #46	@ 0x2e
 80090dc:	d10a      	bne.n	80090f4 <_svfiprintf_r+0x130>
 80090de:	7863      	ldrb	r3, [r4, #1]
 80090e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80090e2:	d132      	bne.n	800914a <_svfiprintf_r+0x186>
 80090e4:	9b03      	ldr	r3, [sp, #12]
 80090e6:	1d1a      	adds	r2, r3, #4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	9203      	str	r2, [sp, #12]
 80090ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090f0:	3402      	adds	r4, #2
 80090f2:	9305      	str	r3, [sp, #20]
 80090f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80091b8 <_svfiprintf_r+0x1f4>
 80090f8:	7821      	ldrb	r1, [r4, #0]
 80090fa:	2203      	movs	r2, #3
 80090fc:	4650      	mov	r0, sl
 80090fe:	f7f7 f86f 	bl	80001e0 <memchr>
 8009102:	b138      	cbz	r0, 8009114 <_svfiprintf_r+0x150>
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	eba0 000a 	sub.w	r0, r0, sl
 800910a:	2240      	movs	r2, #64	@ 0x40
 800910c:	4082      	lsls	r2, r0
 800910e:	4313      	orrs	r3, r2
 8009110:	3401      	adds	r4, #1
 8009112:	9304      	str	r3, [sp, #16]
 8009114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009118:	4824      	ldr	r0, [pc, #144]	@ (80091ac <_svfiprintf_r+0x1e8>)
 800911a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800911e:	2206      	movs	r2, #6
 8009120:	f7f7 f85e 	bl	80001e0 <memchr>
 8009124:	2800      	cmp	r0, #0
 8009126:	d036      	beq.n	8009196 <_svfiprintf_r+0x1d2>
 8009128:	4b21      	ldr	r3, [pc, #132]	@ (80091b0 <_svfiprintf_r+0x1ec>)
 800912a:	bb1b      	cbnz	r3, 8009174 <_svfiprintf_r+0x1b0>
 800912c:	9b03      	ldr	r3, [sp, #12]
 800912e:	3307      	adds	r3, #7
 8009130:	f023 0307 	bic.w	r3, r3, #7
 8009134:	3308      	adds	r3, #8
 8009136:	9303      	str	r3, [sp, #12]
 8009138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800913a:	4433      	add	r3, r6
 800913c:	9309      	str	r3, [sp, #36]	@ 0x24
 800913e:	e76a      	b.n	8009016 <_svfiprintf_r+0x52>
 8009140:	fb0c 3202 	mla	r2, ip, r2, r3
 8009144:	460c      	mov	r4, r1
 8009146:	2001      	movs	r0, #1
 8009148:	e7a8      	b.n	800909c <_svfiprintf_r+0xd8>
 800914a:	2300      	movs	r3, #0
 800914c:	3401      	adds	r4, #1
 800914e:	9305      	str	r3, [sp, #20]
 8009150:	4619      	mov	r1, r3
 8009152:	f04f 0c0a 	mov.w	ip, #10
 8009156:	4620      	mov	r0, r4
 8009158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800915c:	3a30      	subs	r2, #48	@ 0x30
 800915e:	2a09      	cmp	r2, #9
 8009160:	d903      	bls.n	800916a <_svfiprintf_r+0x1a6>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0c6      	beq.n	80090f4 <_svfiprintf_r+0x130>
 8009166:	9105      	str	r1, [sp, #20]
 8009168:	e7c4      	b.n	80090f4 <_svfiprintf_r+0x130>
 800916a:	fb0c 2101 	mla	r1, ip, r1, r2
 800916e:	4604      	mov	r4, r0
 8009170:	2301      	movs	r3, #1
 8009172:	e7f0      	b.n	8009156 <_svfiprintf_r+0x192>
 8009174:	ab03      	add	r3, sp, #12
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	462a      	mov	r2, r5
 800917a:	4b0e      	ldr	r3, [pc, #56]	@ (80091b4 <_svfiprintf_r+0x1f0>)
 800917c:	a904      	add	r1, sp, #16
 800917e:	4638      	mov	r0, r7
 8009180:	f7fd fe76 	bl	8006e70 <_printf_float>
 8009184:	1c42      	adds	r2, r0, #1
 8009186:	4606      	mov	r6, r0
 8009188:	d1d6      	bne.n	8009138 <_svfiprintf_r+0x174>
 800918a:	89ab      	ldrh	r3, [r5, #12]
 800918c:	065b      	lsls	r3, r3, #25
 800918e:	f53f af2d 	bmi.w	8008fec <_svfiprintf_r+0x28>
 8009192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009194:	e72c      	b.n	8008ff0 <_svfiprintf_r+0x2c>
 8009196:	ab03      	add	r3, sp, #12
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	462a      	mov	r2, r5
 800919c:	4b05      	ldr	r3, [pc, #20]	@ (80091b4 <_svfiprintf_r+0x1f0>)
 800919e:	a904      	add	r1, sp, #16
 80091a0:	4638      	mov	r0, r7
 80091a2:	f7fe f8fd 	bl	80073a0 <_printf_i>
 80091a6:	e7ed      	b.n	8009184 <_svfiprintf_r+0x1c0>
 80091a8:	08009c88 	.word	0x08009c88
 80091ac:	08009c92 	.word	0x08009c92
 80091b0:	08006e71 	.word	0x08006e71
 80091b4:	08008f0d 	.word	0x08008f0d
 80091b8:	08009c8e 	.word	0x08009c8e

080091bc <__sflush_r>:
 80091bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c4:	0716      	lsls	r6, r2, #28
 80091c6:	4605      	mov	r5, r0
 80091c8:	460c      	mov	r4, r1
 80091ca:	d454      	bmi.n	8009276 <__sflush_r+0xba>
 80091cc:	684b      	ldr	r3, [r1, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	dc02      	bgt.n	80091d8 <__sflush_r+0x1c>
 80091d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	dd48      	ble.n	800926a <__sflush_r+0xae>
 80091d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091da:	2e00      	cmp	r6, #0
 80091dc:	d045      	beq.n	800926a <__sflush_r+0xae>
 80091de:	2300      	movs	r3, #0
 80091e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091e4:	682f      	ldr	r7, [r5, #0]
 80091e6:	6a21      	ldr	r1, [r4, #32]
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	d030      	beq.n	800924e <__sflush_r+0x92>
 80091ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	0759      	lsls	r1, r3, #29
 80091f2:	d505      	bpl.n	8009200 <__sflush_r+0x44>
 80091f4:	6863      	ldr	r3, [r4, #4]
 80091f6:	1ad2      	subs	r2, r2, r3
 80091f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091fa:	b10b      	cbz	r3, 8009200 <__sflush_r+0x44>
 80091fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091fe:	1ad2      	subs	r2, r2, r3
 8009200:	2300      	movs	r3, #0
 8009202:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009204:	6a21      	ldr	r1, [r4, #32]
 8009206:	4628      	mov	r0, r5
 8009208:	47b0      	blx	r6
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	d106      	bne.n	800921e <__sflush_r+0x62>
 8009210:	6829      	ldr	r1, [r5, #0]
 8009212:	291d      	cmp	r1, #29
 8009214:	d82b      	bhi.n	800926e <__sflush_r+0xb2>
 8009216:	4a2a      	ldr	r2, [pc, #168]	@ (80092c0 <__sflush_r+0x104>)
 8009218:	410a      	asrs	r2, r1
 800921a:	07d6      	lsls	r6, r2, #31
 800921c:	d427      	bmi.n	800926e <__sflush_r+0xb2>
 800921e:	2200      	movs	r2, #0
 8009220:	6062      	str	r2, [r4, #4]
 8009222:	04d9      	lsls	r1, r3, #19
 8009224:	6922      	ldr	r2, [r4, #16]
 8009226:	6022      	str	r2, [r4, #0]
 8009228:	d504      	bpl.n	8009234 <__sflush_r+0x78>
 800922a:	1c42      	adds	r2, r0, #1
 800922c:	d101      	bne.n	8009232 <__sflush_r+0x76>
 800922e:	682b      	ldr	r3, [r5, #0]
 8009230:	b903      	cbnz	r3, 8009234 <__sflush_r+0x78>
 8009232:	6560      	str	r0, [r4, #84]	@ 0x54
 8009234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009236:	602f      	str	r7, [r5, #0]
 8009238:	b1b9      	cbz	r1, 800926a <__sflush_r+0xae>
 800923a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800923e:	4299      	cmp	r1, r3
 8009240:	d002      	beq.n	8009248 <__sflush_r+0x8c>
 8009242:	4628      	mov	r0, r5
 8009244:	f7ff f9e0 	bl	8008608 <_free_r>
 8009248:	2300      	movs	r3, #0
 800924a:	6363      	str	r3, [r4, #52]	@ 0x34
 800924c:	e00d      	b.n	800926a <__sflush_r+0xae>
 800924e:	2301      	movs	r3, #1
 8009250:	4628      	mov	r0, r5
 8009252:	47b0      	blx	r6
 8009254:	4602      	mov	r2, r0
 8009256:	1c50      	adds	r0, r2, #1
 8009258:	d1c9      	bne.n	80091ee <__sflush_r+0x32>
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d0c6      	beq.n	80091ee <__sflush_r+0x32>
 8009260:	2b1d      	cmp	r3, #29
 8009262:	d001      	beq.n	8009268 <__sflush_r+0xac>
 8009264:	2b16      	cmp	r3, #22
 8009266:	d11e      	bne.n	80092a6 <__sflush_r+0xea>
 8009268:	602f      	str	r7, [r5, #0]
 800926a:	2000      	movs	r0, #0
 800926c:	e022      	b.n	80092b4 <__sflush_r+0xf8>
 800926e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009272:	b21b      	sxth	r3, r3
 8009274:	e01b      	b.n	80092ae <__sflush_r+0xf2>
 8009276:	690f      	ldr	r7, [r1, #16]
 8009278:	2f00      	cmp	r7, #0
 800927a:	d0f6      	beq.n	800926a <__sflush_r+0xae>
 800927c:	0793      	lsls	r3, r2, #30
 800927e:	680e      	ldr	r6, [r1, #0]
 8009280:	bf08      	it	eq
 8009282:	694b      	ldreq	r3, [r1, #20]
 8009284:	600f      	str	r7, [r1, #0]
 8009286:	bf18      	it	ne
 8009288:	2300      	movne	r3, #0
 800928a:	eba6 0807 	sub.w	r8, r6, r7
 800928e:	608b      	str	r3, [r1, #8]
 8009290:	f1b8 0f00 	cmp.w	r8, #0
 8009294:	dde9      	ble.n	800926a <__sflush_r+0xae>
 8009296:	6a21      	ldr	r1, [r4, #32]
 8009298:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800929a:	4643      	mov	r3, r8
 800929c:	463a      	mov	r2, r7
 800929e:	4628      	mov	r0, r5
 80092a0:	47b0      	blx	r6
 80092a2:	2800      	cmp	r0, #0
 80092a4:	dc08      	bgt.n	80092b8 <__sflush_r+0xfc>
 80092a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ae:	81a3      	strh	r3, [r4, #12]
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b8:	4407      	add	r7, r0
 80092ba:	eba8 0800 	sub.w	r8, r8, r0
 80092be:	e7e7      	b.n	8009290 <__sflush_r+0xd4>
 80092c0:	dfbffffe 	.word	0xdfbffffe

080092c4 <_fflush_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	690b      	ldr	r3, [r1, #16]
 80092c8:	4605      	mov	r5, r0
 80092ca:	460c      	mov	r4, r1
 80092cc:	b913      	cbnz	r3, 80092d4 <_fflush_r+0x10>
 80092ce:	2500      	movs	r5, #0
 80092d0:	4628      	mov	r0, r5
 80092d2:	bd38      	pop	{r3, r4, r5, pc}
 80092d4:	b118      	cbz	r0, 80092de <_fflush_r+0x1a>
 80092d6:	6a03      	ldr	r3, [r0, #32]
 80092d8:	b90b      	cbnz	r3, 80092de <_fflush_r+0x1a>
 80092da:	f7fe fa0d 	bl	80076f8 <__sinit>
 80092de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0f3      	beq.n	80092ce <_fflush_r+0xa>
 80092e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092e8:	07d0      	lsls	r0, r2, #31
 80092ea:	d404      	bmi.n	80092f6 <_fflush_r+0x32>
 80092ec:	0599      	lsls	r1, r3, #22
 80092ee:	d402      	bmi.n	80092f6 <_fflush_r+0x32>
 80092f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092f2:	f7fe fb2c 	bl	800794e <__retarget_lock_acquire_recursive>
 80092f6:	4628      	mov	r0, r5
 80092f8:	4621      	mov	r1, r4
 80092fa:	f7ff ff5f 	bl	80091bc <__sflush_r>
 80092fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009300:	07da      	lsls	r2, r3, #31
 8009302:	4605      	mov	r5, r0
 8009304:	d4e4      	bmi.n	80092d0 <_fflush_r+0xc>
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	059b      	lsls	r3, r3, #22
 800930a:	d4e1      	bmi.n	80092d0 <_fflush_r+0xc>
 800930c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800930e:	f7fe fb1f 	bl	8007950 <__retarget_lock_release_recursive>
 8009312:	e7dd      	b.n	80092d0 <_fflush_r+0xc>

08009314 <memmove>:
 8009314:	4288      	cmp	r0, r1
 8009316:	b510      	push	{r4, lr}
 8009318:	eb01 0402 	add.w	r4, r1, r2
 800931c:	d902      	bls.n	8009324 <memmove+0x10>
 800931e:	4284      	cmp	r4, r0
 8009320:	4623      	mov	r3, r4
 8009322:	d807      	bhi.n	8009334 <memmove+0x20>
 8009324:	1e43      	subs	r3, r0, #1
 8009326:	42a1      	cmp	r1, r4
 8009328:	d008      	beq.n	800933c <memmove+0x28>
 800932a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800932e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009332:	e7f8      	b.n	8009326 <memmove+0x12>
 8009334:	4402      	add	r2, r0
 8009336:	4601      	mov	r1, r0
 8009338:	428a      	cmp	r2, r1
 800933a:	d100      	bne.n	800933e <memmove+0x2a>
 800933c:	bd10      	pop	{r4, pc}
 800933e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009346:	e7f7      	b.n	8009338 <memmove+0x24>

08009348 <_sbrk_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4d06      	ldr	r5, [pc, #24]	@ (8009364 <_sbrk_r+0x1c>)
 800934c:	2300      	movs	r3, #0
 800934e:	4604      	mov	r4, r0
 8009350:	4608      	mov	r0, r1
 8009352:	602b      	str	r3, [r5, #0]
 8009354:	f7f8 f864 	bl	8001420 <_sbrk>
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	d102      	bne.n	8009362 <_sbrk_r+0x1a>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	b103      	cbz	r3, 8009362 <_sbrk_r+0x1a>
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	20000744 	.word	0x20000744

08009368 <__assert_func>:
 8009368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800936a:	4614      	mov	r4, r2
 800936c:	461a      	mov	r2, r3
 800936e:	4b09      	ldr	r3, [pc, #36]	@ (8009394 <__assert_func+0x2c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4605      	mov	r5, r0
 8009374:	68d8      	ldr	r0, [r3, #12]
 8009376:	b954      	cbnz	r4, 800938e <__assert_func+0x26>
 8009378:	4b07      	ldr	r3, [pc, #28]	@ (8009398 <__assert_func+0x30>)
 800937a:	461c      	mov	r4, r3
 800937c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009380:	9100      	str	r1, [sp, #0]
 8009382:	462b      	mov	r3, r5
 8009384:	4905      	ldr	r1, [pc, #20]	@ (800939c <__assert_func+0x34>)
 8009386:	f000 f86f 	bl	8009468 <fiprintf>
 800938a:	f000 f87f 	bl	800948c <abort>
 800938e:	4b04      	ldr	r3, [pc, #16]	@ (80093a0 <__assert_func+0x38>)
 8009390:	e7f4      	b.n	800937c <__assert_func+0x14>
 8009392:	bf00      	nop
 8009394:	20000064 	.word	0x20000064
 8009398:	08009cde 	.word	0x08009cde
 800939c:	08009cb0 	.word	0x08009cb0
 80093a0:	08009ca3 	.word	0x08009ca3

080093a4 <_calloc_r>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	fba1 5402 	umull	r5, r4, r1, r2
 80093aa:	b93c      	cbnz	r4, 80093bc <_calloc_r+0x18>
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7ff f99f 	bl	80086f0 <_malloc_r>
 80093b2:	4606      	mov	r6, r0
 80093b4:	b928      	cbnz	r0, 80093c2 <_calloc_r+0x1e>
 80093b6:	2600      	movs	r6, #0
 80093b8:	4630      	mov	r0, r6
 80093ba:	bd70      	pop	{r4, r5, r6, pc}
 80093bc:	220c      	movs	r2, #12
 80093be:	6002      	str	r2, [r0, #0]
 80093c0:	e7f9      	b.n	80093b6 <_calloc_r+0x12>
 80093c2:	462a      	mov	r2, r5
 80093c4:	4621      	mov	r1, r4
 80093c6:	f7fe fa44 	bl	8007852 <memset>
 80093ca:	e7f5      	b.n	80093b8 <_calloc_r+0x14>

080093cc <__ascii_mbtowc>:
 80093cc:	b082      	sub	sp, #8
 80093ce:	b901      	cbnz	r1, 80093d2 <__ascii_mbtowc+0x6>
 80093d0:	a901      	add	r1, sp, #4
 80093d2:	b142      	cbz	r2, 80093e6 <__ascii_mbtowc+0x1a>
 80093d4:	b14b      	cbz	r3, 80093ea <__ascii_mbtowc+0x1e>
 80093d6:	7813      	ldrb	r3, [r2, #0]
 80093d8:	600b      	str	r3, [r1, #0]
 80093da:	7812      	ldrb	r2, [r2, #0]
 80093dc:	1e10      	subs	r0, r2, #0
 80093de:	bf18      	it	ne
 80093e0:	2001      	movne	r0, #1
 80093e2:	b002      	add	sp, #8
 80093e4:	4770      	bx	lr
 80093e6:	4610      	mov	r0, r2
 80093e8:	e7fb      	b.n	80093e2 <__ascii_mbtowc+0x16>
 80093ea:	f06f 0001 	mvn.w	r0, #1
 80093ee:	e7f8      	b.n	80093e2 <__ascii_mbtowc+0x16>

080093f0 <_realloc_r>:
 80093f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f4:	4680      	mov	r8, r0
 80093f6:	4615      	mov	r5, r2
 80093f8:	460c      	mov	r4, r1
 80093fa:	b921      	cbnz	r1, 8009406 <_realloc_r+0x16>
 80093fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009400:	4611      	mov	r1, r2
 8009402:	f7ff b975 	b.w	80086f0 <_malloc_r>
 8009406:	b92a      	cbnz	r2, 8009414 <_realloc_r+0x24>
 8009408:	f7ff f8fe 	bl	8008608 <_free_r>
 800940c:	2400      	movs	r4, #0
 800940e:	4620      	mov	r0, r4
 8009410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009414:	f000 f841 	bl	800949a <_malloc_usable_size_r>
 8009418:	4285      	cmp	r5, r0
 800941a:	4606      	mov	r6, r0
 800941c:	d802      	bhi.n	8009424 <_realloc_r+0x34>
 800941e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009422:	d8f4      	bhi.n	800940e <_realloc_r+0x1e>
 8009424:	4629      	mov	r1, r5
 8009426:	4640      	mov	r0, r8
 8009428:	f7ff f962 	bl	80086f0 <_malloc_r>
 800942c:	4607      	mov	r7, r0
 800942e:	2800      	cmp	r0, #0
 8009430:	d0ec      	beq.n	800940c <_realloc_r+0x1c>
 8009432:	42b5      	cmp	r5, r6
 8009434:	462a      	mov	r2, r5
 8009436:	4621      	mov	r1, r4
 8009438:	bf28      	it	cs
 800943a:	4632      	movcs	r2, r6
 800943c:	f7fe fa89 	bl	8007952 <memcpy>
 8009440:	4621      	mov	r1, r4
 8009442:	4640      	mov	r0, r8
 8009444:	f7ff f8e0 	bl	8008608 <_free_r>
 8009448:	463c      	mov	r4, r7
 800944a:	e7e0      	b.n	800940e <_realloc_r+0x1e>

0800944c <__ascii_wctomb>:
 800944c:	4603      	mov	r3, r0
 800944e:	4608      	mov	r0, r1
 8009450:	b141      	cbz	r1, 8009464 <__ascii_wctomb+0x18>
 8009452:	2aff      	cmp	r2, #255	@ 0xff
 8009454:	d904      	bls.n	8009460 <__ascii_wctomb+0x14>
 8009456:	228a      	movs	r2, #138	@ 0x8a
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	f04f 30ff 	mov.w	r0, #4294967295
 800945e:	4770      	bx	lr
 8009460:	700a      	strb	r2, [r1, #0]
 8009462:	2001      	movs	r0, #1
 8009464:	4770      	bx	lr
	...

08009468 <fiprintf>:
 8009468:	b40e      	push	{r1, r2, r3}
 800946a:	b503      	push	{r0, r1, lr}
 800946c:	4601      	mov	r1, r0
 800946e:	ab03      	add	r3, sp, #12
 8009470:	4805      	ldr	r0, [pc, #20]	@ (8009488 <fiprintf+0x20>)
 8009472:	f853 2b04 	ldr.w	r2, [r3], #4
 8009476:	6800      	ldr	r0, [r0, #0]
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	f000 f83f 	bl	80094fc <_vfiprintf_r>
 800947e:	b002      	add	sp, #8
 8009480:	f85d eb04 	ldr.w	lr, [sp], #4
 8009484:	b003      	add	sp, #12
 8009486:	4770      	bx	lr
 8009488:	20000064 	.word	0x20000064

0800948c <abort>:
 800948c:	b508      	push	{r3, lr}
 800948e:	2006      	movs	r0, #6
 8009490:	f000 fa08 	bl	80098a4 <raise>
 8009494:	2001      	movs	r0, #1
 8009496:	f7f7 ff84 	bl	80013a2 <_exit>

0800949a <_malloc_usable_size_r>:
 800949a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800949e:	1f18      	subs	r0, r3, #4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	bfbc      	itt	lt
 80094a4:	580b      	ldrlt	r3, [r1, r0]
 80094a6:	18c0      	addlt	r0, r0, r3
 80094a8:	4770      	bx	lr

080094aa <__sfputc_r>:
 80094aa:	6893      	ldr	r3, [r2, #8]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	b410      	push	{r4}
 80094b2:	6093      	str	r3, [r2, #8]
 80094b4:	da08      	bge.n	80094c8 <__sfputc_r+0x1e>
 80094b6:	6994      	ldr	r4, [r2, #24]
 80094b8:	42a3      	cmp	r3, r4
 80094ba:	db01      	blt.n	80094c0 <__sfputc_r+0x16>
 80094bc:	290a      	cmp	r1, #10
 80094be:	d103      	bne.n	80094c8 <__sfputc_r+0x1e>
 80094c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094c4:	f000 b932 	b.w	800972c <__swbuf_r>
 80094c8:	6813      	ldr	r3, [r2, #0]
 80094ca:	1c58      	adds	r0, r3, #1
 80094cc:	6010      	str	r0, [r2, #0]
 80094ce:	7019      	strb	r1, [r3, #0]
 80094d0:	4608      	mov	r0, r1
 80094d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <__sfputs_r>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	4614      	mov	r4, r2
 80094e0:	18d5      	adds	r5, r2, r3
 80094e2:	42ac      	cmp	r4, r5
 80094e4:	d101      	bne.n	80094ea <__sfputs_r+0x12>
 80094e6:	2000      	movs	r0, #0
 80094e8:	e007      	b.n	80094fa <__sfputs_r+0x22>
 80094ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ee:	463a      	mov	r2, r7
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7ff ffda 	bl	80094aa <__sfputc_r>
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	d1f3      	bne.n	80094e2 <__sfputs_r+0xa>
 80094fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094fc <_vfiprintf_r>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	460d      	mov	r5, r1
 8009502:	b09d      	sub	sp, #116	@ 0x74
 8009504:	4614      	mov	r4, r2
 8009506:	4698      	mov	r8, r3
 8009508:	4606      	mov	r6, r0
 800950a:	b118      	cbz	r0, 8009514 <_vfiprintf_r+0x18>
 800950c:	6a03      	ldr	r3, [r0, #32]
 800950e:	b90b      	cbnz	r3, 8009514 <_vfiprintf_r+0x18>
 8009510:	f7fe f8f2 	bl	80076f8 <__sinit>
 8009514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009516:	07d9      	lsls	r1, r3, #31
 8009518:	d405      	bmi.n	8009526 <_vfiprintf_r+0x2a>
 800951a:	89ab      	ldrh	r3, [r5, #12]
 800951c:	059a      	lsls	r2, r3, #22
 800951e:	d402      	bmi.n	8009526 <_vfiprintf_r+0x2a>
 8009520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009522:	f7fe fa14 	bl	800794e <__retarget_lock_acquire_recursive>
 8009526:	89ab      	ldrh	r3, [r5, #12]
 8009528:	071b      	lsls	r3, r3, #28
 800952a:	d501      	bpl.n	8009530 <_vfiprintf_r+0x34>
 800952c:	692b      	ldr	r3, [r5, #16]
 800952e:	b99b      	cbnz	r3, 8009558 <_vfiprintf_r+0x5c>
 8009530:	4629      	mov	r1, r5
 8009532:	4630      	mov	r0, r6
 8009534:	f000 f938 	bl	80097a8 <__swsetup_r>
 8009538:	b170      	cbz	r0, 8009558 <_vfiprintf_r+0x5c>
 800953a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800953c:	07dc      	lsls	r4, r3, #31
 800953e:	d504      	bpl.n	800954a <_vfiprintf_r+0x4e>
 8009540:	f04f 30ff 	mov.w	r0, #4294967295
 8009544:	b01d      	add	sp, #116	@ 0x74
 8009546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954a:	89ab      	ldrh	r3, [r5, #12]
 800954c:	0598      	lsls	r0, r3, #22
 800954e:	d4f7      	bmi.n	8009540 <_vfiprintf_r+0x44>
 8009550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009552:	f7fe f9fd 	bl	8007950 <__retarget_lock_release_recursive>
 8009556:	e7f3      	b.n	8009540 <_vfiprintf_r+0x44>
 8009558:	2300      	movs	r3, #0
 800955a:	9309      	str	r3, [sp, #36]	@ 0x24
 800955c:	2320      	movs	r3, #32
 800955e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009562:	f8cd 800c 	str.w	r8, [sp, #12]
 8009566:	2330      	movs	r3, #48	@ 0x30
 8009568:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009718 <_vfiprintf_r+0x21c>
 800956c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009570:	f04f 0901 	mov.w	r9, #1
 8009574:	4623      	mov	r3, r4
 8009576:	469a      	mov	sl, r3
 8009578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800957c:	b10a      	cbz	r2, 8009582 <_vfiprintf_r+0x86>
 800957e:	2a25      	cmp	r2, #37	@ 0x25
 8009580:	d1f9      	bne.n	8009576 <_vfiprintf_r+0x7a>
 8009582:	ebba 0b04 	subs.w	fp, sl, r4
 8009586:	d00b      	beq.n	80095a0 <_vfiprintf_r+0xa4>
 8009588:	465b      	mov	r3, fp
 800958a:	4622      	mov	r2, r4
 800958c:	4629      	mov	r1, r5
 800958e:	4630      	mov	r0, r6
 8009590:	f7ff ffa2 	bl	80094d8 <__sfputs_r>
 8009594:	3001      	adds	r0, #1
 8009596:	f000 80a7 	beq.w	80096e8 <_vfiprintf_r+0x1ec>
 800959a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800959c:	445a      	add	r2, fp
 800959e:	9209      	str	r2, [sp, #36]	@ 0x24
 80095a0:	f89a 3000 	ldrb.w	r3, [sl]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 809f 	beq.w	80096e8 <_vfiprintf_r+0x1ec>
 80095aa:	2300      	movs	r3, #0
 80095ac:	f04f 32ff 	mov.w	r2, #4294967295
 80095b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095b4:	f10a 0a01 	add.w	sl, sl, #1
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	9307      	str	r3, [sp, #28]
 80095bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80095c2:	4654      	mov	r4, sl
 80095c4:	2205      	movs	r2, #5
 80095c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ca:	4853      	ldr	r0, [pc, #332]	@ (8009718 <_vfiprintf_r+0x21c>)
 80095cc:	f7f6 fe08 	bl	80001e0 <memchr>
 80095d0:	9a04      	ldr	r2, [sp, #16]
 80095d2:	b9d8      	cbnz	r0, 800960c <_vfiprintf_r+0x110>
 80095d4:	06d1      	lsls	r1, r2, #27
 80095d6:	bf44      	itt	mi
 80095d8:	2320      	movmi	r3, #32
 80095da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095de:	0713      	lsls	r3, r2, #28
 80095e0:	bf44      	itt	mi
 80095e2:	232b      	movmi	r3, #43	@ 0x2b
 80095e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095e8:	f89a 3000 	ldrb.w	r3, [sl]
 80095ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80095ee:	d015      	beq.n	800961c <_vfiprintf_r+0x120>
 80095f0:	9a07      	ldr	r2, [sp, #28]
 80095f2:	4654      	mov	r4, sl
 80095f4:	2000      	movs	r0, #0
 80095f6:	f04f 0c0a 	mov.w	ip, #10
 80095fa:	4621      	mov	r1, r4
 80095fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009600:	3b30      	subs	r3, #48	@ 0x30
 8009602:	2b09      	cmp	r3, #9
 8009604:	d94b      	bls.n	800969e <_vfiprintf_r+0x1a2>
 8009606:	b1b0      	cbz	r0, 8009636 <_vfiprintf_r+0x13a>
 8009608:	9207      	str	r2, [sp, #28]
 800960a:	e014      	b.n	8009636 <_vfiprintf_r+0x13a>
 800960c:	eba0 0308 	sub.w	r3, r0, r8
 8009610:	fa09 f303 	lsl.w	r3, r9, r3
 8009614:	4313      	orrs	r3, r2
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	46a2      	mov	sl, r4
 800961a:	e7d2      	b.n	80095c2 <_vfiprintf_r+0xc6>
 800961c:	9b03      	ldr	r3, [sp, #12]
 800961e:	1d19      	adds	r1, r3, #4
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	9103      	str	r1, [sp, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	bfbb      	ittet	lt
 8009628:	425b      	neglt	r3, r3
 800962a:	f042 0202 	orrlt.w	r2, r2, #2
 800962e:	9307      	strge	r3, [sp, #28]
 8009630:	9307      	strlt	r3, [sp, #28]
 8009632:	bfb8      	it	lt
 8009634:	9204      	strlt	r2, [sp, #16]
 8009636:	7823      	ldrb	r3, [r4, #0]
 8009638:	2b2e      	cmp	r3, #46	@ 0x2e
 800963a:	d10a      	bne.n	8009652 <_vfiprintf_r+0x156>
 800963c:	7863      	ldrb	r3, [r4, #1]
 800963e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009640:	d132      	bne.n	80096a8 <_vfiprintf_r+0x1ac>
 8009642:	9b03      	ldr	r3, [sp, #12]
 8009644:	1d1a      	adds	r2, r3, #4
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	9203      	str	r2, [sp, #12]
 800964a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800964e:	3402      	adds	r4, #2
 8009650:	9305      	str	r3, [sp, #20]
 8009652:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009728 <_vfiprintf_r+0x22c>
 8009656:	7821      	ldrb	r1, [r4, #0]
 8009658:	2203      	movs	r2, #3
 800965a:	4650      	mov	r0, sl
 800965c:	f7f6 fdc0 	bl	80001e0 <memchr>
 8009660:	b138      	cbz	r0, 8009672 <_vfiprintf_r+0x176>
 8009662:	9b04      	ldr	r3, [sp, #16]
 8009664:	eba0 000a 	sub.w	r0, r0, sl
 8009668:	2240      	movs	r2, #64	@ 0x40
 800966a:	4082      	lsls	r2, r0
 800966c:	4313      	orrs	r3, r2
 800966e:	3401      	adds	r4, #1
 8009670:	9304      	str	r3, [sp, #16]
 8009672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009676:	4829      	ldr	r0, [pc, #164]	@ (800971c <_vfiprintf_r+0x220>)
 8009678:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800967c:	2206      	movs	r2, #6
 800967e:	f7f6 fdaf 	bl	80001e0 <memchr>
 8009682:	2800      	cmp	r0, #0
 8009684:	d03f      	beq.n	8009706 <_vfiprintf_r+0x20a>
 8009686:	4b26      	ldr	r3, [pc, #152]	@ (8009720 <_vfiprintf_r+0x224>)
 8009688:	bb1b      	cbnz	r3, 80096d2 <_vfiprintf_r+0x1d6>
 800968a:	9b03      	ldr	r3, [sp, #12]
 800968c:	3307      	adds	r3, #7
 800968e:	f023 0307 	bic.w	r3, r3, #7
 8009692:	3308      	adds	r3, #8
 8009694:	9303      	str	r3, [sp, #12]
 8009696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009698:	443b      	add	r3, r7
 800969a:	9309      	str	r3, [sp, #36]	@ 0x24
 800969c:	e76a      	b.n	8009574 <_vfiprintf_r+0x78>
 800969e:	fb0c 3202 	mla	r2, ip, r2, r3
 80096a2:	460c      	mov	r4, r1
 80096a4:	2001      	movs	r0, #1
 80096a6:	e7a8      	b.n	80095fa <_vfiprintf_r+0xfe>
 80096a8:	2300      	movs	r3, #0
 80096aa:	3401      	adds	r4, #1
 80096ac:	9305      	str	r3, [sp, #20]
 80096ae:	4619      	mov	r1, r3
 80096b0:	f04f 0c0a 	mov.w	ip, #10
 80096b4:	4620      	mov	r0, r4
 80096b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ba:	3a30      	subs	r2, #48	@ 0x30
 80096bc:	2a09      	cmp	r2, #9
 80096be:	d903      	bls.n	80096c8 <_vfiprintf_r+0x1cc>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0c6      	beq.n	8009652 <_vfiprintf_r+0x156>
 80096c4:	9105      	str	r1, [sp, #20]
 80096c6:	e7c4      	b.n	8009652 <_vfiprintf_r+0x156>
 80096c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80096cc:	4604      	mov	r4, r0
 80096ce:	2301      	movs	r3, #1
 80096d0:	e7f0      	b.n	80096b4 <_vfiprintf_r+0x1b8>
 80096d2:	ab03      	add	r3, sp, #12
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	462a      	mov	r2, r5
 80096d8:	4b12      	ldr	r3, [pc, #72]	@ (8009724 <_vfiprintf_r+0x228>)
 80096da:	a904      	add	r1, sp, #16
 80096dc:	4630      	mov	r0, r6
 80096de:	f7fd fbc7 	bl	8006e70 <_printf_float>
 80096e2:	4607      	mov	r7, r0
 80096e4:	1c78      	adds	r0, r7, #1
 80096e6:	d1d6      	bne.n	8009696 <_vfiprintf_r+0x19a>
 80096e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096ea:	07d9      	lsls	r1, r3, #31
 80096ec:	d405      	bmi.n	80096fa <_vfiprintf_r+0x1fe>
 80096ee:	89ab      	ldrh	r3, [r5, #12]
 80096f0:	059a      	lsls	r2, r3, #22
 80096f2:	d402      	bmi.n	80096fa <_vfiprintf_r+0x1fe>
 80096f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096f6:	f7fe f92b 	bl	8007950 <__retarget_lock_release_recursive>
 80096fa:	89ab      	ldrh	r3, [r5, #12]
 80096fc:	065b      	lsls	r3, r3, #25
 80096fe:	f53f af1f 	bmi.w	8009540 <_vfiprintf_r+0x44>
 8009702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009704:	e71e      	b.n	8009544 <_vfiprintf_r+0x48>
 8009706:	ab03      	add	r3, sp, #12
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	462a      	mov	r2, r5
 800970c:	4b05      	ldr	r3, [pc, #20]	@ (8009724 <_vfiprintf_r+0x228>)
 800970e:	a904      	add	r1, sp, #16
 8009710:	4630      	mov	r0, r6
 8009712:	f7fd fe45 	bl	80073a0 <_printf_i>
 8009716:	e7e4      	b.n	80096e2 <_vfiprintf_r+0x1e6>
 8009718:	08009c88 	.word	0x08009c88
 800971c:	08009c92 	.word	0x08009c92
 8009720:	08006e71 	.word	0x08006e71
 8009724:	080094d9 	.word	0x080094d9
 8009728:	08009c8e 	.word	0x08009c8e

0800972c <__swbuf_r>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	460e      	mov	r6, r1
 8009730:	4614      	mov	r4, r2
 8009732:	4605      	mov	r5, r0
 8009734:	b118      	cbz	r0, 800973e <__swbuf_r+0x12>
 8009736:	6a03      	ldr	r3, [r0, #32]
 8009738:	b90b      	cbnz	r3, 800973e <__swbuf_r+0x12>
 800973a:	f7fd ffdd 	bl	80076f8 <__sinit>
 800973e:	69a3      	ldr	r3, [r4, #24]
 8009740:	60a3      	str	r3, [r4, #8]
 8009742:	89a3      	ldrh	r3, [r4, #12]
 8009744:	071a      	lsls	r2, r3, #28
 8009746:	d501      	bpl.n	800974c <__swbuf_r+0x20>
 8009748:	6923      	ldr	r3, [r4, #16]
 800974a:	b943      	cbnz	r3, 800975e <__swbuf_r+0x32>
 800974c:	4621      	mov	r1, r4
 800974e:	4628      	mov	r0, r5
 8009750:	f000 f82a 	bl	80097a8 <__swsetup_r>
 8009754:	b118      	cbz	r0, 800975e <__swbuf_r+0x32>
 8009756:	f04f 37ff 	mov.w	r7, #4294967295
 800975a:	4638      	mov	r0, r7
 800975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	6922      	ldr	r2, [r4, #16]
 8009762:	1a98      	subs	r0, r3, r2
 8009764:	6963      	ldr	r3, [r4, #20]
 8009766:	b2f6      	uxtb	r6, r6
 8009768:	4283      	cmp	r3, r0
 800976a:	4637      	mov	r7, r6
 800976c:	dc05      	bgt.n	800977a <__swbuf_r+0x4e>
 800976e:	4621      	mov	r1, r4
 8009770:	4628      	mov	r0, r5
 8009772:	f7ff fda7 	bl	80092c4 <_fflush_r>
 8009776:	2800      	cmp	r0, #0
 8009778:	d1ed      	bne.n	8009756 <__swbuf_r+0x2a>
 800977a:	68a3      	ldr	r3, [r4, #8]
 800977c:	3b01      	subs	r3, #1
 800977e:	60a3      	str	r3, [r4, #8]
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	1c5a      	adds	r2, r3, #1
 8009784:	6022      	str	r2, [r4, #0]
 8009786:	701e      	strb	r6, [r3, #0]
 8009788:	6962      	ldr	r2, [r4, #20]
 800978a:	1c43      	adds	r3, r0, #1
 800978c:	429a      	cmp	r2, r3
 800978e:	d004      	beq.n	800979a <__swbuf_r+0x6e>
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	07db      	lsls	r3, r3, #31
 8009794:	d5e1      	bpl.n	800975a <__swbuf_r+0x2e>
 8009796:	2e0a      	cmp	r6, #10
 8009798:	d1df      	bne.n	800975a <__swbuf_r+0x2e>
 800979a:	4621      	mov	r1, r4
 800979c:	4628      	mov	r0, r5
 800979e:	f7ff fd91 	bl	80092c4 <_fflush_r>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d0d9      	beq.n	800975a <__swbuf_r+0x2e>
 80097a6:	e7d6      	b.n	8009756 <__swbuf_r+0x2a>

080097a8 <__swsetup_r>:
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	4b29      	ldr	r3, [pc, #164]	@ (8009850 <__swsetup_r+0xa8>)
 80097ac:	4605      	mov	r5, r0
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	460c      	mov	r4, r1
 80097b2:	b118      	cbz	r0, 80097bc <__swsetup_r+0x14>
 80097b4:	6a03      	ldr	r3, [r0, #32]
 80097b6:	b90b      	cbnz	r3, 80097bc <__swsetup_r+0x14>
 80097b8:	f7fd ff9e 	bl	80076f8 <__sinit>
 80097bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097c0:	0719      	lsls	r1, r3, #28
 80097c2:	d422      	bmi.n	800980a <__swsetup_r+0x62>
 80097c4:	06da      	lsls	r2, r3, #27
 80097c6:	d407      	bmi.n	80097d8 <__swsetup_r+0x30>
 80097c8:	2209      	movs	r2, #9
 80097ca:	602a      	str	r2, [r5, #0]
 80097cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097d0:	81a3      	strh	r3, [r4, #12]
 80097d2:	f04f 30ff 	mov.w	r0, #4294967295
 80097d6:	e033      	b.n	8009840 <__swsetup_r+0x98>
 80097d8:	0758      	lsls	r0, r3, #29
 80097da:	d512      	bpl.n	8009802 <__swsetup_r+0x5a>
 80097dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097de:	b141      	cbz	r1, 80097f2 <__swsetup_r+0x4a>
 80097e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097e4:	4299      	cmp	r1, r3
 80097e6:	d002      	beq.n	80097ee <__swsetup_r+0x46>
 80097e8:	4628      	mov	r0, r5
 80097ea:	f7fe ff0d 	bl	8008608 <_free_r>
 80097ee:	2300      	movs	r3, #0
 80097f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	2300      	movs	r3, #0
 80097fc:	6063      	str	r3, [r4, #4]
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	f043 0308 	orr.w	r3, r3, #8
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	b94b      	cbnz	r3, 8009822 <__swsetup_r+0x7a>
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009818:	d003      	beq.n	8009822 <__swsetup_r+0x7a>
 800981a:	4621      	mov	r1, r4
 800981c:	4628      	mov	r0, r5
 800981e:	f000 f883 	bl	8009928 <__smakebuf_r>
 8009822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009826:	f013 0201 	ands.w	r2, r3, #1
 800982a:	d00a      	beq.n	8009842 <__swsetup_r+0x9a>
 800982c:	2200      	movs	r2, #0
 800982e:	60a2      	str	r2, [r4, #8]
 8009830:	6962      	ldr	r2, [r4, #20]
 8009832:	4252      	negs	r2, r2
 8009834:	61a2      	str	r2, [r4, #24]
 8009836:	6922      	ldr	r2, [r4, #16]
 8009838:	b942      	cbnz	r2, 800984c <__swsetup_r+0xa4>
 800983a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800983e:	d1c5      	bne.n	80097cc <__swsetup_r+0x24>
 8009840:	bd38      	pop	{r3, r4, r5, pc}
 8009842:	0799      	lsls	r1, r3, #30
 8009844:	bf58      	it	pl
 8009846:	6962      	ldrpl	r2, [r4, #20]
 8009848:	60a2      	str	r2, [r4, #8]
 800984a:	e7f4      	b.n	8009836 <__swsetup_r+0x8e>
 800984c:	2000      	movs	r0, #0
 800984e:	e7f7      	b.n	8009840 <__swsetup_r+0x98>
 8009850:	20000064 	.word	0x20000064

08009854 <_raise_r>:
 8009854:	291f      	cmp	r1, #31
 8009856:	b538      	push	{r3, r4, r5, lr}
 8009858:	4605      	mov	r5, r0
 800985a:	460c      	mov	r4, r1
 800985c:	d904      	bls.n	8009868 <_raise_r+0x14>
 800985e:	2316      	movs	r3, #22
 8009860:	6003      	str	r3, [r0, #0]
 8009862:	f04f 30ff 	mov.w	r0, #4294967295
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800986a:	b112      	cbz	r2, 8009872 <_raise_r+0x1e>
 800986c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009870:	b94b      	cbnz	r3, 8009886 <_raise_r+0x32>
 8009872:	4628      	mov	r0, r5
 8009874:	f000 f830 	bl	80098d8 <_getpid_r>
 8009878:	4622      	mov	r2, r4
 800987a:	4601      	mov	r1, r0
 800987c:	4628      	mov	r0, r5
 800987e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009882:	f000 b817 	b.w	80098b4 <_kill_r>
 8009886:	2b01      	cmp	r3, #1
 8009888:	d00a      	beq.n	80098a0 <_raise_r+0x4c>
 800988a:	1c59      	adds	r1, r3, #1
 800988c:	d103      	bne.n	8009896 <_raise_r+0x42>
 800988e:	2316      	movs	r3, #22
 8009890:	6003      	str	r3, [r0, #0]
 8009892:	2001      	movs	r0, #1
 8009894:	e7e7      	b.n	8009866 <_raise_r+0x12>
 8009896:	2100      	movs	r1, #0
 8009898:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800989c:	4620      	mov	r0, r4
 800989e:	4798      	blx	r3
 80098a0:	2000      	movs	r0, #0
 80098a2:	e7e0      	b.n	8009866 <_raise_r+0x12>

080098a4 <raise>:
 80098a4:	4b02      	ldr	r3, [pc, #8]	@ (80098b0 <raise+0xc>)
 80098a6:	4601      	mov	r1, r0
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f7ff bfd3 	b.w	8009854 <_raise_r>
 80098ae:	bf00      	nop
 80098b0:	20000064 	.word	0x20000064

080098b4 <_kill_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4d07      	ldr	r5, [pc, #28]	@ (80098d4 <_kill_r+0x20>)
 80098b8:	2300      	movs	r3, #0
 80098ba:	4604      	mov	r4, r0
 80098bc:	4608      	mov	r0, r1
 80098be:	4611      	mov	r1, r2
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	f7f7 fd5e 	bl	8001382 <_kill>
 80098c6:	1c43      	adds	r3, r0, #1
 80098c8:	d102      	bne.n	80098d0 <_kill_r+0x1c>
 80098ca:	682b      	ldr	r3, [r5, #0]
 80098cc:	b103      	cbz	r3, 80098d0 <_kill_r+0x1c>
 80098ce:	6023      	str	r3, [r4, #0]
 80098d0:	bd38      	pop	{r3, r4, r5, pc}
 80098d2:	bf00      	nop
 80098d4:	20000744 	.word	0x20000744

080098d8 <_getpid_r>:
 80098d8:	f7f7 bd4b 	b.w	8001372 <_getpid>

080098dc <__swhatbuf_r>:
 80098dc:	b570      	push	{r4, r5, r6, lr}
 80098de:	460c      	mov	r4, r1
 80098e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e4:	2900      	cmp	r1, #0
 80098e6:	b096      	sub	sp, #88	@ 0x58
 80098e8:	4615      	mov	r5, r2
 80098ea:	461e      	mov	r6, r3
 80098ec:	da0d      	bge.n	800990a <__swhatbuf_r+0x2e>
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098f4:	f04f 0100 	mov.w	r1, #0
 80098f8:	bf14      	ite	ne
 80098fa:	2340      	movne	r3, #64	@ 0x40
 80098fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009900:	2000      	movs	r0, #0
 8009902:	6031      	str	r1, [r6, #0]
 8009904:	602b      	str	r3, [r5, #0]
 8009906:	b016      	add	sp, #88	@ 0x58
 8009908:	bd70      	pop	{r4, r5, r6, pc}
 800990a:	466a      	mov	r2, sp
 800990c:	f000 f848 	bl	80099a0 <_fstat_r>
 8009910:	2800      	cmp	r0, #0
 8009912:	dbec      	blt.n	80098ee <__swhatbuf_r+0x12>
 8009914:	9901      	ldr	r1, [sp, #4]
 8009916:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800991a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800991e:	4259      	negs	r1, r3
 8009920:	4159      	adcs	r1, r3
 8009922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009926:	e7eb      	b.n	8009900 <__swhatbuf_r+0x24>

08009928 <__smakebuf_r>:
 8009928:	898b      	ldrh	r3, [r1, #12]
 800992a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800992c:	079d      	lsls	r5, r3, #30
 800992e:	4606      	mov	r6, r0
 8009930:	460c      	mov	r4, r1
 8009932:	d507      	bpl.n	8009944 <__smakebuf_r+0x1c>
 8009934:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	2301      	movs	r3, #1
 800993e:	6163      	str	r3, [r4, #20]
 8009940:	b003      	add	sp, #12
 8009942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009944:	ab01      	add	r3, sp, #4
 8009946:	466a      	mov	r2, sp
 8009948:	f7ff ffc8 	bl	80098dc <__swhatbuf_r>
 800994c:	9f00      	ldr	r7, [sp, #0]
 800994e:	4605      	mov	r5, r0
 8009950:	4639      	mov	r1, r7
 8009952:	4630      	mov	r0, r6
 8009954:	f7fe fecc 	bl	80086f0 <_malloc_r>
 8009958:	b948      	cbnz	r0, 800996e <__smakebuf_r+0x46>
 800995a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800995e:	059a      	lsls	r2, r3, #22
 8009960:	d4ee      	bmi.n	8009940 <__smakebuf_r+0x18>
 8009962:	f023 0303 	bic.w	r3, r3, #3
 8009966:	f043 0302 	orr.w	r3, r3, #2
 800996a:	81a3      	strh	r3, [r4, #12]
 800996c:	e7e2      	b.n	8009934 <__smakebuf_r+0xc>
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	6020      	str	r0, [r4, #0]
 8009972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009976:	81a3      	strh	r3, [r4, #12]
 8009978:	9b01      	ldr	r3, [sp, #4]
 800997a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800997e:	b15b      	cbz	r3, 8009998 <__smakebuf_r+0x70>
 8009980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009984:	4630      	mov	r0, r6
 8009986:	f000 f81d 	bl	80099c4 <_isatty_r>
 800998a:	b128      	cbz	r0, 8009998 <__smakebuf_r+0x70>
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	f023 0303 	bic.w	r3, r3, #3
 8009992:	f043 0301 	orr.w	r3, r3, #1
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	431d      	orrs	r5, r3
 800999c:	81a5      	strh	r5, [r4, #12]
 800999e:	e7cf      	b.n	8009940 <__smakebuf_r+0x18>

080099a0 <_fstat_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4d07      	ldr	r5, [pc, #28]	@ (80099c0 <_fstat_r+0x20>)
 80099a4:	2300      	movs	r3, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	4611      	mov	r1, r2
 80099ac:	602b      	str	r3, [r5, #0]
 80099ae:	f7f7 fd0f 	bl	80013d0 <_fstat>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	d102      	bne.n	80099bc <_fstat_r+0x1c>
 80099b6:	682b      	ldr	r3, [r5, #0]
 80099b8:	b103      	cbz	r3, 80099bc <_fstat_r+0x1c>
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	bd38      	pop	{r3, r4, r5, pc}
 80099be:	bf00      	nop
 80099c0:	20000744 	.word	0x20000744

080099c4 <_isatty_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d06      	ldr	r5, [pc, #24]	@ (80099e0 <_isatty_r+0x1c>)
 80099c8:	2300      	movs	r3, #0
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	602b      	str	r3, [r5, #0]
 80099d0:	f7f7 fd0e 	bl	80013f0 <_isatty>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_isatty_r+0x1a>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_isatty_r+0x1a>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	20000744 	.word	0x20000744

080099e4 <_init>:
 80099e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e6:	bf00      	nop
 80099e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ea:	bc08      	pop	{r3}
 80099ec:	469e      	mov	lr, r3
 80099ee:	4770      	bx	lr

080099f0 <_fini>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	bf00      	nop
 80099f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f6:	bc08      	pop	{r3}
 80099f8:	469e      	mov	lr, r3
 80099fa:	4770      	bx	lr
